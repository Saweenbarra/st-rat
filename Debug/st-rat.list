
st-rat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a070  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800a1f8  0800a1f8  0001a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ec  0800a5ec  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f4  0800a5f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f4  0800a5f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000090  0800a68c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  0800a68c  00020a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c32e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f37  00000000  00000000  0003c3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00040328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00041520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024436  00000000  00000000  00042598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001893b  00000000  00000000  000669ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf83  00000000  00000000  0007f309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b28c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  0014b2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a1e0 	.word	0x0800a1e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a1e0 	.word	0x0800a1e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f003 fc6f 	bl	8003dc8 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000ac 	.word	0x200000ac
 80004f8:	200000b0 	.word	0x200000b0

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f003 fc55 	bl	8003dc8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f003 fd4b 	bl	8003fc4 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000b0 	.word	0x200000b0

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b81      	ldr	r3, [pc, #516]	; (8000754 <CS43_Init+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <CS43_Init+0x214>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <CS43_Init+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487b      	ldr	r0, [pc, #492]	; (8000758 <CS43_Init+0x218>)
 800056c:	f001 fd6a 	bl	8002044 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7a      	ldr	r3, [pc, #488]	; (800075c <CS43_Init+0x21c>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f009 fd52 	bl	800a024 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <CS43_Init+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4976      	ldr	r1, [pc, #472]	; (8000760 <CS43_Init+0x220>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <CS43_Init+0x220>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b72      	ldr	r3, [pc, #456]	; (8000760 <CS43_Init+0x220>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <CS43_Init+0x220>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <CS43_Init+0x220>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <CS43_Init+0x220>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4969      	ldr	r1, [pc, #420]	; (8000764 <CS43_Init+0x224>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <CS43_Init+0x220>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4965      	ldr	r1, [pc, #404]	; (8000764 <CS43_Init+0x224>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4962      	ldr	r1, [pc, #392]	; (8000760 <CS43_Init+0x220>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <CS43_Init+0x220>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <CS43_Init+0x220>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <CS43_Init+0x220>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <CS43_Init+0x220>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b53      	ldr	r3, [pc, #332]	; (8000760 <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0303 	orr.w	r3, r3, #3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <CS43_Init+0x224>)
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff3d 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <CS43_Init+0x224>)
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff57 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <CS43_Init+0x220>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <CS43_Init+0x220>)
 800065a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <CS43_Init+0x220>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000668:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066a:	493e      	ldr	r1, [pc, #248]	; (8000764 <CS43_Init+0x224>)
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff27 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000672:	493c      	ldr	r1, [pc, #240]	; (8000764 <CS43_Init+0x224>)
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff41 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <CS43_Init+0x220>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <CS43_Init+0x220>)
 8000686:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <CS43_Init+0x220>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000696:	4933      	ldr	r1, [pc, #204]	; (8000764 <CS43_Init+0x224>)
 8000698:	2009      	movs	r0, #9
 800069a:	f7ff ff11 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <CS43_Init+0x224>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f7ff ff2b 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d123      	bne.n	80006f6 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f023 0320 	bic.w	r3, r3, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f023 0310 	bic.w	r3, r3, #16
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	e006      	b.n	8000704 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006f6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <CS43_Init+0x224>)
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff feda 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <CS43_Init+0x224>)
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fef4 	bl	80004fc <read_register>
	iData[1] = 0x00;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800071a:	4912      	ldr	r1, [pc, #72]	; (8000764 <CS43_Init+0x224>)
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fecf 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000728:	490e      	ldr	r1, [pc, #56]	; (8000764 <CS43_Init+0x224>)
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff fec8 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <CS43_Init+0x224>)
 8000732:	2015      	movs	r0, #21
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <CS43_Init+0x224>)
 800073a:	201a      	movs	r0, #26
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <CS43_Init+0x224>)
 8000742:	201b      	movs	r0, #27
 8000744:	f7ff febc 	bl	80004c0 <write_register>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	20000230 	.word	0x20000230
 8000758:	40020c00 	.word	0x40020c00
 800075c:	200000b0 	.word	0x200000b0
 8000760:	200000ac 	.word	0x200000ac
 8000764:	200000ad 	.word	0x200000ad

08000768 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d837      	bhi.n	80007e8 <CS43_Enable_RightLeft+0x80>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <CS43_Enable_RightLeft+0x18>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a7 	.word	0x080007a7
 8000788:	080007bd 	.word	0x080007bd
 800078c:	080007d3 	.word	0x080007d3
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a2:	705a      	strb	r2, [r3, #1]
			break;
 80007a4:	e021      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e016      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ce:	705a      	strb	r2, [r3, #1]
			break;
 80007d0:	e00b      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	705a      	strb	r2, [r3, #1]
			break;
 80007e6:	e000      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000804:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <CS43_Enable_RightLeft+0xb4>)
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fe59 	bl	80004c0 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000ac 	.word	0x200000ac
 800081c:	200000ad 	.word	0x200000ad

08000820 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b32      	subs	r3, #50	; 0x32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <CS43_SetVolume+0x78>)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000844:	4915      	ldr	r1, [pc, #84]	; (800089c <CS43_SetVolume+0x7c>)
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <CS43_SetVolume+0x7c>)
 800084e:	2015      	movs	r0, #21
 8000850:	f7ff fe36 	bl	80004c0 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d80e      	bhi.n	8000878 <CS43_SetVolume+0x58>
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <CS43_SetVolume+0x80>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1152      	asrs	r2, r2, #5
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b18      	subs	r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	e000      	b.n	800087a <CS43_SetVolume+0x5a>
 8000878:	2318      	movs	r3, #24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <CS43_SetVolume+0x78>)
 800087c:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <CS43_SetVolume+0x7c>)
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff fe1d 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <CS43_SetVolume+0x7c>)
 8000888:	2021      	movs	r0, #33	; 0x21
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000ac 	.word	0x200000ac
 800089c:	200000ad 	.word	0x200000ad
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <CS43_Start+0x7c>)
 80008aa:	2299      	movs	r2, #153	; 0x99
 80008ac:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ae:	491d      	ldr	r1, [pc, #116]	; (8000924 <CS43_Start+0x80>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe05 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <CS43_Start+0x7c>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <CS43_Start+0x80>)
 80008be:	2047      	movs	r0, #71	; 0x47
 80008c0:	f7ff fdfe 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <CS43_Start+0x80>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe18 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <CS43_Start+0x7c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <CS43_Start+0x7c>)
 80008d8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdef 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <CS43_Start+0x7c>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <CS43_Start+0x7c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde0 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <CS43_Start+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <CS43_Start+0x80>)
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdd9 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <CS43_Start+0x7c>)
 8000910:	229e      	movs	r2, #158	; 0x9e
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	4903      	ldr	r1, [pc, #12]	; (8000924 <CS43_Start+0x80>)
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd2 	bl	80004c0 <write_register>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000ac 	.word	0x200000ac
 8000924:	200000ad 	.word	0x200000ad

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b095      	sub	sp, #84	; 0x54
 800092c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  sample_dt = F_OUT/F_SAMPLE;
 800092e:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <main+0x104>)
 8000930:	4a3f      	ldr	r2, [pc, #252]	; (8000a30 <main+0x108>)
 8000932:	601a      	str	r2, [r3, #0]
  sample_N = F_SAMPLE/F_OUT;
 8000934:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <main+0x10c>)
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f000 fccf 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f887 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 f9b9 	bl	8000cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000946:	f000 f997 	bl	8000c78 <MX_DMA_Init>
  MX_I2C1_Init();
 800094a:	f000 f903 	bl	8000b54 <MX_I2C1_Init>
  MX_I2S3_Init();
 800094e:	f000 f92f 	bl	8000bb0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000952:	f000 f95b 	bl	8000c0c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000956:	f008 fab7 	bl	8008ec8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 800095a:	4c37      	ldr	r4, [pc, #220]	; (8000a38 <main+0x110>)
 800095c:	2300      	movs	r3, #0
 800095e:	9311      	str	r3, [sp, #68]	; 0x44
 8000960:	4668      	mov	r0, sp
 8000962:	f104 0310 	add.w	r3, r4, #16
 8000966:	2244      	movs	r2, #68	; 0x44
 8000968:	4619      	mov	r1, r3
 800096a:	f009 fb5b 	bl	800a024 <memcpy>
 800096e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000972:	f7ff fde5 	bl	8000540 <CS43_Init>
  CS43_SetVolume(25);
 8000976:	2019      	movs	r0, #25
 8000978:	f7ff ff52 	bl	8000820 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800097c:	2003      	movs	r0, #3
 800097e:	f7ff fef3 	bl	8000768 <CS43_Enable_RightLeft>
  CS43_Start();
 8000982:	f7ff ff8f 	bl	80008a4 <CS43_Start>

  //Build Sine wave
  	for(uint16_t i=0; i<sample_N; i++)
 8000986:	2300      	movs	r3, #0
 8000988:	80fb      	strh	r3, [r7, #6]
 800098a:	e03d      	b.n	8000a08 <main+0xe0>
  	{
  		mySinVal = sinf(i*2*PI*sample_dt);
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	ee07 3a90 	vmov	s15, r3
 8000994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000998:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000a3c <main+0x114>
 800099c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <main+0x104>)
 80009a2:	edd3 7a00 	vldr	s15, [r3]
 80009a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009aa:	eeb0 0a67 	vmov.f32	s0, s15
 80009ae:	f008 fd93 	bl	80094d8 <sinf>
 80009b2:	eef0 7a40 	vmov.f32	s15, s0
 80009b6:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <main+0x118>)
 80009b8:	edc3 7a00 	vstr	s15, [r3]
  		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <main+0x118>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000a44 <main+0x11c>
 80009c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009d2:	ee17 2a90 	vmov	r2, s15
 80009d6:	b211      	sxth	r1, r2
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <main+0x120>)
 80009da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <main+0x118>)
 80009e0:	edd3 7a00 	vldr	s15, [r3]
 80009e4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000a44 <main+0x11c>
 80009e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	3301      	adds	r3, #1
 80009f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f6:	ee17 2a90 	vmov	r2, s15
 80009fa:	b211      	sxth	r1, r2
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <main+0x120>)
 80009fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	for(uint16_t i=0; i<sample_N; i++)
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	3301      	adds	r3, #1
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <main+0x10c>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	88fa      	ldrh	r2, [r7, #6]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d3bc      	bcc.n	800098c <main+0x64>
  	}

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, sample_N*2);
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <main+0x10c>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	490a      	ldr	r1, [pc, #40]	; (8000a48 <main+0x120>)
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <main+0x124>)
 8000a20:	f004 f964 	bl	8004cec <HAL_I2S_Transmit_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a24:	f008 fa76 	bl	8008f14 <MX_USB_HOST_Process>
 8000a28:	e7fc      	b.n	8000a24 <main+0xfc>
 8000a2a:	bf00      	nop
 8000a2c:	2000022c 	.word	0x2000022c
 8000a30:	3c23d70a 	.word	0x3c23d70a
 8000a34:	20000118 	.word	0x20000118
 8000a38:	20000120 	.word	0x20000120
 8000a3c:	40490fd0 	.word	0x40490fd0
 8000a40:	2000011c 	.word	0x2000011c
 8000a44:	45fa0000 	.word	0x45fa0000
 8000a48:	20000278 	.word	0x20000278
 8000a4c:	20000230 	.word	0x20000230

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b098      	sub	sp, #96	; 0x60
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f009 faee 	bl	800a040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <SystemClock_Config+0x100>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <SystemClock_Config+0x100>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0x100>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aba:	2301      	movs	r3, #1
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fd67 	bl	80055b8 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000af0:	f000 f9e0 	bl	8000eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	2105      	movs	r1, #5
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 ffc8 	bl	8005aa8 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b1e:	f000 f9c9 	bl	8000eb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 f9a0 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b3e:	f000 f9b9 	bl	8000eb4 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3760      	adds	r7, #96	; 0x60
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_I2C1_Init+0x54>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_I2C1_Init+0x58>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b92:	f002 ffd5 	bl	8003b40 <HAL_I2C_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 f98a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000120 	.word	0x20000120
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	000186a0 	.word	0x000186a0

08000bb0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <MX_I2S3_Init+0x58>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bd8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bdc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bf2:	f003 ff3b 	bl	8004a6c <HAL_I2S_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bfc:	f000 f95a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000230 	.word	0x20000230
 8000c08:	40003c00 	.word	0x40003c00

08000c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_SPI1_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c5e:	f005 fa4b 	bl	80060f8 <HAL_SPI_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c68:	f000 f924 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200001d4 	.word	0x200001d4
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_DMA_Init+0x3c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2010      	movs	r0, #16
 8000ca0:	f000 fc8d 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ca4:	2010      	movs	r0, #16
 8000ca6:	f000 fca6 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b71      	ldr	r3, [pc, #452]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a70      	ldr	r2, [pc, #448]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b6e      	ldr	r3, [pc, #440]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b6a      	ldr	r3, [pc, #424]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a69      	ldr	r2, [pc, #420]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b67      	ldr	r3, [pc, #412]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b63      	ldr	r3, [pc, #396]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a62      	ldr	r2, [pc, #392]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b60      	ldr	r3, [pc, #384]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b5c      	ldr	r3, [pc, #368]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b59      	ldr	r3, [pc, #356]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a54      	ldr	r2, [pc, #336]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b52      	ldr	r3, [pc, #328]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a4d      	ldr	r2, [pc, #308]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <MX_GPIO_Init+0x1e0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4848      	ldr	r0, [pc, #288]	; (8000e9c <MX_GPIO_Init+0x1e4>)
 8000d7c:	f001 f962 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2101      	movs	r1, #1
 8000d84:	4846      	ldr	r0, [pc, #280]	; (8000ea0 <MX_GPIO_Init+0x1e8>)
 8000d86:	f001 f95d 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d90:	4844      	ldr	r0, [pc, #272]	; (8000ea4 <MX_GPIO_Init+0x1ec>)
 8000d92:	f001 f957 	bl	8002044 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	483b      	ldr	r0, [pc, #236]	; (8000e9c <MX_GPIO_Init+0x1e4>)
 8000dae:	f000 ffad 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4835      	ldr	r0, [pc, #212]	; (8000ea0 <MX_GPIO_Init+0x1e8>)
 8000dca:	f000 ff9f 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dde:	2305      	movs	r3, #5
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	482d      	ldr	r0, [pc, #180]	; (8000ea0 <MX_GPIO_Init+0x1e8>)
 8000dea:	f000 ff8f 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <MX_GPIO_Init+0x1f0>)
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482a      	ldr	r0, [pc, #168]	; (8000eac <MX_GPIO_Init+0x1f4>)
 8000e02:	f000 ff83 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e06:	2304      	movs	r3, #4
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <MX_GPIO_Init+0x1f8>)
 8000e1a:	f000 ff77 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e30:	2305      	movs	r3, #5
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	481d      	ldr	r0, [pc, #116]	; (8000eb0 <MX_GPIO_Init+0x1f8>)
 8000e3c:	f000 ff66 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e40:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e44:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_GPIO_Init+0x1ec>)
 8000e5a:	f000 ff57 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e5e:	2320      	movs	r3, #32
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_GPIO_Init+0x1ec>)
 8000e72:	f000 ff4b 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_GPIO_Init+0x1f0>)
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_GPIO_Init+0x1e4>)
 8000e8a:	f000 ff3f 	bl	8001d0c <HAL_GPIO_Init>

}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	; 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	10120000 	.word	0x10120000
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efe:	2007      	movs	r0, #7
 8000f00:	f000 fb52 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_I2C_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12c      	bne.n	8000f8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f60:	2304      	movs	r3, #4
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HAL_I2C_MspInit+0x8c>)
 8000f6c:	f000 fece 	bl	8001d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40005400 	.word	0x40005400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a45      	ldr	r2, [pc, #276]	; (80010d4 <HAL_I2S_MspInit+0x134>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	f040 8084 	bne.w	80010cc <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a42      	ldr	r2, [pc, #264]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a3b      	ldr	r2, [pc, #236]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <HAL_I2S_MspInit+0x138>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001018:	2310      	movs	r3, #16
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001028:	2306      	movs	r3, #6
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	482a      	ldr	r0, [pc, #168]	; (80010dc <HAL_I2S_MspInit+0x13c>)
 8001034:	f000 fe6a 	bl	8001d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001038:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800104a:	2306      	movs	r3, #6
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4822      	ldr	r0, [pc, #136]	; (80010e0 <HAL_I2S_MspInit+0x140>)
 8001056:	f000 fe59 	bl	8001d0c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <HAL_I2S_MspInit+0x148>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 800107c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001080:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 8001084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001088:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 800109a:	2204      	movs	r2, #4
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 80010a0:	2203      	movs	r2, #3
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 80010b2:	f000 fabb 	bl	800162c <HAL_DMA_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 80010bc:	f7ff fefa 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_I2S_MspInit+0x144>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40003c00 	.word	0x40003c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020800 	.word	0x40020800
 80010e4:	20000174 	.word	0x20000174
 80010e8:	40026088 	.word	0x40026088

080010ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_SPI_MspInit+0x84>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12b      	bne.n	8001166 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_SPI_MspInit+0x88>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_SPI_MspInit+0x88>)
 8001118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_SPI_MspInit+0x88>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_SPI_MspInit+0x88>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_SPI_MspInit+0x88>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_SPI_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001146:	23e0      	movs	r3, #224	; 0xe0
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001156:	2305      	movs	r3, #5
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_SPI_MspInit+0x8c>)
 8001162:	f000 fdd3 	bl	8001d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40013000 	.word	0x40013000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f8da 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <DMA1_Stream5_IRQHandler+0x10>)
 80011d6:	f000 fb2f 	bl	8001838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000174 	.word	0x20000174

080011e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <OTG_FS_IRQHandler+0x10>)
 80011ea:	f001 f9af 	bl	800254c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000720 	.word	0x20000720

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f008 fec2 	bl	8009fb0 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20020000 	.word	0x20020000
 8001258:	00000400 	.word	0x00000400
 800125c:	20000104 	.word	0x20000104
 8001260:	20000a38 	.word	0x20000a38

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a4:	4c0b      	ldr	r4, [pc, #44]	; (80012d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012b2:	f7ff ffd7 	bl	8001264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f008 fe81 	bl	8009fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fb35 	bl	8000928 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012cc:	0800a5fc 	.word	0x0800a5fc
  ldr r2, =_sbss
 80012d0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012d4:	20000a34 	.word	0x20000a34

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f94f 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fdd6 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f967 	bl	8001612 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f92f 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000344 	.word	0x20000344

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000344 	.word	0x20000344

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff3e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff31 	bl	800146c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff feb6 	bl	80013a8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e099      	b.n	800177c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001668:	e00f      	b.n	800168a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166a:	f7ff fe9d 	bl	80013a8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b05      	cmp	r3, #5
 8001676:	d908      	bls.n	800168a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e078      	b.n	800177c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e8      	bne.n	800166a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_DMA_Init+0x158>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d107      	bne.n	80016f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4313      	orrs	r3, r2
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f023 0307 	bic.w	r3, r3, #7
 800170a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	2b04      	cmp	r3, #4
 800171c:	d117      	bne.n	800174e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00e      	beq.n	800174e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fa6f 	bl	8001c14 <DMA_CheckFifoParam>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800174a:	2301      	movs	r3, #1
 800174c:	e016      	b.n	800177c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fa26 	bl	8001ba8 <DMA_CalcBaseAndBitshift>
 800175c:	4603      	mov	r3, r0
 800175e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	223f      	movs	r2, #63	; 0x3f
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f010803f 	.word	0xf010803f

08001788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_DMA_Start_IT+0x26>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e040      	b.n	8001830 <HAL_DMA_Start_IT+0xa8>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d12f      	bne.n	8001822 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f9b8 	bl	8001b4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0216 	orr.w	r2, r2, #22
 80017f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e005      	b.n	800182e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800182e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001844:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <HAL_DMA_IRQHandler+0x258>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <HAL_DMA_IRQHandler+0x25c>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0a9b      	lsrs	r3, r3, #10
 8001850:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001862:	2208      	movs	r2, #8
 8001864:	409a      	lsls	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01a      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0204 	bic.w	r2, r2, #4
 800188a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	2208      	movs	r2, #8
 8001892:	409a      	lsls	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	2201      	movs	r2, #1
 80018aa:	409a      	lsls	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d012      	beq.n	80018da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	2201      	movs	r2, #1
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	2204      	movs	r2, #4
 80018e0:	409a      	lsls	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d012      	beq.n	8001910 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00b      	beq.n	8001910 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	2204      	movs	r2, #4
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f043 0204 	orr.w	r2, r3, #4
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001914:	2210      	movs	r2, #16
 8001916:	409a      	lsls	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d043      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d03c      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	2210      	movs	r2, #16
 8001934:	409a      	lsls	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d018      	beq.n	800197a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
 8001966:	e01f      	b.n	80019a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01b      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
 8001978:	e016      	b.n	80019a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0208 	bic.w	r2, r2, #8
 8001996:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	2220      	movs	r2, #32
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 808e 	beq.w	8001ad6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8086 	beq.w	8001ad6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	2220      	movs	r2, #32
 80019d0:	409a      	lsls	r2, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d136      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0216 	bic.w	r2, r2, #22
 80019f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d103      	bne.n	8001a12 <HAL_DMA_IRQHandler+0x1da>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0208 	bic.w	r2, r2, #8
 8001a20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	223f      	movs	r2, #63	; 0x3f
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d07d      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	4798      	blx	r3
        }
        return;
 8001a4e:	e078      	b.n	8001b42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d01c      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d108      	bne.n	8001a7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d030      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
 8001a7c:	e02b      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d027      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
 8001a8e:	e022      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x29e>
 8001a90:	20000000 	.word	0x20000000
 8001a94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0210 	bic.w	r2, r2, #16
 8001ab4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d032      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d022      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2205      	movs	r2, #5
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d307      	bcc.n	8001b1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f2      	bne.n	8001b02 <HAL_DMA_IRQHandler+0x2ca>
 8001b1c:	e000      	b.n	8001b20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
 8001b40:	e000      	b.n	8001b44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b42:	bf00      	nop
    }
  }
}
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop

08001b4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b40      	cmp	r3, #64	; 0x40
 8001b78:	d108      	bne.n	8001b8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b8a:	e007      	b.n	8001b9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3b10      	subs	r3, #16
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <DMA_CalcBaseAndBitshift+0x64>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <DMA_CalcBaseAndBitshift+0x68>)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d909      	bls.n	8001bea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58
 8001be8:	e007      	b.n	8001bfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bf2:	f023 0303 	bic.w	r3, r3, #3
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	aaaaaaab 	.word	0xaaaaaaab
 8001c10:	0800a214 	.word	0x0800a214

08001c14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11f      	bne.n	8001c6e <DMA_CheckFifoParam+0x5a>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d856      	bhi.n	8001ce2 <DMA_CheckFifoParam+0xce>
 8001c34:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <DMA_CheckFifoParam+0x28>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c5f 	.word	0x08001c5f
 8001c44:	08001c4d 	.word	0x08001c4d
 8001c48:	08001ce3 	.word	0x08001ce3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d046      	beq.n	8001ce6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c5c:	e043      	b.n	8001ce6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c66:	d140      	bne.n	8001cea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c6c:	e03d      	b.n	8001cea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c76:	d121      	bne.n	8001cbc <DMA_CheckFifoParam+0xa8>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d837      	bhi.n	8001cee <DMA_CheckFifoParam+0xda>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <DMA_CheckFifoParam+0x70>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001c9b 	.word	0x08001c9b
 8001c8c:	08001c95 	.word	0x08001c95
 8001c90:	08001cad 	.word	0x08001cad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      break;
 8001c98:	e030      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d025      	beq.n	8001cf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001caa:	e022      	b.n	8001cf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb4:	d11f      	bne.n	8001cf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cba:	e01c      	b.n	8001cf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d903      	bls.n	8001cca <DMA_CheckFifoParam+0xb6>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d003      	beq.n	8001cd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cc8:	e018      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8001cce:	e015      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00e      	beq.n	8001cfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce0:	e00b      	b.n	8001cfa <DMA_CheckFifoParam+0xe6>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e00a      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001ce6:	bf00      	nop
 8001ce8:	e008      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
 8001cec:	e006      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cee:	bf00      	nop
 8001cf0:	e004      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cf2:	bf00      	nop
 8001cf4:	e002      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cf6:	bf00      	nop
 8001cf8:	e000      	b.n	8001cfc <DMA_CheckFifoParam+0xe8>
      break;
 8001cfa:	bf00      	nop
    }
  } 
  
  return status; 
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e16b      	b.n	8002000 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 815a 	bne.w	8001ffa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d005      	beq.n	8001d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d017      	beq.n	8001dfc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80b4 	beq.w	8001ffa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <HAL_GPIO_Init+0x30c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a5f      	ldr	r2, [pc, #380]	; (8002018 <HAL_GPIO_Init+0x30c>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <HAL_GPIO_Init+0x30c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eae:	4a5b      	ldr	r2, [pc, #364]	; (800201c <HAL_GPIO_Init+0x310>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	; (8002020 <HAL_GPIO_Init+0x314>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d02b      	beq.n	8001f32 <HAL_GPIO_Init+0x226>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a51      	ldr	r2, [pc, #324]	; (8002024 <HAL_GPIO_Init+0x318>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d025      	beq.n	8001f2e <HAL_GPIO_Init+0x222>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a50      	ldr	r2, [pc, #320]	; (8002028 <HAL_GPIO_Init+0x31c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01f      	beq.n	8001f2a <HAL_GPIO_Init+0x21e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4f      	ldr	r2, [pc, #316]	; (800202c <HAL_GPIO_Init+0x320>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x21a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <HAL_GPIO_Init+0x324>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x216>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4d      	ldr	r2, [pc, #308]	; (8002034 <HAL_GPIO_Init+0x328>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x212>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4c      	ldr	r2, [pc, #304]	; (8002038 <HAL_GPIO_Init+0x32c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x20e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4b      	ldr	r2, [pc, #300]	; (800203c <HAL_GPIO_Init+0x330>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x20a>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e00e      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f16:	2308      	movs	r3, #8
 8001f18:	e00c      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	e00a      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	e008      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f22:	2304      	movs	r3, #4
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f26:	2303      	movs	r3, #3
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x228>
 8001f32:	2300      	movs	r3, #0
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x310>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f76:	4a32      	ldr	r2, [pc, #200]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f7c:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa0:	4a27      	ldr	r2, [pc, #156]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fca:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <HAL_GPIO_Init+0x334>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	f67f ae90 	bls.w	8001d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40021400 	.word	0x40021400
 8002038:	40021800 	.word	0x40021800
 800203c:	40021c00 	.word	0x40021c00
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002078:	b08f      	sub	sp, #60	; 0x3c
 800207a:	af0a      	add	r7, sp, #40	; 0x28
 800207c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e054      	b.n	8002132 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f006 ff6e 	bl	8008f84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 f911 	bl	80062ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	687e      	ldr	r6, [r7, #4]
 80020d4:	466d      	mov	r5, sp
 80020d6:	f106 0410 	add.w	r4, r6, #16
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ea:	1d33      	adds	r3, r6, #4
 80020ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ee:	6838      	ldr	r0, [r7, #0]
 80020f0:	f004 f88b 	bl	800620a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f908 	bl	8006310 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	687e      	ldr	r6, [r7, #4]
 8002108:	466d      	mov	r5, sp
 800210a:	f106 0410 	add.w	r4, r6, #16
 800210e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800211a:	e885 0003 	stmia.w	r5, {r0, r1}
 800211e:	1d33      	adds	r3, r6, #4
 8002120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002122:	6838      	ldr	r0, [r7, #0]
 8002124:	f004 fa1a 	bl	800655c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800213a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800213a:	b590      	push	{r4, r7, lr}
 800213c:	b089      	sub	sp, #36	; 0x24
 800213e:	af04      	add	r7, sp, #16
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	4608      	mov	r0, r1
 8002144:	4611      	mov	r1, r2
 8002146:	461a      	mov	r2, r3
 8002148:	4603      	mov	r3, r0
 800214a:	70fb      	strb	r3, [r7, #3]
 800214c:	460b      	mov	r3, r1
 800214e:	70bb      	strb	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_HCD_HC_Init+0x28>
 800215e:	2302      	movs	r3, #2
 8002160:	e076      	b.n	8002250 <HAL_HCD_HC_Init+0x116>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	333d      	adds	r3, #61	; 0x3d
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3338      	adds	r3, #56	; 0x38
 800218a:	787a      	ldrb	r2, [r7, #1]
 800218c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3340      	adds	r3, #64	; 0x40
 800219c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800219e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3339      	adds	r3, #57	; 0x39
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	333f      	adds	r3, #63	; 0x3f
 80021c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	78ba      	ldrb	r2, [r7, #2]
 80021ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ce:	b2d0      	uxtb	r0, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	333a      	adds	r3, #58	; 0x3a
 80021dc:	4602      	mov	r2, r0
 80021de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da09      	bge.n	80021fc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	333b      	adds	r3, #59	; 0x3b
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e008      	b.n	800220e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	333b      	adds	r3, #59	; 0x3b
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	333c      	adds	r3, #60	; 0x3c
 800221c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002220:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	787c      	ldrb	r4, [r7, #1]
 8002228:	78ba      	ldrb	r2, [r7, #2]
 800222a:	78f9      	ldrb	r1, [r7, #3]
 800222c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	f897 3020 	ldrb.w	r3, [r7, #32]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4623      	mov	r3, r4
 800223e:	f004 fb0f 	bl	8006860 <USB_HC_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bd90      	pop	{r4, r7, pc}

08002258 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_HCD_HC_Halt+0x1e>
 8002272:	2302      	movs	r3, #2
 8002274:	e00f      	b.n	8002296 <HAL_HCD_HC_Halt+0x3e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f004 fd4b 	bl	8006d22 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	70fb      	strb	r3, [r7, #3]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70bb      	strb	r3, [r7, #2]
 80022b6:	4613      	mov	r3, r2
 80022b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	333b      	adds	r3, #59	; 0x3b
 80022c8:	78ba      	ldrb	r2, [r7, #2]
 80022ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	333f      	adds	r3, #63	; 0x3f
 80022da:	787a      	ldrb	r2, [r7, #1]
 80022dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022de:	7c3b      	ldrb	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d112      	bne.n	800230a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3342      	adds	r3, #66	; 0x42
 80022f2:	2203      	movs	r2, #3
 80022f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	333d      	adds	r3, #61	; 0x3d
 8002304:	7f3a      	ldrb	r2, [r7, #28]
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e008      	b.n	800231c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3342      	adds	r3, #66	; 0x42
 8002318:	2202      	movs	r2, #2
 800231a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b03      	cmp	r3, #3
 8002320:	f200 80c6 	bhi.w	80024b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002324:	a201      	add	r2, pc, #4	; (adr r2, 800232c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232a:	bf00      	nop
 800232c:	0800233d 	.word	0x0800233d
 8002330:	0800249d 	.word	0x0800249d
 8002334:	080023a1 	.word	0x080023a1
 8002338:	0800241f 	.word	0x0800241f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800233c:	7c3b      	ldrb	r3, [r7, #16]
 800233e:	2b01      	cmp	r3, #1
 8002340:	f040 80b8 	bne.w	80024b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002344:	78bb      	ldrb	r3, [r7, #2]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 80b4 	bne.w	80024b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800234c:	8b3b      	ldrh	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	3355      	adds	r3, #85	; 0x55
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3355      	adds	r3, #85	; 0x55
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3342      	adds	r3, #66	; 0x42
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800238a:	e093      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3342      	adds	r3, #66	; 0x42
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
      break;
 800239e:	e089      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023a0:	78bb      	ldrb	r3, [r7, #2]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11d      	bne.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3355      	adds	r3, #85	; 0x55
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3342      	adds	r3, #66	; 0x42
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023cc:	e073      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3342      	adds	r3, #66	; 0x42
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]
      break;
 80023e0:	e069      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	3354      	adds	r3, #84	; 0x54
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3342      	adds	r3, #66	; 0x42
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
      break;
 8002408:	e055      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3342      	adds	r3, #66	; 0x42
 8002418:	2202      	movs	r2, #2
 800241a:	701a      	strb	r2, [r3, #0]
      break;
 800241c:	e04b      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800241e:	78bb      	ldrb	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11d      	bne.n	8002460 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3355      	adds	r3, #85	; 0x55
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3342      	adds	r3, #66	; 0x42
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800244a:	e034      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3342      	adds	r3, #66	; 0x42
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
      break;
 800245e:	e02a      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3354      	adds	r3, #84	; 0x54
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3342      	adds	r3, #66	; 0x42
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
      break;
 8002486:	e016      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3342      	adds	r3, #66	; 0x42
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
      break;
 800249a:	e00c      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3342      	adds	r3, #66	; 0x42
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
      break;
 80024ae:	e002      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80024b0:	bf00      	nop
 80024b2:	e000      	b.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80024b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3344      	adds	r3, #68	; 0x44
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	8b3a      	ldrh	r2, [r7, #24]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	202c      	movs	r0, #44	; 0x2c
 80024d0:	fb00 f303 	mul.w	r3, r0, r3
 80024d4:	440b      	add	r3, r1
 80024d6:	334c      	adds	r3, #76	; 0x4c
 80024d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3360      	adds	r3, #96	; 0x60
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3350      	adds	r3, #80	; 0x50
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	3339      	adds	r3, #57	; 0x39
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	222c      	movs	r2, #44	; 0x2c
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	3338      	adds	r3, #56	; 0x38
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	18d1      	adds	r1, r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	f004 fa9e 	bl	8006a7c <USB_HC_StartXfer>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop

0800254c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 ffb7 	bl	80064d6 <USB_GetMode>
 8002568:	4603      	mov	r3, r0
 800256a:	2b01      	cmp	r3, #1
 800256c:	f040 80ef 	bne.w	800274e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 ff9b 	bl	80064b0 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80e5 	beq.w	800274c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 ff92 	bl	80064b0 <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002596:	d104      	bne.n	80025a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 ff82 	bl	80064b0 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025b6:	d104      	bne.n	80025c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 ff72 	bl	80064b0 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d6:	d104      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ff62 	bl	80064b0 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d103      	bne.n	80025fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2202      	movs	r2, #2
 80025fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 ff54 	bl	80064b0 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800260e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002612:	d115      	bne.n	8002640 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800261c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f006 fd26 	bl	8009080 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	4618      	mov	r0, r3
 800263c:	f004 f84a 	bl	80066d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f003 ff33 	bl	80064b0 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002654:	d102      	bne.n	800265c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f001 f9ff 	bl	8003a5a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 ff25 	bl	80064b0 <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b08      	cmp	r3, #8
 800266e:	d106      	bne.n	800267e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f006 fce9 	bl	8009048 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2208      	movs	r2, #8
 800267c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 ff14 	bl	80064b0 <USB_ReadInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b10      	cmp	r3, #16
 8002690:	d101      	bne.n	8002696 <HAL_HCD_IRQHandler+0x14a>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_HCD_IRQHandler+0x14c>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0210 	bic.w	r2, r2, #16
 80026aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f001 f902 	bl	80038b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0210 	orr.w	r2, r2, #16
 80026c0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fef2 	bl	80064b0 <USB_ReadInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d6:	d13a      	bne.n	800274e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fb0f 	bl	8006d00 <USB_HC_ReadInterrupt>
 80026e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e025      	b.n	8002736 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d018      	beq.n	8002730 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002714:	d106      	bne.n	8002724 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f8ab 	bl	8002878 <HCD_HC_IN_IRQHandler>
 8002722:	e005      	b.n	8002730 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fcc6 	bl	80030bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	d3d4      	bcc.n	80026ea <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002748:	615a      	str	r2, [r3, #20]
 800274a:	e000      	b.n	800274e <HAL_HCD_IRQHandler+0x202>
      return;
 800274c:	bf00      	nop
    }
  }
}
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_HCD_Start+0x16>
 8002766:	2302      	movs	r3, #2
 8002768:	e013      	b.n	8002792 <HAL_HCD_Start+0x3e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fda8 	bl	80062cc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f004 f80a 	bl	800679c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_HCD_Stop+0x16>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e00d      	b.n	80027cc <HAL_HCD_Stop+0x32>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 fc09 	bl	8006fd4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 ffb1 	bl	8006748 <USB_ResetPort>
 80027e6:	4603      	mov	r3, r0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3360      	adds	r3, #96	; 0x60
 800280a:	781b      	ldrb	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3350      	adds	r3, #80	; 0x50
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 fff5 	bl	800683c <USB_GetCurrentFrame>
 8002852:	4603      	mov	r3, r0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 ffd0 	bl	800680e <USB_GetHostSpeed>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d119      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	2304      	movs	r3, #4
 80028b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	60d3      	str	r3, [r2, #12]
 80028da:	e101      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f2:	d12b      	bne.n	800294c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002906:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3361      	adds	r3, #97	; 0x61
 8002916:	2207      	movs	r2, #7
 8002918:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	0151      	lsls	r1, r2, #5
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	440a      	add	r2, r1
 8002930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f004 f9ec 	bl	8006d22 <USB_HC_Halt>
 800294a:	e0c9      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b20      	cmp	r3, #32
 8002960:	d109      	bne.n	8002976 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	2320      	movs	r3, #32
 8002972:	6093      	str	r3, [r2, #8]
 8002974:	e0b4      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d133      	bne.n	80029f4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	0151      	lsls	r1, r2, #5
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	440a      	add	r2, r1
 80029a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	2205      	movs	r2, #5
 80029bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	2310      	movs	r3, #16
 80029ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	461a      	mov	r2, r3
 80029de:	2308      	movs	r3, #8
 80029e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 f998 	bl	8006d22 <USB_HC_Halt>
 80029f2:	e075      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0a:	d134      	bne.n	8002a76 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	0151      	lsls	r1, r2, #5
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	440a      	add	r2, r1
 8002a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	; 0x61
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a62:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 f957 	bl	8006d22 <USB_HC_Halt>
 8002a74:	e034      	b.n	8002ae0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d129      	bne.n	8002ae0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	0151      	lsls	r1, r2, #5
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3361      	adds	r3, #97	; 0x61
 8002aba:	2206      	movs	r2, #6
 8002abc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 f92a 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af6:	d122      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 f8fd 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	461a      	mov	r2, r3
 8002b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b3c:	e2ba      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	f040 811b 	bne.w	8002d8c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d019      	beq.n	8002b92 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3348      	adds	r3, #72	; 0x48
 8002b6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	0159      	lsls	r1, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	202c      	movs	r0, #44	; 0x2c
 8002b88:	fb00 f303 	mul.w	r3, r0, r3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3350      	adds	r3, #80	; 0x50
 8002b90:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3361      	adds	r3, #97	; 0x61
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	335c      	adds	r3, #92	; 0x5c
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	333f      	adds	r3, #63	; 0x3f
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	333f      	adds	r3, #63	; 0x3f
 8002bea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d121      	bne.n	8002c34 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	0151      	lsls	r1, r2, #5
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	440a      	add	r2, r1
 8002c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c0a:	f043 0302 	orr.w	r3, r3, #2
 8002c0e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 f881 	bl	8006d22 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2310      	movs	r3, #16
 8002c30:	6093      	str	r3, [r2, #8]
 8002c32:	e066      	b.n	8002d02 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	333f      	adds	r3, #63	; 0x3f
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d127      	bne.n	8002c98 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	0151      	lsls	r1, r2, #5
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c66:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3360      	adds	r3, #96	; 0x60
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	b2d9      	uxtb	r1, r3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	202c      	movs	r0, #44	; 0x2c
 8002c84:	fb00 f303 	mul.w	r3, r0, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3360      	adds	r3, #96	; 0x60
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f006 fa03 	bl	800909c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c96:	e034      	b.n	8002d02 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	333f      	adds	r3, #63	; 0x3f
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d12a      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3360      	adds	r3, #96	; 0x60
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3354      	adds	r3, #84	; 0x54
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f083 0301 	eor.w	r3, r3, #1
 8002cd2:	b2d8      	uxtb	r0, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3354      	adds	r3, #84	; 0x54
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	b2d9      	uxtb	r1, r3
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	202c      	movs	r0, #44	; 0x2c
 8002cf0:	fb00 f303 	mul.w	r3, r0, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3360      	adds	r3, #96	; 0x60
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f006 f9cd 	bl	800909c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d12b      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3348      	adds	r3, #72	; 0x48
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	202c      	movs	r0, #44	; 0x2c
 8002d20:	fb00 f202 	mul.w	r2, r0, r2
 8002d24:	440a      	add	r2, r1
 8002d26:	3240      	adds	r2, #64	; 0x40
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 81be 	beq.w	80030b4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3354      	adds	r3, #84	; 0x54
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2d8      	uxtb	r0, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3354      	adds	r3, #84	; 0x54
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	701a      	strb	r2, [r3, #0]
}
 8002d60:	e1a8      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3354      	adds	r3, #84	; 0x54
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2d8      	uxtb	r0, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3354      	adds	r3, #84	; 0x54
 8002d86:	4602      	mov	r2, r0
 8002d88:	701a      	strb	r2, [r3, #0]
}
 8002d8a:	e193      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	f040 8106 	bne.w	8002fb0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	0151      	lsls	r1, r2, #5
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	440a      	add	r2, r1
 8002dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbe:	f023 0302 	bic.w	r3, r3, #2
 8002dc2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3361      	adds	r3, #97	; 0x61
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d109      	bne.n	8002dec <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3360      	adds	r3, #96	; 0x60
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e0c9      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3361      	adds	r3, #97	; 0x61
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d109      	bne.n	8002e14 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3360      	adds	r3, #96	; 0x60
 8002e0e:	2205      	movs	r2, #5
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e0b5      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3361      	adds	r3, #97	; 0x61
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b06      	cmp	r3, #6
 8002e26:	d009      	beq.n	8002e3c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3361      	adds	r3, #97	; 0x61
 8002e36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d150      	bne.n	8002ede <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	335c      	adds	r3, #92	; 0x5c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	202c      	movs	r0, #44	; 0x2c
 8002e54:	fb00 f303 	mul.w	r3, r0, r3
 8002e58:	440b      	add	r3, r1
 8002e5a:	335c      	adds	r3, #92	; 0x5c
 8002e5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	335c      	adds	r3, #92	; 0x5c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d912      	bls.n	8002e98 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	335c      	adds	r3, #92	; 0x5c
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3360      	adds	r3, #96	; 0x60
 8002e92:	2204      	movs	r2, #4
 8002e94:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e96:	e073      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3360      	adds	r3, #96	; 0x60
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ec0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002edc:	e050      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3361      	adds	r3, #97	; 0x61
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d122      	bne.n	8002f38 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2202      	movs	r2, #2
 8002f02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e023      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3361      	adds	r3, #97	; 0x61
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b07      	cmp	r3, #7
 8002f4a:	d119      	bne.n	8002f80 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	335c      	adds	r3, #92	; 0x5c
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	202c      	movs	r0, #44	; 0x2c
 8002f64:	fb00 f303 	mul.w	r3, r0, r3
 8002f68:	440b      	add	r3, r1
 8002f6a:	335c      	adds	r3, #92	; 0x5c
 8002f6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3360      	adds	r3, #96	; 0x60
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2302      	movs	r3, #2
 8002f90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	b2d9      	uxtb	r1, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	202c      	movs	r0, #44	; 0x2c
 8002f9c:	fb00 f303 	mul.w	r3, r0, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3360      	adds	r3, #96	; 0x60
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f006 f877 	bl	800909c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fae:	e081      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d176      	bne.n	80030b4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	333f      	adds	r3, #63	; 0x3f
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d121      	bne.n	800301e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	335c      	adds	r3, #92	; 0x5c
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	0151      	lsls	r1, r2, #5
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	440a      	add	r2, r1
 8003002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fe83 	bl	8006d22 <USB_HC_Halt>
 800301c:	e041      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	333f      	adds	r3, #63	; 0x3f
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	333f      	adds	r3, #63	; 0x3f
 8003040:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003042:	2b02      	cmp	r3, #2
 8003044:	d12d      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	335c      	adds	r3, #92	; 0x5c
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d120      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3361      	adds	r3, #97	; 0x61
 800306e:	2203      	movs	r2, #3
 8003070:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	0151      	lsls	r1, r2, #5
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	440a      	add	r2, r1
 8003088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fe40 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	2310      	movs	r3, #16
 80030b2:	6093      	str	r3, [r2, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d119      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	2304      	movs	r3, #4
 80030fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	0151      	lsls	r1, r2, #5
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	440a      	add	r2, r1
 8003114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800311e:	e3c6      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	d13e      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	2320      	movs	r3, #32
 8003146:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	333d      	adds	r3, #61	; 0x3d
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	f040 83a8 	bne.w	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	333d      	adds	r3, #61	; 0x3d
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3360      	adds	r3, #96	; 0x60
 800317e:	2202      	movs	r2, #2
 8003180:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	440a      	add	r2, r1
 8003198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fdb8 	bl	8006d22 <USB_HC_Halt>
}
 80031b2:	e37c      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ca:	d122      	bne.n	8003212 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 fd93 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320e:	6093      	str	r3, [r2, #8]
}
 8003210:	e34d      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d150      	bne.n	80032ca <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	335c      	adds	r3, #92	; 0x5c
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d111      	bne.n	8003274 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	333d      	adds	r3, #61	; 0x3d
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326e:	461a      	mov	r2, r3
 8003270:	2340      	movs	r3, #64	; 0x40
 8003272:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	440a      	add	r2, r1
 800328a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 fd3f 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	2301      	movs	r3, #1
 80032b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3361      	adds	r3, #97	; 0x61
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
}
 80032c8:	e2f1      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d13c      	bne.n	800335a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3361      	adds	r3, #97	; 0x61
 80032ee:	2204      	movs	r2, #4
 80032f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	333d      	adds	r3, #61	; 0x3d
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	335c      	adds	r3, #92	; 0x5c
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	0151      	lsls	r1, r2, #5
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	440a      	add	r2, r1
 800332c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fcee 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	2340      	movs	r3, #64	; 0x40
 8003356:	6093      	str	r3, [r2, #8]
}
 8003358:	e2a9      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d12a      	bne.n	80033c6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	461a      	mov	r2, r3
 800337e:	2308      	movs	r3, #8
 8003380:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	0151      	lsls	r1, r2, #5
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	440a      	add	r2, r1
 8003398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 fcb8 	bl	8006d22 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3361      	adds	r3, #97	; 0x61
 80033c0:	2205      	movs	r2, #5
 80033c2:	701a      	strb	r2, [r3, #0]
}
 80033c4:	e273      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d150      	bne.n	800347e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	335c      	adds	r3, #92	; 0x5c
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3361      	adds	r3, #97	; 0x61
 80033fc:	2203      	movs	r2, #3
 80033fe:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	333d      	adds	r3, #61	; 0x3d
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d112      	bne.n	800343a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	333c      	adds	r3, #60	; 0x3c
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d108      	bne.n	800343a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	333d      	adds	r3, #61	; 0x3d
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	0151      	lsls	r1, r2, #5
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	440a      	add	r2, r1
 8003450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f003 fc5c 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	2310      	movs	r3, #16
 800347a:	6093      	str	r3, [r2, #8]
}
 800347c:	e217      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d174      	bne.n	800357e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d121      	bne.n	80034e0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	3361      	adds	r3, #97	; 0x61
 80034aa:	2206      	movs	r2, #6
 80034ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	0151      	lsls	r1, r2, #5
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	440a      	add	r2, r1
 80034c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fc22 	bl	8006d22 <USB_HC_Halt>
 80034de:	e044      	b.n	800356a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	335c      	adds	r3, #92	; 0x5c
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	202c      	movs	r0, #44	; 0x2c
 80034f8:	fb00 f303 	mul.w	r3, r0, r3
 80034fc:	440b      	add	r3, r1
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	335c      	adds	r3, #92	; 0x5c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d920      	bls.n	8003558 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	335c      	adds	r3, #92	; 0x5c
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3360      	adds	r3, #96	; 0x60
 8003536:	2204      	movs	r2, #4
 8003538:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	b2d9      	uxtb	r1, r3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	202c      	movs	r0, #44	; 0x2c
 8003544:	fb00 f303 	mul.w	r3, r0, r3
 8003548:	4413      	add	r3, r2
 800354a:	3360      	adds	r3, #96	; 0x60
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f005 fda3 	bl	800909c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003556:	e008      	b.n	800356a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3360      	adds	r3, #96	; 0x60
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	461a      	mov	r2, r3
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	6093      	str	r3, [r2, #8]
}
 800357c:	e197      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4413      	add	r3, r2
 8003586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d134      	bne.n	8003600 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fbae 	bl	8006d22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	461a      	mov	r2, r3
 80035d4:	2310      	movs	r3, #16
 80035d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	3361      	adds	r3, #97	; 0x61
 80035fa:	2208      	movs	r2, #8
 80035fc:	701a      	strb	r2, [r3, #0]
}
 80035fe:	e156      	b.n	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	f040 814b 	bne.w	80038ae <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	0151      	lsls	r1, r2, #5
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	440a      	add	r2, r1
 800362e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003632:	f023 0302 	bic.w	r3, r3, #2
 8003636:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3361      	adds	r3, #97	; 0x61
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d179      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3360      	adds	r3, #96	; 0x60
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	333f      	adds	r3, #63	; 0x3f
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d00a      	beq.n	8003688 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	333f      	adds	r3, #63	; 0x3f
 8003680:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003682:	2b03      	cmp	r3, #3
 8003684:	f040 80fc 	bne.w	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d142      	bne.n	8003716 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	334c      	adds	r3, #76	; 0x4c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80ed 	beq.w	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	334c      	adds	r3, #76	; 0x4c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	202c      	movs	r0, #44	; 0x2c
 80036bc:	fb00 f202 	mul.w	r2, r0, r2
 80036c0:	440a      	add	r2, r1
 80036c2:	3240      	adds	r2, #64	; 0x40
 80036c4:	8812      	ldrh	r2, [r2, #0]
 80036c6:	4413      	add	r3, r2
 80036c8:	3b01      	subs	r3, #1
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	202c      	movs	r0, #44	; 0x2c
 80036d0:	fb00 f202 	mul.w	r2, r0, r2
 80036d4:	440a      	add	r2, r1
 80036d6:	3240      	adds	r2, #64	; 0x40
 80036d8:	8812      	ldrh	r2, [r2, #0]
 80036da:	fbb3 f3f2 	udiv	r3, r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80ca 	beq.w	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3355      	adds	r3, #85	; 0x55
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2d8      	uxtb	r0, r3
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	212c      	movs	r1, #44	; 0x2c
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	4413      	add	r3, r2
 800370e:	3355      	adds	r3, #85	; 0x55
 8003710:	4602      	mov	r2, r0
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e0b4      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	3355      	adds	r3, #85	; 0x55
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	f083 0301 	eor.w	r3, r3, #1
 800372a:	b2d8      	uxtb	r0, r3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3355      	adds	r3, #85	; 0x55
 800373a:	4602      	mov	r2, r0
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e09f      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3361      	adds	r3, #97	; 0x61
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d109      	bne.n	8003768 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e08b      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3361      	adds	r3, #97	; 0x61
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d109      	bne.n	8003790 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3360      	adds	r3, #96	; 0x60
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e077      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3361      	adds	r3, #97	; 0x61
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d109      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3360      	adds	r3, #96	; 0x60
 80037b2:	2205      	movs	r2, #5
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e063      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3361      	adds	r3, #97	; 0x61
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b06      	cmp	r3, #6
 80037ca:	d009      	beq.n	80037e0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3361      	adds	r3, #97	; 0x61
 80037da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d14f      	bne.n	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	335c      	adds	r3, #92	; 0x5c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	202c      	movs	r0, #44	; 0x2c
 80037f8:	fb00 f303 	mul.w	r3, r0, r3
 80037fc:	440b      	add	r3, r1
 80037fe:	335c      	adds	r3, #92	; 0x5c
 8003800:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	335c      	adds	r3, #92	; 0x5c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d912      	bls.n	800383c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	335c      	adds	r3, #92	; 0x5c
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3360      	adds	r3, #96	; 0x60
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	e021      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3360      	adds	r3, #96	; 0x60
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003864:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800386c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	2302      	movs	r3, #2
 8003890:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	b2d9      	uxtb	r1, r3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	202c      	movs	r0, #44	; 0x2c
 800389c:	fb00 f303 	mul.w	r3, r0, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3360      	adds	r3, #96	; 0x60
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f005 fbf7 	bl	800909c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038ae:	bf00      	nop
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b08a      	sub	sp, #40	; 0x28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	0c5b      	lsrs	r3, r3, #17
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d004      	beq.n	80038fc <HCD_RXQLVL_IRQHandler+0x46>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	f000 80a9 	beq.w	8003a4c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038fa:	e0aa      	b.n	8003a52 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a6 	beq.w	8003a50 <HCD_RXQLVL_IRQHandler+0x19a>
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3344      	adds	r3, #68	; 0x44
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 809b 	beq.w	8003a50 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	3350      	adds	r3, #80	; 0x50
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	441a      	add	r2, r3
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	202c      	movs	r0, #44	; 0x2c
 8003934:	fb00 f303 	mul.w	r3, r0, r3
 8003938:	440b      	add	r3, r1
 800393a:	334c      	adds	r3, #76	; 0x4c
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d87a      	bhi.n	8003a38 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3344      	adds	r3, #68	; 0x44
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	b292      	uxth	r2, r2
 800395a:	4619      	mov	r1, r3
 800395c:	f002 fd7f 	bl	800645e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3344      	adds	r3, #68	; 0x44
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	441a      	add	r2, r3
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	202c      	movs	r0, #44	; 0x2c
 800397a:	fb00 f303 	mul.w	r3, r0, r3
 800397e:	440b      	add	r3, r1
 8003980:	3344      	adds	r3, #68	; 0x44
 8003982:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3350      	adds	r3, #80	; 0x50
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	441a      	add	r2, r3
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	202c      	movs	r0, #44	; 0x2c
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	440b      	add	r3, r1
 80039a4:	3350      	adds	r3, #80	; 0x50
 80039a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	0cdb      	lsrs	r3, r3, #19
 80039b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3340      	adds	r3, #64	; 0x40
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d13c      	bne.n	8003a50 <HCD_RXQLVL_IRQHandler+0x19a>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d039      	beq.n	8003a50 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3354      	adds	r3, #84	; 0x54
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	f083 0301 	eor.w	r3, r3, #1
 8003a22:	b2d8      	uxtb	r0, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	3354      	adds	r3, #84	; 0x54
 8003a32:	4602      	mov	r2, r0
 8003a34:	701a      	strb	r2, [r3, #0]
      break;
 8003a36:	e00b      	b.n	8003a50 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3360      	adds	r3, #96	; 0x60
 8003a46:	2204      	movs	r2, #4
 8003a48:	701a      	strb	r2, [r3, #0]
      break;
 8003a4a:	e001      	b.n	8003a50 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a4c:	bf00      	nop
 8003a4e:	e000      	b.n	8003a52 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a50:	bf00      	nop
  }
}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a86:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d10b      	bne.n	8003aaa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d102      	bne.n	8003aa2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f005 fae1 	bl	8009064 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d132      	bne.n	8003b1a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d126      	bne.n	8003b14 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d113      	bne.n	8003af6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ad4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ad8:	d106      	bne.n	8003ae8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 fdf7 	bl	80066d4 <USB_InitFSLSPClkSel>
 8003ae6:	e011      	b.n	8003b0c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2101      	movs	r1, #1
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fdf0 	bl	80066d4 <USB_InitFSLSPClkSel>
 8003af4:	e00a      	b.n	8003b0c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d106      	bne.n	8003b0c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b04:	461a      	mov	r2, r3
 8003b06:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b0a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f005 fad3 	bl	80090b8 <HAL_HCD_PortEnabled_Callback>
 8003b12:	e002      	b.n	8003b1a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f005 fadd 	bl	80090d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d103      	bne.n	8003b2c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f043 0320 	orr.w	r3, r3, #32
 8003b2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b32:	461a      	mov	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e12b      	b.n	8003daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd f9d2 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f002 f954 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a81      	ldr	r2, [pc, #516]	; (8003db4 <HAL_I2C_Init+0x274>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d807      	bhi.n	8003bc4 <HAL_I2C_Init+0x84>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a80      	ldr	r2, [pc, #512]	; (8003db8 <HAL_I2C_Init+0x278>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bf94      	ite	ls
 8003bbc:	2301      	movls	r3, #1
 8003bbe:	2300      	movhi	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e006      	b.n	8003bd2 <HAL_I2C_Init+0x92>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a7d      	ldr	r2, [pc, #500]	; (8003dbc <HAL_I2C_Init+0x27c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0e7      	b.n	8003daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a78      	ldr	r2, [pc, #480]	; (8003dc0 <HAL_I2C_Init+0x280>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0c9b      	lsrs	r3, r3, #18
 8003be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a6a      	ldr	r2, [pc, #424]	; (8003db4 <HAL_I2C_Init+0x274>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d802      	bhi.n	8003c14 <HAL_I2C_Init+0xd4>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3301      	adds	r3, #1
 8003c12:	e009      	b.n	8003c28 <HAL_I2C_Init+0xe8>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	4a69      	ldr	r2, [pc, #420]	; (8003dc4 <HAL_I2C_Init+0x284>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	099b      	lsrs	r3, r3, #6
 8003c26:	3301      	adds	r3, #1
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	495c      	ldr	r1, [pc, #368]	; (8003db4 <HAL_I2C_Init+0x274>)
 8003c44:	428b      	cmp	r3, r1
 8003c46:	d819      	bhi.n	8003c7c <HAL_I2C_Init+0x13c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e59      	subs	r1, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_I2C_Init+0x138>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1e59      	subs	r1, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	e051      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e04f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <HAL_I2C_Init+0x168>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	440b      	add	r3, r1
 8003c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e012      	b.n	8003cce <HAL_I2C_Init+0x18e>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	0099      	lsls	r1, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Init+0x196>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e022      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <HAL_I2C_Init+0x1bc>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e58      	subs	r0, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	440b      	add	r3, r1
 8003cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfa:	e00f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	6809      	ldr	r1, [r1, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6911      	ldr	r1, [r2, #16]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	000186a0 	.word	0x000186a0
 8003db8:	001e847f 	.word	0x001e847f
 8003dbc:	003d08ff 	.word	0x003d08ff
 8003dc0:	431bde83 	.word	0x431bde83
 8003dc4:	10624dd3 	.word	0x10624dd3

08003dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	817b      	strh	r3, [r7, #10]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ddc:	f7fd fae4 	bl	80013a8 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	f040 80e0 	bne.w	8003fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2319      	movs	r3, #25
 8003df6:	2201      	movs	r2, #1
 8003df8:	4970      	ldr	r1, [pc, #448]	; (8003fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fc58 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0d3      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_I2C_Master_Transmit+0x50>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0cc      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d007      	beq.n	8003e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2221      	movs	r2, #33	; 0x21
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2210      	movs	r2, #16
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	893a      	ldrh	r2, [r7, #8]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a50      	ldr	r2, [pc, #320]	; (8003fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e80:	8979      	ldrh	r1, [r7, #10]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fac2 	bl	8004410 <I2C_MasterRequestWrite>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e08d      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003eac:	e066      	b.n	8003f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	6a39      	ldr	r1, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fcd2 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d107      	bne.n	8003ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e06b      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	781a      	ldrb	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d11b      	bne.n	8003f50 <HAL_I2C_Master_Transmit+0x188>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d017      	beq.n	8003f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	781a      	ldrb	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	6a39      	ldr	r1, [r7, #32]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fcc2 	bl	80048de <I2C_WaitOnBTFFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d107      	bne.n	8003f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e01a      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d194      	bne.n	8003eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	00100002 	.word	0x00100002
 8003fc0:	ffff0000 	.word	0xffff0000

08003fc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	817b      	strh	r3, [r7, #10]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7fd f9e6 	bl	80013a8 <HAL_GetTick>
 8003fdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	f040 820b 	bne.w	8004402 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2319      	movs	r3, #25
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	497c      	ldr	r1, [pc, #496]	; (80041e8 <HAL_I2C_Master_Receive+0x224>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fb5a 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
 8004004:	e1fe      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_I2C_Master_Receive+0x50>
 8004010:	2302      	movs	r3, #2
 8004012:	e1f7      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d007      	beq.n	800403a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2222      	movs	r2, #34	; 0x22
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2210      	movs	r2, #16
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	893a      	ldrh	r2, [r7, #8]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a5c      	ldr	r2, [pc, #368]	; (80041ec <HAL_I2C_Master_Receive+0x228>)
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800407c:	8979      	ldrh	r1, [r7, #10]
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa46 	bl	8004514 <I2C_MasterRequestRead>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e1b8      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d113      	bne.n	80040c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	623b      	str	r3, [r7, #32]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	623b      	str	r3, [r7, #32]
 80040ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e18c      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d11b      	bne.n	8004102 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e16c      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	2b02      	cmp	r3, #2
 8004108:	d11b      	bne.n	8004142 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	e14c      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004168:	e138      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	2b03      	cmp	r3, #3
 8004170:	f200 80f1 	bhi.w	8004356 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	2b01      	cmp	r3, #1
 800417a:	d123      	bne.n	80041c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fbed 	bl	8004960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e139      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c2:	e10b      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d14e      	bne.n	800426a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	4906      	ldr	r1, [pc, #24]	; (80041f0 <HAL_I2C_Master_Receive+0x22c>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fa6a 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e10e      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
 80041e6:	bf00      	nop
 80041e8:	00100002 	.word	0x00100002
 80041ec:	ffff0000 	.word	0xffff0000
 80041f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004268:	e0b8      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2200      	movs	r2, #0
 8004272:	4966      	ldr	r1, [pc, #408]	; (800440c <HAL_I2C_Master_Receive+0x448>)
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fa1b 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0bf      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	494f      	ldr	r1, [pc, #316]	; (800440c <HAL_I2C_Master_Receive+0x448>)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f9ed 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e091      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004354:	e042      	b.n	80043dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fb00 	bl	8004960 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e04c      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d118      	bne.n	80043dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f aec2 	bne.w	800416a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	00010004 	.word	0x00010004

08004410 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	460b      	mov	r3, r1
 800441e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d006      	beq.n	800443a <I2C_MasterRequestWrite+0x2a>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d003      	beq.n	800443a <I2C_MasterRequestWrite+0x2a>
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004438:	d108      	bne.n	800444c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e00b      	b.n	8004464 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	2b12      	cmp	r3, #18
 8004452:	d107      	bne.n	8004464 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004462:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f91d 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448a:	d103      	bne.n	8004494 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e035      	b.n	8004504 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a0:	d108      	bne.n	80044b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044a2:	897b      	ldrh	r3, [r7, #10]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044b0:	611a      	str	r2, [r3, #16]
 80044b2:	e01b      	b.n	80044ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044b4:	897b      	ldrh	r3, [r7, #10]
 80044b6:	11db      	asrs	r3, r3, #7
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f003 0306 	and.w	r3, r3, #6
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f063 030f 	orn	r3, r3, #15
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	490e      	ldr	r1, [pc, #56]	; (800450c <I2C_MasterRequestWrite+0xfc>)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f943 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e010      	b.n	8004504 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044e2:	897b      	ldrh	r3, [r7, #10]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4907      	ldr	r1, [pc, #28]	; (8004510 <I2C_MasterRequestWrite+0x100>)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f933 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	00010008 	.word	0x00010008
 8004510:	00010002 	.word	0x00010002

08004514 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	460b      	mov	r3, r1
 8004522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004538:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d006      	beq.n	800454e <I2C_MasterRequestRead+0x3a>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d003      	beq.n	800454e <I2C_MasterRequestRead+0x3a>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800454c:	d108      	bne.n	8004560 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e00b      	b.n	8004578 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	2b11      	cmp	r3, #17
 8004566:	d107      	bne.n	8004578 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f893 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d103      	bne.n	80045a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e079      	b.n	80046a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b4:	d108      	bne.n	80045c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	611a      	str	r2, [r3, #16]
 80045c6:	e05f      	b.n	8004688 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c8:	897b      	ldrh	r3, [r7, #10]
 80045ca:	11db      	asrs	r3, r3, #7
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f003 0306 	and.w	r3, r3, #6
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f063 030f 	orn	r3, r3, #15
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4930      	ldr	r1, [pc, #192]	; (80046a8 <I2C_MasterRequestRead+0x194>)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f8b9 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e054      	b.n	80046a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4929      	ldr	r1, [pc, #164]	; (80046ac <I2C_MasterRequestRead+0x198>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8a9 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e044      	b.n	80046a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f831 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004662:	d103      	bne.n	800466c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e017      	b.n	80046a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	11db      	asrs	r3, r3, #7
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0306 	and.w	r3, r3, #6
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f063 030e 	orn	r3, r3, #14
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4907      	ldr	r1, [pc, #28]	; (80046ac <I2C_MasterRequestRead+0x198>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f865 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	00010008 	.word	0x00010008
 80046ac:	00010002 	.word	0x00010002

080046b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c0:	e025      	b.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d021      	beq.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fc fe6d 	bl	80013a8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e023      	b.n	8004756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10d      	bne.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	e00c      	b.n	800474e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	429a      	cmp	r2, r3
 8004752:	d0b6      	beq.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800476c:	e051      	b.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477c:	d123      	bne.n	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0204 	orr.w	r2, r3, #4
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e046      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d021      	beq.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fc fdeb 	bl	80013a8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d116      	bne.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e020      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10c      	bne.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	43da      	mvns	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e00b      	b.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	43da      	mvns	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4013      	ands	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d18d      	bne.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004868:	e02d      	b.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f8ce 	bl	8004a0c <I2C_IsAcknowledgeFailed>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e02d      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d021      	beq.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004882:	f7fc fd91 	bl	80013a8 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e007      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	2b80      	cmp	r3, #128	; 0x80
 80048d2:	d1ca      	bne.n	800486a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ea:	e02d      	b.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f88d 	bl	8004a0c <I2C_IsAcknowledgeFailed>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e02d      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d021      	beq.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fc fd50 	bl	80013a8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d116      	bne.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d1ca      	bne.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800496c:	e042      	b.n	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b10      	cmp	r3, #16
 800497a:	d119      	bne.n	80049b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0210 	mvn.w	r2, #16
 8004984:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e029      	b.n	8004a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b0:	f7fc fcfa 	bl	80013a8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e007      	b.n	8004a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d1b5      	bne.n	800496e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a22:	d11b      	bne.n	8004a5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f043 0204 	orr.w	r2, r3, #4
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e128      	b.n	8004cd0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a90      	ldr	r2, [pc, #576]	; (8004cd8 <HAL_I2S_Init+0x26c>)
 8004a96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fc fa81 	bl	8000fa0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ab4:	f023 030f 	bic.w	r3, r3, #15
 8004ab8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d060      	beq.n	8004b8c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e001      	b.n	8004adc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ad8:	2320      	movs	r3, #32
 8004ada:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d802      	bhi.n	8004aea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004aea:	2001      	movs	r0, #1
 8004aec:	f001 faa6 	bl	800603c <HAL_RCCEx_GetPeriphCLKFreq>
 8004af0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afa:	d125      	bne.n	8004b48 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d010      	beq.n	8004b26 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	3305      	adds	r3, #5
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	e01f      	b.n	8004b66 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	461a      	mov	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	3305      	adds	r3, #5
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	e00e      	b.n	8004b66 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	3305      	adds	r3, #5
 8004b64:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4a5c      	ldr	r2, [pc, #368]	; (8004cdc <HAL_I2S_Init+0x270>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	08db      	lsrs	r3, r3, #3
 8004b70:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e003      	b.n	8004b94 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d902      	bls.n	8004ba0 <HAL_I2S_Init+0x134>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2bff      	cmp	r3, #255	; 0xff
 8004b9e:	d907      	bls.n	8004bb0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba4:	f043 0210 	orr.w	r2, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e08f      	b.n	8004cd0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	ea42 0103 	orr.w	r1, r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bce:	f023 030f 	bic.w	r3, r3, #15
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6851      	ldr	r1, [r2, #4]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6892      	ldr	r2, [r2, #8]
 8004bda:	4311      	orrs	r1, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68d2      	ldr	r2, [r2, #12]
 8004be0:	4311      	orrs	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6992      	ldr	r2, [r2, #24]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d161      	bne.n	8004cc0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <HAL_I2S_Init+0x274>)
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a37      	ldr	r2, [pc, #220]	; (8004ce4 <HAL_I2S_Init+0x278>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d101      	bne.n	8004c10 <HAL_I2S_Init+0x1a4>
 8004c0c:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <HAL_I2S_Init+0x27c>)
 8004c0e:	e001      	b.n	8004c14 <HAL_I2S_Init+0x1a8>
 8004c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	4932      	ldr	r1, [pc, #200]	; (8004ce4 <HAL_I2S_Init+0x278>)
 8004c1c:	428a      	cmp	r2, r1
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2S_Init+0x1b8>
 8004c20:	4a31      	ldr	r2, [pc, #196]	; (8004ce8 <HAL_I2S_Init+0x27c>)
 8004c22:	e001      	b.n	8004c28 <HAL_I2S_Init+0x1bc>
 8004c24:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c2c:	f023 030f 	bic.w	r3, r3, #15
 8004c30:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <HAL_I2S_Init+0x278>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d101      	bne.n	8004c40 <HAL_I2S_Init+0x1d4>
 8004c3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <HAL_I2S_Init+0x27c>)
 8004c3e:	e001      	b.n	8004c44 <HAL_I2S_Init+0x1d8>
 8004c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c44:	2202      	movs	r2, #2
 8004c46:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <HAL_I2S_Init+0x278>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <HAL_I2S_Init+0x1ea>
 8004c52:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_I2S_Init+0x27c>)
 8004c54:	e001      	b.n	8004c5a <HAL_I2S_Init+0x1ee>
 8004c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c66:	d003      	beq.n	8004c70 <HAL_I2S_Init+0x204>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e001      	b.n	8004c7c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c86:	4313      	orrs	r3, r2
 8004c88:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	897b      	ldrh	r3, [r7, #10]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ca8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_I2S_Init+0x278>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2S_Init+0x24c>
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <HAL_I2S_Init+0x27c>)
 8004cb6:	e001      	b.n	8004cbc <HAL_I2S_Init+0x250>
 8004cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cbc:	897a      	ldrh	r2, [r7, #10]
 8004cbe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3720      	adds	r7, #32
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	08004ff1 	.word	0x08004ff1
 8004cdc:	cccccccd 	.word	0xcccccccd
 8004ce0:	08005105 	.word	0x08005105
 8004ce4:	40003800 	.word	0x40003800
 8004ce8:	40003400 	.word	0x40003400

08004cec <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_I2S_Transmit_DMA+0x1a>
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e08e      	b.n	8004e28 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_I2S_Transmit_DMA+0x2e>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e086      	b.n	8004e28 <HAL_I2S_Transmit_DMA+0x13c>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d005      	beq.n	8004d3a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
 8004d38:	e076      	b.n	8004e28 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d002      	beq.n	8004d66 <HAL_I2S_Transmit_DMA+0x7a>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d10a      	bne.n	8004d7c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d7a:	e005      	b.n	8004d88 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <HAL_I2S_Transmit_DMA+0x144>)
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <HAL_I2S_Transmit_DMA+0x148>)
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <HAL_I2S_Transmit_DMA+0x14c>)
 8004d9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004da8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004db0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004db8:	f7fc fce6 	bl	8001788 <HAL_DMA_Start_IT>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	f043 0208 	orr.w	r2, r3, #8
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e022      	b.n	8004e28 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0202 	orr.w	r2, r2, #2
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	08004ecf 	.word	0x08004ecf
 8004e34:	08004e8d 	.word	0x08004e8d
 8004e38:	08004eeb 	.word	0x08004eeb

08004e3c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10e      	bne.n	8004ec0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0202 	bic.w	r2, r2, #2
 8004eb0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff ffc5 	bl	8004e50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ffad 	bl	8004e3c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0203 	bic.w	r2, r2, #3
 8004f06:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	f043 0208 	orr.w	r2, r3, #8
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff ffa5 	bl	8004e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10e      	bne.n	8004f8a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff63 	bl	8004e50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	b292      	uxth	r2, r2
 8004fa6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	1c9a      	adds	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10e      	bne.n	8004fe8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff ff3e 	bl	8004e64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b04      	cmp	r3, #4
 800500a:	d13a      	bne.n	8005082 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d109      	bne.n	800502a <I2S_IRQHandler+0x3a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d102      	bne.n	800502a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ffb4 	bl	8004f92 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d126      	bne.n	8005082 <I2S_IRQHandler+0x92>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b20      	cmp	r3, #32
 8005040:	d11f      	bne.n	8005082 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005050:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005074:	f043 0202 	orr.w	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff fefb 	bl	8004e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d136      	bne.n	80050fc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b02      	cmp	r3, #2
 8005096:	d109      	bne.n	80050ac <I2S_IRQHandler+0xbc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d102      	bne.n	80050ac <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff45 	bl	8004f36 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d122      	bne.n	80050fc <I2S_IRQHandler+0x10c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d11b      	bne.n	80050fc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff febe 	bl	8004e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050fc:	bf00      	nop
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4aa2      	ldr	r2, [pc, #648]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800511e:	4ba2      	ldr	r3, [pc, #648]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005120:	e001      	b.n	8005126 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a9b      	ldr	r2, [pc, #620]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800513c:	4b9a      	ldr	r3, [pc, #616]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800513e:	e001      	b.n	8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005150:	d004      	beq.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 8099 	bne.w	800528e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d107      	bne.n	8005176 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f925 	bl	80053c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d107      	bne.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9c8 	bl	8005520 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d13a      	bne.n	8005210 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d035      	beq.n	8005210 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a7e      	ldr	r2, [pc, #504]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d101      	bne.n	80051b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80051ae:	4b7e      	ldr	r3, [pc, #504]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051b0:	e001      	b.n	80051b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80051b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4979      	ldr	r1, [pc, #484]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051be:	428b      	cmp	r3, r1
 80051c0:	d101      	bne.n	80051c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80051c2:	4b79      	ldr	r3, [pc, #484]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051c4:	e001      	b.n	80051ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80051c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f043 0202 	orr.w	r2, r3, #2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fe34 	bl	8004e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b08      	cmp	r3, #8
 8005218:	f040 80be 	bne.w	8005398 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80b8 	beq.w	8005398 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005236:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a59      	ldr	r2, [pc, #356]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005242:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005244:	e001      	b.n	800524a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4954      	ldr	r1, [pc, #336]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005252:	428b      	cmp	r3, r1
 8005254:	d101      	bne.n	800525a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005256:	4b54      	ldr	r3, [pc, #336]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005258:	e001      	b.n	800525e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800525a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800525e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005262:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005264:	2300      	movs	r3, #0
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fdf6 	bl	8004e78 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800528c:	e084      	b.n	8005398 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b02      	cmp	r3, #2
 8005296:	d107      	bne.n	80052a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8be 	bl	8005424 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d107      	bne.n	80052c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f8fd 	bl	80054bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d12f      	bne.n	800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02a      	beq.n	800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2e      	ldr	r2, [pc, #184]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d101      	bne.n	80052f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80052f0:	4b2d      	ldr	r3, [pc, #180]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052f2:	e001      	b.n	80052f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80052f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4929      	ldr	r1, [pc, #164]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005300:	428b      	cmp	r3, r1
 8005302:	d101      	bne.n	8005308 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005304:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005306:	e001      	b.n	800530c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800530c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005310:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	f043 0202 	orr.w	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fda6 	bl	8004e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b08      	cmp	r3, #8
 8005334:	d131      	bne.n	800539a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d02c      	beq.n	800539a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d101      	bne.n	800534e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800534a:	4b17      	ldr	r3, [pc, #92]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800534c:	e001      	b.n	8005352 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800534e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4912      	ldr	r1, [pc, #72]	; (80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800535a:	428b      	cmp	r3, r1
 800535c:	d101      	bne.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005360:	e001      	b.n	8005366 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005366:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800536a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800537a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	f043 0204 	orr.w	r2, r3, #4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fd71 	bl	8004e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005396:	e000      	b.n	800539a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005398:	bf00      	nop
}
 800539a:	bf00      	nop
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40003800 	.word	0x40003800
 80053a8:	40003400 	.word	0x40003400

080053ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	1c99      	adds	r1, r3, #2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6251      	str	r1, [r2, #36]	; 0x24
 80053d2:	881a      	ldrh	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d113      	bne.n	800541a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005400:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ffc9 	bl	80053ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	1c99      	adds	r1, r3, #2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6251      	str	r1, [r2, #36]	; 0x24
 8005436:	8819      	ldrh	r1, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <I2SEx_TxISR_I2SExt+0x90>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d101      	bne.n	8005446 <I2SEx_TxISR_I2SExt+0x22>
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005444:	e001      	b.n	800544a <I2SEx_TxISR_I2SExt+0x26>
 8005446:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800544a:	460a      	mov	r2, r1
 800544c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d121      	bne.n	80054aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <I2SEx_TxISR_I2SExt+0x90>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d101      	bne.n	8005474 <I2SEx_TxISR_I2SExt+0x50>
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005472:	e001      	b.n	8005478 <I2SEx_TxISR_I2SExt+0x54>
 8005474:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	490d      	ldr	r1, [pc, #52]	; (80054b4 <I2SEx_TxISR_I2SExt+0x90>)
 8005480:	428b      	cmp	r3, r1
 8005482:	d101      	bne.n	8005488 <I2SEx_TxISR_I2SExt+0x64>
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <I2SEx_TxISR_I2SExt+0x94>)
 8005486:	e001      	b.n	800548c <I2SEx_TxISR_I2SExt+0x68>
 8005488:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800548c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005490:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff ff81 	bl	80053ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40003800 	.word	0x40003800
 80054b8:	40003400 	.word	0x40003400

080054bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68d8      	ldr	r0, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	1c99      	adds	r1, r3, #2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80054d4:	b282      	uxth	r2, r0
 80054d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d113      	bne.n	8005518 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ff4a 	bl	80053ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <I2SEx_RxISR_I2SExt+0x90>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d101      	bne.n	8005536 <I2SEx_RxISR_I2SExt+0x16>
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <I2SEx_RxISR_I2SExt+0x94>)
 8005534:	e001      	b.n	800553a <I2SEx_RxISR_I2SExt+0x1a>
 8005536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800553a:	68d8      	ldr	r0, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	1c99      	adds	r1, r3, #2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005546:	b282      	uxth	r2, r0
 8005548:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d121      	bne.n	80055a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a12      	ldr	r2, [pc, #72]	; (80055b0 <I2SEx_RxISR_I2SExt+0x90>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d101      	bne.n	8005570 <I2SEx_RxISR_I2SExt+0x50>
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <I2SEx_RxISR_I2SExt+0x94>)
 800556e:	e001      	b.n	8005574 <I2SEx_RxISR_I2SExt+0x54>
 8005570:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	490d      	ldr	r1, [pc, #52]	; (80055b0 <I2SEx_RxISR_I2SExt+0x90>)
 800557c:	428b      	cmp	r3, r1
 800557e:	d101      	bne.n	8005584 <I2SEx_RxISR_I2SExt+0x64>
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <I2SEx_RxISR_I2SExt+0x94>)
 8005582:	e001      	b.n	8005588 <I2SEx_RxISR_I2SExt+0x68>
 8005584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005588:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800558c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff03 	bl	80053ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40003800 	.word	0x40003800
 80055b4:	40003400 	.word	0x40003400

080055b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e264      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d075      	beq.n	80056c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055d6:	4ba3      	ldr	r3, [pc, #652]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d00c      	beq.n	80055fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e2:	4ba0      	ldr	r3, [pc, #640]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d112      	bne.n	8005614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ee:	4b9d      	ldr	r3, [pc, #628]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fa:	d10b      	bne.n	8005614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	4b99      	ldr	r3, [pc, #612]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d05b      	beq.n	80056c0 <HAL_RCC_OscConfig+0x108>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d157      	bne.n	80056c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e23f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561c:	d106      	bne.n	800562c <HAL_RCC_OscConfig+0x74>
 800561e:	4b91      	ldr	r3, [pc, #580]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a90      	ldr	r2, [pc, #576]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e01d      	b.n	8005668 <HAL_RCC_OscConfig+0xb0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0x98>
 8005636:	4b8b      	ldr	r3, [pc, #556]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a8a      	ldr	r2, [pc, #552]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	4b88      	ldr	r3, [pc, #544]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a87      	ldr	r2, [pc, #540]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e00b      	b.n	8005668 <HAL_RCC_OscConfig+0xb0>
 8005650:	4b84      	ldr	r3, [pc, #528]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a83      	ldr	r2, [pc, #524]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4b81      	ldr	r3, [pc, #516]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a80      	ldr	r2, [pc, #512]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d013      	beq.n	8005698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005670:	f7fb fe9a 	bl	80013a8 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005678:	f7fb fe96 	bl	80013a8 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e204      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4b76      	ldr	r3, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0xc0>
 8005696:	e014      	b.n	80056c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fb fe86 	bl	80013a8 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a0:	f7fb fe82 	bl	80013a8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e1f0      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b2:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0xe8>
 80056be:	e000      	b.n	80056c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d063      	beq.n	8005796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056ce:	4b65      	ldr	r3, [pc, #404]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056da:	4b62      	ldr	r3, [pc, #392]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d11c      	bne.n	8005720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056e6:	4b5f      	ldr	r3, [pc, #380]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d116      	bne.n	8005720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f2:	4b5c      	ldr	r3, [pc, #368]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <HAL_RCC_OscConfig+0x152>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d001      	beq.n	800570a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e1c4      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570a:	4b56      	ldr	r3, [pc, #344]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4952      	ldr	r1, [pc, #328]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571e:	e03a      	b.n	8005796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d020      	beq.n	800576a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005728:	4b4f      	ldr	r3, [pc, #316]	; (8005868 <HAL_RCC_OscConfig+0x2b0>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fb fe3b 	bl	80013a8 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005736:	f7fb fe37 	bl	80013a8 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e1a5      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005748:	4b46      	ldr	r3, [pc, #280]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005754:	4b43      	ldr	r3, [pc, #268]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4940      	ldr	r1, [pc, #256]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]
 8005768:	e015      	b.n	8005796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576a:	4b3f      	ldr	r3, [pc, #252]	; (8005868 <HAL_RCC_OscConfig+0x2b0>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fb fe1a 	bl	80013a8 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005778:	f7fb fe16 	bl	80013a8 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e184      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578a:	4b36      	ldr	r3, [pc, #216]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d030      	beq.n	8005804 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057aa:	4b30      	ldr	r3, [pc, #192]	; (800586c <HAL_RCC_OscConfig+0x2b4>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fb fdfa 	bl	80013a8 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b8:	f7fb fdf6 	bl	80013a8 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e164      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x200>
 80057d6:	e015      	b.n	8005804 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d8:	4b24      	ldr	r3, [pc, #144]	; (800586c <HAL_RCC_OscConfig+0x2b4>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057de:	f7fb fde3 	bl	80013a8 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fb fddf 	bl	80013a8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e14d      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f8:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 80057fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f0      	bne.n	80057e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80a0 	beq.w	8005952 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005812:	2300      	movs	r3, #0
 8005814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	4a0e      	ldr	r2, [pc, #56]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005830:	6413      	str	r3, [r2, #64]	; 0x40
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <HAL_RCC_OscConfig+0x2ac>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583e:	2301      	movs	r3, #1
 8005840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005842:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <HAL_RCC_OscConfig+0x2b8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d121      	bne.n	8005892 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800584e:	4b08      	ldr	r3, [pc, #32]	; (8005870 <HAL_RCC_OscConfig+0x2b8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a07      	ldr	r2, [pc, #28]	; (8005870 <HAL_RCC_OscConfig+0x2b8>)
 8005854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800585a:	f7fb fda5 	bl	80013a8 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005860:	e011      	b.n	8005886 <HAL_RCC_OscConfig+0x2ce>
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	42470000 	.word	0x42470000
 800586c:	42470e80 	.word	0x42470e80
 8005870:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005874:	f7fb fd98 	bl	80013a8 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e106      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005886:	4b85      	ldr	r3, [pc, #532]	; (8005a9c <HAL_RCC_OscConfig+0x4e4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d106      	bne.n	80058a8 <HAL_RCC_OscConfig+0x2f0>
 800589a:	4b81      	ldr	r3, [pc, #516]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	4a80      	ldr	r2, [pc, #512]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6713      	str	r3, [r2, #112]	; 0x70
 80058a6:	e01c      	b.n	80058e2 <HAL_RCC_OscConfig+0x32a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d10c      	bne.n	80058ca <HAL_RCC_OscConfig+0x312>
 80058b0:	4b7b      	ldr	r3, [pc, #492]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	4a7a      	ldr	r2, [pc, #488]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	6713      	str	r3, [r2, #112]	; 0x70
 80058bc:	4b78      	ldr	r3, [pc, #480]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	4a77      	ldr	r2, [pc, #476]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6713      	str	r3, [r2, #112]	; 0x70
 80058c8:	e00b      	b.n	80058e2 <HAL_RCC_OscConfig+0x32a>
 80058ca:	4b75      	ldr	r3, [pc, #468]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	4a74      	ldr	r2, [pc, #464]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	6713      	str	r3, [r2, #112]	; 0x70
 80058d6:	4b72      	ldr	r3, [pc, #456]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	4a71      	ldr	r2, [pc, #452]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80058dc:	f023 0304 	bic.w	r3, r3, #4
 80058e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d015      	beq.n	8005916 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ea:	f7fb fd5d 	bl	80013a8 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f0:	e00a      	b.n	8005908 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f2:	f7fb fd59 	bl	80013a8 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0c5      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005908:	4b65      	ldr	r3, [pc, #404]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0ee      	beq.n	80058f2 <HAL_RCC_OscConfig+0x33a>
 8005914:	e014      	b.n	8005940 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005916:	f7fb fd47 	bl	80013a8 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591c:	e00a      	b.n	8005934 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591e:	f7fb fd43 	bl	80013a8 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	; 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e0af      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005934:	4b5a      	ldr	r3, [pc, #360]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1ee      	bne.n	800591e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d105      	bne.n	8005952 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005946:	4b56      	ldr	r3, [pc, #344]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	4a55      	ldr	r2, [pc, #340]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 800594c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005950:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 809b 	beq.w	8005a92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800595c:	4b50      	ldr	r3, [pc, #320]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b08      	cmp	r3, #8
 8005966:	d05c      	beq.n	8005a22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d141      	bne.n	80059f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005970:	4b4c      	ldr	r3, [pc, #304]	; (8005aa4 <HAL_RCC_OscConfig+0x4ec>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fb fd17 	bl	80013a8 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597e:	f7fb fd13 	bl	80013a8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e081      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005990:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f0      	bne.n	800597e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	019b      	lsls	r3, r3, #6
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	3b01      	subs	r3, #1
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	4937      	ldr	r1, [pc, #220]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c6:	4b37      	ldr	r3, [pc, #220]	; (8005aa4 <HAL_RCC_OscConfig+0x4ec>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fb fcec 	bl	80013a8 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fb fce8 	bl	80013a8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e056      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e6:	4b2e      	ldr	r3, [pc, #184]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x41c>
 80059f2:	e04e      	b.n	8005a92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f4:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <HAL_RCC_OscConfig+0x4ec>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fa:	f7fb fcd5 	bl	80013a8 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fb fcd1 	bl	80013a8 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e03f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a14:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f0      	bne.n	8005a02 <HAL_RCC_OscConfig+0x44a>
 8005a20:	e037      	b.n	8005a92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e032      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <HAL_RCC_OscConfig+0x4e8>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d028      	beq.n	8005a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d121      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d11a      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a5e:	4013      	ands	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d111      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	3b01      	subs	r3, #1
 8005a78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d107      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d001      	beq.n	8005a92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40007000 	.word	0x40007000
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	42470060 	.word	0x42470060

08005aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0cc      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005abc:	4b68      	ldr	r3, [pc, #416]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d90c      	bls.n	8005ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4b65      	ldr	r3, [pc, #404]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad2:	4b63      	ldr	r3, [pc, #396]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0b8      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d020      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005afc:	4b59      	ldr	r3, [pc, #356]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4a58      	ldr	r2, [pc, #352]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b14:	4b53      	ldr	r3, [pc, #332]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	4a52      	ldr	r2, [pc, #328]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b20:	4b50      	ldr	r3, [pc, #320]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	494d      	ldr	r1, [pc, #308]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d044      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b46:	4b47      	ldr	r3, [pc, #284]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d119      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e07f      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d107      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b66:	4b3f      	ldr	r3, [pc, #252]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e06f      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b76:	4b3b      	ldr	r3, [pc, #236]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e067      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f023 0203 	bic.w	r2, r3, #3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4934      	ldr	r1, [pc, #208]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b98:	f7fb fc06 	bl	80013a8 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba0:	f7fb fc02 	bl	80013a8 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e04f      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb6:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 020c 	and.w	r2, r3, #12
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d1eb      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d20c      	bcs.n	8005bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd6:	4b22      	ldr	r3, [pc, #136]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e032      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4916      	ldr	r1, [pc, #88]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	490e      	ldr	r1, [pc, #56]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c2e:	f000 f821 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 8005c32:	4602      	mov	r2, r0
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	490a      	ldr	r1, [pc, #40]	; (8005c68 <HAL_RCC_ClockConfig+0x1c0>)
 8005c40:	5ccb      	ldrb	r3, [r1, r3]
 8005c42:	fa22 f303 	lsr.w	r3, r2, r3
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fb fb66 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023c00 	.word	0x40023c00
 8005c64:	40023800 	.word	0x40023800
 8005c68:	0800a1fc 	.word	0x0800a1fc
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	20000004 	.word	0x20000004

08005c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	607b      	str	r3, [r7, #4]
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	2300      	movs	r3, #0
 8005c86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c8c:	4b67      	ldr	r3, [pc, #412]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d00d      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	f200 80bd 	bhi.w	8005e18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d003      	beq.n	8005cae <HAL_RCC_GetSysClockFreq+0x3a>
 8005ca6:	e0b7      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ca8:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005caa:	60bb      	str	r3, [r7, #8]
       break;
 8005cac:	e0b7      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cae:	4b61      	ldr	r3, [pc, #388]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005cb0:	60bb      	str	r3, [r7, #8]
      break;
 8005cb2:	e0b4      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cb4:	4b5d      	ldr	r3, [pc, #372]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cbe:	4b5b      	ldr	r3, [pc, #364]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d04d      	beq.n	8005d66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cca:	4b58      	ldr	r3, [pc, #352]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	099b      	lsrs	r3, r3, #6
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cda:	f04f 0100 	mov.w	r1, #0
 8005cde:	ea02 0800 	and.w	r8, r2, r0
 8005ce2:	ea03 0901 	and.w	r9, r3, r1
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	014b      	lsls	r3, r1, #5
 8005cf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cf8:	0142      	lsls	r2, r0, #5
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	ebb0 0008 	subs.w	r0, r0, r8
 8005d02:	eb61 0109 	sbc.w	r1, r1, r9
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	018b      	lsls	r3, r1, #6
 8005d10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d14:	0182      	lsls	r2, r0, #6
 8005d16:	1a12      	subs	r2, r2, r0
 8005d18:	eb63 0301 	sbc.w	r3, r3, r1
 8005d1c:	f04f 0000 	mov.w	r0, #0
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	00d9      	lsls	r1, r3, #3
 8005d26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d2a:	00d0      	lsls	r0, r2, #3
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	eb12 0208 	adds.w	r2, r2, r8
 8005d34:	eb43 0309 	adc.w	r3, r3, r9
 8005d38:	f04f 0000 	mov.w	r0, #0
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	0259      	lsls	r1, r3, #9
 8005d42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d46:	0250      	lsls	r0, r2, #9
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	f7fa fa36 	bl	80001c8 <__aeabi_uldivmod>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4613      	mov	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e04a      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d66:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	099b      	lsrs	r3, r3, #6
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	ea02 0400 	and.w	r4, r2, r0
 8005d7e:	ea03 0501 	and.w	r5, r3, r1
 8005d82:	4620      	mov	r0, r4
 8005d84:	4629      	mov	r1, r5
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	014b      	lsls	r3, r1, #5
 8005d90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d94:	0142      	lsls	r2, r0, #5
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	1b00      	subs	r0, r0, r4
 8005d9c:	eb61 0105 	sbc.w	r1, r1, r5
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	018b      	lsls	r3, r1, #6
 8005daa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005dae:	0182      	lsls	r2, r0, #6
 8005db0:	1a12      	subs	r2, r2, r0
 8005db2:	eb63 0301 	sbc.w	r3, r3, r1
 8005db6:	f04f 0000 	mov.w	r0, #0
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	00d9      	lsls	r1, r3, #3
 8005dc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dc4:	00d0      	lsls	r0, r2, #3
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	1912      	adds	r2, r2, r4
 8005dcc:	eb45 0303 	adc.w	r3, r5, r3
 8005dd0:	f04f 0000 	mov.w	r0, #0
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	0299      	lsls	r1, r3, #10
 8005dda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005dde:	0290      	lsls	r0, r2, #10
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4610      	mov	r0, r2
 8005de6:	4619      	mov	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	f7fa f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4613      	mov	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	3301      	adds	r3, #1
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	60bb      	str	r3, [r7, #8]
      break;
 8005e16:	e002      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e18:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e1a:	60bb      	str	r3, [r7, #8]
      break;
 8005e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	007a1200 	.word	0x007a1200

08005e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000000 	.word	0x20000000

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e54:	f7ff fff0 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0a9b      	lsrs	r3, r3, #10
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4903      	ldr	r1, [pc, #12]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e66:	5ccb      	ldrb	r3, [r1, r3]
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40023800 	.word	0x40023800
 8005e74:	0800a20c 	.word	0x0800a20c

08005e78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d035      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ea0:	4b62      	ldr	r3, [pc, #392]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ea6:	f7fb fa7f 	bl	80013a8 <HAL_GetTick>
 8005eaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eae:	f7fb fa7b 	bl	80013a8 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e0b0      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ec0:	4b5b      	ldr	r3, [pc, #364]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f0      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	019a      	lsls	r2, r3, #6
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	071b      	lsls	r3, r3, #28
 8005ed8:	4955      	ldr	r1, [pc, #340]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ee0:	4b52      	ldr	r3, [pc, #328]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ee6:	f7fb fa5f 	bl	80013a8 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eec:	e008      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eee:	f7fb fa5b 	bl	80013a8 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e090      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f00:	4b4b      	ldr	r3, [pc, #300]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8083 	beq.w	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	4b44      	ldr	r3, [pc, #272]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4a43      	ldr	r2, [pc, #268]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2a:	4b41      	ldr	r3, [pc, #260]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f36:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3e      	ldr	r2, [pc, #248]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f42:	f7fb fa31 	bl	80013a8 <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f4a:	f7fb fa2d 	bl	80013a8 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e062      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f68:	4b31      	ldr	r3, [pc, #196]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f70:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02f      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d028      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f86:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f90:	4b29      	ldr	r3, [pc, #164]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f96:	4b28      	ldr	r3, [pc, #160]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f9c:	4a24      	ldr	r2, [pc, #144]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fa2:	4b23      	ldr	r3, [pc, #140]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d114      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005fae:	f7fb f9fb 	bl	80013a8 <HAL_GetTick>
 8005fb2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb6:	f7fb f9f7 	bl	80013a8 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e02a      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fcc:	4b18      	ldr	r3, [pc, #96]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0ee      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe4:	d10d      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffa:	490d      	ldr	r1, [pc, #52]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]
 8006000:	e005      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006008:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800600c:	6093      	str	r3, [r2, #8]
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006010:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800601a:	4905      	ldr	r1, [pc, #20]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800601c:	4313      	orrs	r3, r2
 800601e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	42470068 	.word	0x42470068
 8006030:	40023800 	.word	0x40023800
 8006034:	40007000 	.word	0x40007000
 8006038:	42470e40 	.word	0x42470e40

0800603c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d13e      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800605a:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d12f      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006070:	4b1e      	ldr	r3, [pc, #120]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006072:	617b      	str	r3, [r7, #20]
          break;
 8006074:	e02f      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006076:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006082:	d108      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006084:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	e007      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006096:	4b14      	ldr	r3, [pc, #80]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80060a6:	4b10      	ldr	r3, [pc, #64]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80060a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80060bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c0:	0f1b      	lsrs	r3, r3, #28
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
          break;
 80060ce:	e002      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
          break;
 80060d4:	bf00      	nop
        }
      }
      break;
 80060d6:	bf00      	nop
    }
  }
  return frequency;
 80060d8:	697b      	ldr	r3, [r7, #20]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40023800 	.word	0x40023800
 80060ec:	00bb8000 	.word	0x00bb8000
 80060f0:	007a1200 	.word	0x007a1200
 80060f4:	00f42400 	.word	0x00f42400

080060f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e07b      	b.n	8006202 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800611a:	d009      	beq.n	8006130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	61da      	str	r2, [r3, #28]
 8006122:	e005      	b.n	8006130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fa ffce 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	ea42 0103 	orr.w	r1, r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	0c1b      	lsrs	r3, r3, #16
 80061ce:	f003 0104 	and.w	r1, r3, #4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0210 	and.w	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800620a:	b084      	sub	sp, #16
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	f107 001c 	add.w	r0, r7, #28
 8006218:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	2b01      	cmp	r3, #1
 8006220:	d122      	bne.n	8006268 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800624a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624c:	2b01      	cmp	r3, #1
 800624e:	d105      	bne.n	800625c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f949 	bl	80064f4 <USB_CoreReset>
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
 8006266:	e01a      	b.n	800629e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f93d 	bl	80064f4 <USB_CoreReset>
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800627e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
 8006290:	e005      	b.n	800629e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10b      	bne.n	80062bc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f043 0206 	orr.w	r2, r3, #6
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c8:	b004      	add	sp, #16
 80062ca:	4770      	bx	lr

080062cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f043 0201 	orr.w	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f023 0201 	bic.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d106      	bne.n	800633c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e00b      	b.n	8006354 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	e001      	b.n	8006354 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e003      	b.n	800635c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006354:	2032      	movs	r0, #50	; 0x32
 8006356:	f7fb f833 	bl	80013c0 <HAL_Delay>

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	019b      	lsls	r3, r3, #6
 8006376:	f043 0220 	orr.w	r2, r3, #32
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a09      	ldr	r2, [pc, #36]	; (80063ac <USB_FlushTxFifo+0x48>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e006      	b.n	800639e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b20      	cmp	r3, #32
 800639a:	d0f0      	beq.n	800637e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	00030d40 	.word	0x00030d40

080063b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2210      	movs	r2, #16
 80063c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <USB_FlushRxFifo+0x40>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e006      	b.n	80063e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d0f0      	beq.n	80063c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	00030d40 	.word	0x00030d40

080063f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	; 0x24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4611      	mov	r1, r2
 8006400:	461a      	mov	r2, r3
 8006402:	460b      	mov	r3, r1
 8006404:	71fb      	strb	r3, [r7, #7]
 8006406:	4613      	mov	r3, r2
 8006408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11a      	bne.n	8006450 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800641a:	88bb      	ldrh	r3, [r7, #4]
 800641c:	3303      	adds	r3, #3
 800641e:	089b      	lsrs	r3, r3, #2
 8006420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006422:	2300      	movs	r3, #0
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	e00f      	b.n	8006448 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	031a      	lsls	r2, r3, #12
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4413      	add	r3, r2
 8006430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006434:	461a      	mov	r2, r3
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3304      	adds	r3, #4
 8006440:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	3301      	adds	r3, #1
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	429a      	cmp	r2, r3
 800644e:	d3eb      	bcc.n	8006428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3724      	adds	r7, #36	; 0x24
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800645e:	b480      	push	{r7}
 8006460:	b089      	sub	sp, #36	; 0x24
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	4613      	mov	r3, r2
 800646a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	3303      	adds	r3, #3
 8006478:	089b      	lsrs	r3, r3, #2
 800647a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800647c:	2300      	movs	r3, #0
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e00b      	b.n	800649a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	601a      	str	r2, [r3, #0]
    pDest++;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	3304      	adds	r3, #4
 8006492:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	3301      	adds	r3, #1
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3ef      	bcc.n	8006482 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064a2:	69fb      	ldr	r3, [r7, #28]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3724      	adds	r7, #36	; 0x24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064c8:	68fb      	ldr	r3, [r7, #12]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f003 0301 	and.w	r3, r3, #1
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <USB_CoreReset+0x64>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e01b      	b.n	800654a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	daf2      	bge.n	8006500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <USB_CoreReset+0x64>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e006      	b.n	800654a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d0f0      	beq.n	800652a <USB_CoreReset+0x36>

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	00030d40 	.word	0x00030d40

0800655c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800655c:	b084      	sub	sp, #16
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	f107 001c 	add.w	r0, r7, #28
 800656a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006578:	461a      	mov	r2, r3
 800657a:	2300      	movs	r3, #0
 800657c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d018      	beq.n	80065e0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d10a      	bne.n	80065ca <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065c2:	f043 0304 	orr.w	r3, r3, #4
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e014      	b.n	80065f4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e009      	b.n	80065f4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ee:	f023 0304 	bic.w	r3, r3, #4
 80065f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80065f4:	2110      	movs	r1, #16
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff feb4 	bl	8006364 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fed7 	bl	80063b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e015      	b.n	8006634 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	461a      	mov	r2, r3
 8006616:	f04f 33ff 	mov.w	r3, #4294967295
 800661a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	2300      	movs	r3, #0
 800662c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	429a      	cmp	r2, r3
 800663a:	d3e5      	bcc.n	8006608 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800663c:	2101      	movs	r1, #1
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8ac 	bl	800679c <USB_DriveVbus>

  HAL_Delay(200U);
 8006644:	20c8      	movs	r0, #200	; 0xc8
 8006646:	f7fa febb 	bl	80013c0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <USB_HostInit+0x164>)
 8006670:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <USB_HostInit+0x168>)
 8006676:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800667a:	e009      	b.n	8006690 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <USB_HostInit+0x16c>)
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <USB_HostInit+0x170>)
 800668c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f043 0210 	orr.w	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <USB_HostInit+0x174>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ba:	b004      	add	sp, #16
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	01000200 	.word	0x01000200
 80066c4:	00e00300 	.word	0x00e00300
 80066c8:	00600080 	.word	0x00600080
 80066cc:	004000e0 	.word	0x004000e0
 80066d0:	a3200008 	.word	0xa3200008

080066d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800670c:	4313      	orrs	r3, r2
 800670e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d107      	bne.n	8006726 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671c:	461a      	mov	r2, r3
 800671e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006722:	6053      	str	r3, [r2, #4]
 8006724:	e009      	b.n	800673a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d106      	bne.n	800673a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	461a      	mov	r2, r3
 8006734:	f241 7370 	movw	r3, #6000	; 0x1770
 8006738:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006768:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006776:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006778:	2064      	movs	r0, #100	; 0x64
 800677a:	f7fa fe21 	bl	80013c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800678c:	200a      	movs	r0, #10
 800678e:	f7fa fe17 	bl	80013c0 <HAL_Delay>

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <USB_DriveVbus+0x44>
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d106      	bne.n	80067e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ea:	d109      	bne.n	8006800 <USB_DriveVbus+0x64>
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	0c5b      	lsrs	r3, r3, #17
 800682c:	f003 0303 	and.w	r3, r3, #3
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	b29b      	uxth	r3, r3
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	4608      	mov	r0, r1
 800686a:	4611      	mov	r1, r2
 800686c:	461a      	mov	r2, r3
 800686e:	4603      	mov	r3, r0
 8006870:	70fb      	strb	r3, [r7, #3]
 8006872:	460b      	mov	r3, r1
 8006874:	70bb      	strb	r3, [r7, #2]
 8006876:	4613      	mov	r3, r2
 8006878:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	461a      	mov	r2, r3
 8006890:	f04f 33ff 	mov.w	r3, #4294967295
 8006894:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006896:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800689a:	2b03      	cmp	r3, #3
 800689c:	d87e      	bhi.n	800699c <USB_HC_Init+0x13c>
 800689e:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <USB_HC_Init+0x44>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	0800695f 	.word	0x0800695f
 80068ac:	080068b5 	.word	0x080068b5
 80068b0:	08006921 	.word	0x08006921
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c0:	461a      	mov	r2, r3
 80068c2:	f240 439d 	movw	r3, #1181	; 0x49d
 80068c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80068c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da10      	bge.n	80068f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	78fa      	ldrb	r2, [r7, #3]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ee:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80068f0:	e057      	b.n	80069a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d051      	beq.n	80069a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	440a      	add	r2, r1
 8006914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006918:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800691c:	60d3      	str	r3, [r2, #12]
      break;
 800691e:	e040      	b.n	80069a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	461a      	mov	r2, r3
 800692e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006932:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da34      	bge.n	80069a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	440a      	add	r2, r1
 8006952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800695c:	e023      	b.n	80069a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	461a      	mov	r2, r3
 800696c:	f240 2325 	movw	r3, #549	; 0x225
 8006970:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006972:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	da17      	bge.n	80069aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	440a      	add	r2, r1
 8006990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006994:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006998:	60d3      	str	r3, [r2, #12]
      }
      break;
 800699a:	e006      	b.n	80069aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	77fb      	strb	r3, [r7, #31]
      break;
 80069a0:	e004      	b.n	80069ac <USB_HC_Init+0x14c>
      break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <USB_HC_Init+0x14c>
      break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <USB_HC_Init+0x14c>
      break;
 80069aa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	2101      	movs	r1, #1
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	6939      	ldr	r1, [r7, #16]
 80069c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069c6:	4313      	orrs	r3, r2
 80069c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	da03      	bge.n	80069e6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e001      	b.n	80069ea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ff0f 	bl	800680e <USB_GetHostSpeed>
 80069f0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80069f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d106      	bne.n	8006a08 <USB_HC_Init+0x1a8>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d003      	beq.n	8006a08 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e001      	b.n	8006a0c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a0c:	787b      	ldrb	r3, [r7, #1]
 8006a0e:	059b      	lsls	r3, r3, #22
 8006a10:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a14:	78bb      	ldrb	r3, [r7, #2]
 8006a16:	02db      	lsls	r3, r3, #11
 8006a18:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a1c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a22:	049b      	lsls	r3, r3, #18
 8006a24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	0159      	lsls	r1, r3, #5
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	440b      	add	r3, r1
 8006a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a42:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a48:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006a4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d10f      	bne.n	8006a72 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	78fa      	ldrb	r2, [r7, #3]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	; 0x30
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d02d      	beq.n	8006b02 <USB_HC_StartXfer+0x86>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	791b      	ldrb	r3, [r3, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d129      	bne.n	8006b02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d117      	bne.n	8006ae4 <USB_HC_StartXfer+0x68>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	79db      	ldrb	r3, [r3, #7]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <USB_HC_StartXfer+0x48>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	79db      	ldrb	r3, [r3, #7]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d10f      	bne.n	8006ae4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	0151      	lsls	r1, r2, #5
 8006ad6:	6a3a      	ldr	r2, [r7, #32]
 8006ad8:	440a      	add	r2, r1
 8006ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <USB_HC_StartXfer+0x86>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	795b      	ldrb	r3, [r3, #5]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d107      	bne.n	8006b02 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	4619      	mov	r1, r3
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fa2f 	bl	8006f5c <USB_DoPing>
      return HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e0f8      	b.n	8006cf4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d018      	beq.n	8006b3c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	8912      	ldrh	r2, [r2, #8]
 8006b12:	4413      	add	r3, r2
 8006b14:	3b01      	subs	r3, #1
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	8912      	ldrh	r2, [r2, #8]
 8006b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b1e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b22:	8b7b      	ldrh	r3, [r7, #26]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d90b      	bls.n	8006b40 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b28:	8b7b      	ldrh	r3, [r7, #26]
 8006b2a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	8912      	ldrh	r2, [r2, #8]
 8006b32:	fb02 f203 	mul.w	r2, r2, r3
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	611a      	str	r2, [r3, #16]
 8006b3a:	e001      	b.n	8006b40 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	78db      	ldrb	r3, [r3, #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	8912      	ldrh	r2, [r2, #8]
 8006b4e:	fb02 f203 	mul.w	r2, r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	611a      	str	r2, [r3, #16]
 8006b56:	e003      	b.n	8006b60 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	695a      	ldr	r2, [r3, #20]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b6a:	04d9      	lsls	r1, r3, #19
 8006b6c:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <USB_HC_StartXfer+0x280>)
 8006b6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	7a9b      	ldrb	r3, [r3, #10]
 8006b76:	075b      	lsls	r3, r3, #29
 8006b78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b7c:	69f9      	ldr	r1, [r7, #28]
 8006b7e:	0148      	lsls	r0, r1, #5
 8006b80:	6a39      	ldr	r1, [r7, #32]
 8006b82:	4401      	add	r1, r0
 8006b84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	68d9      	ldr	r1, [r3, #12]
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bf0c      	ite	eq
 8006bb6:	2301      	moveq	r3, #1
 8006bb8:	2300      	movne	r3, #0
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bdc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	7e7b      	ldrb	r3, [r7, #25]
 8006bee:	075b      	lsls	r3, r3, #29
 8006bf0:	69f9      	ldr	r1, [r7, #28]
 8006bf2:	0148      	lsls	r0, r1, #5
 8006bf4:	6a39      	ldr	r1, [r7, #32]
 8006bf6:	4401      	add	r1, r0
 8006bf8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c16:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	78db      	ldrb	r3, [r3, #3]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	e003      	b.n	8006c32 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c30:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c38:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	461a      	mov	r2, r3
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e04e      	b.n	8006cf4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	78db      	ldrb	r3, [r3, #3]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d149      	bne.n	8006cf2 <USB_HC_StartXfer+0x276>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d045      	beq.n	8006cf2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	79db      	ldrb	r3, [r3, #7]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d830      	bhi.n	8006cd0 <USB_HC_StartXfer+0x254>
 8006c6e:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <USB_HC_StartXfer+0x1f8>)
 8006c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006ca9 	.word	0x08006ca9
 8006c7c:	08006c85 	.word	0x08006c85
 8006c80:	08006ca9 	.word	0x08006ca9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	3303      	adds	r3, #3
 8006c8a:	089b      	lsrs	r3, r3, #2
 8006c8c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c8e:	8afa      	ldrh	r2, [r7, #22]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d91c      	bls.n	8006cd4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ca6:	e015      	b.n	8006cd4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	3303      	adds	r3, #3
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cb2:	8afa      	ldrh	r2, [r7, #22]
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d90a      	bls.n	8006cd8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cce:	e003      	b.n	8006cd8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e002      	b.n	8006cda <USB_HC_StartXfer+0x25e>
        break;
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <USB_HC_StartXfer+0x25e>
        break;
 8006cd8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	68d9      	ldr	r1, [r3, #12]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	785a      	ldrb	r2, [r3, #1]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2000      	movs	r0, #0
 8006cea:	9000      	str	r0, [sp, #0]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fb81 	bl	80063f4 <USB_WritePacket>
  }

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3728      	adds	r7, #40	; 0x28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	1ff80000 	.word	0x1ff80000

08006d00 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	b29b      	uxth	r3, r3
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b089      	sub	sp, #36	; 0x24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	0c9b      	lsrs	r3, r3, #18
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	0fdb      	lsrs	r3, r3, #31
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d104      	bne.n	8006d7c <USB_HC_Halt+0x5a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e0e8      	b.n	8006f4e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <USB_HC_Halt+0x66>
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d173      	bne.n	8006e70 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006da6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 80cb 	bne.w	8006f4c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d143      	bne.n	8006e4a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e20:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3301      	adds	r3, #1
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e2e:	d81d      	bhi.n	8006e6c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e46:	d0ec      	beq.n	8006e22 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e48:	e080      	b.n	8006f4c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e6a:	e06f      	b.n	8006f4c <USB_HC_Halt+0x22a>
            break;
 8006e6c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e6e:	e06d      	b.n	8006f4c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e8e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d143      	bne.n	8006f28 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ebe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006efe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3301      	adds	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0c:	d81d      	bhi.n	8006f4a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f24:	d0ec      	beq.n	8006f00 <USB_HC_Halt+0x1de>
 8006f26:	e011      	b.n	8006f4c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	e000      	b.n	8006f4c <USB_HC_Halt+0x22a>
          break;
 8006f4a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3724      	adds	r7, #36	; 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f70:	2301      	movs	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	04da      	lsls	r2, r3, #19
 8006f78:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <USB_DoPing+0x74>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	0151      	lsls	r1, r2, #5
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	440a      	add	r2, r1
 8006f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fa4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	1ff80000 	.word	0x1ff80000

08006fd4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff f982 	bl	80062ee <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006fea:	2110      	movs	r1, #16
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff f9b9 	bl	8006364 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff f9dc 	bl	80063b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e01f      	b.n	800703e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007014:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800701c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007024:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007032:	461a      	mov	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b0f      	cmp	r3, #15
 8007042:	d9dc      	bls.n	8006ffe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e034      	b.n	80070b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007060:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007068:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007070:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707e:	461a      	mov	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	3301      	adds	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007090:	d80c      	bhi.n	80070ac <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a8:	d0ec      	beq.n	8007084 <USB_StopHost+0xb0>
 80070aa:	e000      	b.n	80070ae <USB_StopHost+0xda>
        break;
 80070ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b0f      	cmp	r3, #15
 80070b8:	d9c7      	bls.n	800704a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c0:	461a      	mov	r2, r3
 80070c2:	f04f 33ff 	mov.w	r3, #4294967295
 80070c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f04f 32ff 	mov.w	r2, #4294967295
 80070ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff f8fb 	bl	80062cc <USB_EnableGlobalInt>

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b089      	sub	sp, #36	; 0x24
 80070e4:	af04      	add	r7, sp, #16
 80070e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070e8:	2301      	movs	r3, #1
 80070ea:	2202      	movs	r2, #2
 80070ec:	2102      	movs	r1, #2
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fc66 	bl	80079c0 <USBH_FindInterface>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2bff      	cmp	r3, #255	; 0xff
 80070fc:	d002      	beq.n	8007104 <USBH_CDC_InterfaceInit+0x24>
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d901      	bls.n	8007108 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007104:	2302      	movs	r3, #2
 8007106:	e13d      	b.n	8007384 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc3b 	bl	8007988 <USBH_SelectInterface>
 8007112:	4603      	mov	r3, r0
 8007114:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800711c:	2302      	movs	r3, #2
 800711e:	e131      	b.n	8007384 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007126:	2050      	movs	r0, #80	; 0x50
 8007128:	f002 ff6c 	bl	800a004 <malloc>
 800712c:	4603      	mov	r3, r0
 800712e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007140:	2302      	movs	r3, #2
 8007142:	e11f      	b.n	8007384 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007144:	2250      	movs	r2, #80	; 0x50
 8007146:	2100      	movs	r1, #0
 8007148:	68b8      	ldr	r0, [r7, #8]
 800714a:	f002 ff79 	bl	800a040 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	211a      	movs	r1, #26
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	4413      	add	r3, r2
 800715a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b25b      	sxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	da15      	bge.n	8007192 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	211a      	movs	r1, #26
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	4413      	add	r3, r2
 8007172:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007176:	781a      	ldrb	r2, [r3, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	211a      	movs	r1, #26
 8007182:	fb01 f303 	mul.w	r3, r1, r3
 8007186:	4413      	add	r3, r2
 8007188:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800718c:	881a      	ldrh	r2, [r3, #0]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fe32 	bl	8008e02 <USBH_AllocPipe>
 800719e:	4603      	mov	r3, r0
 80071a0:	461a      	mov	r2, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	7819      	ldrb	r1, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	7858      	ldrb	r0, [r3, #1]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	8952      	ldrh	r2, [r2, #10]
 80071be:	9202      	str	r2, [sp, #8]
 80071c0:	2203      	movs	r2, #3
 80071c2:	9201      	str	r2, [sp, #4]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	4623      	mov	r3, r4
 80071c8:	4602      	mov	r2, r0
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fdea 	bl	8008da4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 f8f9 	bl	80093d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071de:	2300      	movs	r3, #0
 80071e0:	2200      	movs	r2, #0
 80071e2:	210a      	movs	r1, #10
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fbeb 	bl	80079c0 <USBH_FindInterface>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2bff      	cmp	r3, #255	; 0xff
 80071f2:	d002      	beq.n	80071fa <USBH_CDC_InterfaceInit+0x11a>
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d901      	bls.n	80071fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	e0c2      	b.n	8007384 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	211a      	movs	r1, #26
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	b25b      	sxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	da16      	bge.n	8007244 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	211a      	movs	r1, #26
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	4413      	add	r3, r2
 8007222:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	211a      	movs	r1, #26
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	4413      	add	r3, r2
 8007238:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800723c:	881a      	ldrh	r2, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	835a      	strh	r2, [r3, #26]
 8007242:	e015      	b.n	8007270 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	211a      	movs	r1, #26
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007254:	781a      	ldrb	r2, [r3, #0]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	211a      	movs	r1, #26
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800726a:	881a      	ldrh	r2, [r3, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	211a      	movs	r1, #26
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b25b      	sxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	da16      	bge.n	80072b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	211a      	movs	r1, #26
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	4413      	add	r3, r2
 8007294:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	211a      	movs	r1, #26
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	835a      	strh	r2, [r3, #26]
 80072b4:	e015      	b.n	80072e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	211a      	movs	r1, #26
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	211a      	movs	r1, #26
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072dc:	881a      	ldrh	r2, [r3, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	7b9b      	ldrb	r3, [r3, #14]
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 fd8a 	bl	8008e02 <USBH_AllocPipe>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	7bdb      	ldrb	r3, [r3, #15]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fd80 	bl	8008e02 <USBH_AllocPipe>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7b59      	ldrb	r1, [r3, #13]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	7b98      	ldrb	r0, [r3, #14]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	8b12      	ldrh	r2, [r2, #24]
 8007322:	9202      	str	r2, [sp, #8]
 8007324:	2202      	movs	r2, #2
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4623      	mov	r3, r4
 800732c:	4602      	mov	r2, r0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 fd38 	bl	8008da4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	7b19      	ldrb	r1, [r3, #12]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	7bd8      	ldrb	r0, [r3, #15]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	8b52      	ldrh	r2, [r2, #26]
 800734c:	9202      	str	r2, [sp, #8]
 800734e:	2202      	movs	r2, #2
 8007350:	9201      	str	r2, [sp, #4]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4623      	mov	r3, r4
 8007356:	4602      	mov	r2, r0
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 fd23 	bl	8008da4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	7b5b      	ldrb	r3, [r3, #13]
 800736a:	2200      	movs	r2, #0
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f002 f82e 	bl	80093d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	7b1b      	ldrb	r3, [r3, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f002 f827 	bl	80093d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	bd90      	pop	{r4, r7, pc}

0800738c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00e      	beq.n	80073c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 fd18 	bl	8008de2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 fd43 	bl	8008e44 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	7b1b      	ldrb	r3, [r3, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00e      	beq.n	80073ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7b1b      	ldrb	r3, [r3, #12]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fd05 	bl	8008de2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	7b1b      	ldrb	r3, [r3, #12]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 fd30 	bl	8008e44 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	7b5b      	ldrb	r3, [r3, #13]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00e      	beq.n	8007410 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	7b5b      	ldrb	r3, [r3, #13]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fcf2 	bl	8008de2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	7b5b      	ldrb	r3, [r3, #13]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fd1d 	bl	8008e44 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4618      	mov	r0, r3
 8007426:	f002 fdf5 	bl	800a014 <free>
    phost->pActiveClass->pData = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007430:	2200      	movs	r2, #0
 8007432:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3340      	adds	r3, #64	; 0x40
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f8b1 	bl	80075be <GetLineCoding>
 800745c:	4603      	mov	r3, r0
 800745e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d105      	bne.n	8007472 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800746c:	2102      	movs	r1, #2
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007472:	7afb      	ldrb	r3, [r7, #11]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800749c:	2b04      	cmp	r3, #4
 800749e:	d877      	bhi.n	8007590 <USBH_CDC_Process+0x114>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <USBH_CDC_Process+0x2c>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074bd 	.word	0x080074bd
 80074ac:	080074c3 	.word	0x080074c3
 80074b0:	080074f3 	.word	0x080074f3
 80074b4:	08007567 	.word	0x08007567
 80074b8:	08007575 	.word	0x08007575
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e06d      	b.n	800759e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f897 	bl	80075fc <SetLineCoding>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074e0:	e058      	b.n	8007594 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d055      	beq.n	8007594 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2204      	movs	r2, #4
 80074ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074f0:	e050      	b.n	8007594 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3340      	adds	r3, #64	; 0x40
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f860 	bl	80075be <GetLineCoding>
 80074fe:	4603      	mov	r3, r0
 8007500:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d126      	bne.n	8007556 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	791b      	ldrb	r3, [r3, #4]
 800751c:	429a      	cmp	r2, r3
 800751e:	d13b      	bne.n	8007598 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800752c:	429a      	cmp	r2, r3
 800752e:	d133      	bne.n	8007598 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800753c:	429a      	cmp	r2, r3
 800753e:	d12b      	bne.n	8007598 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007548:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800754a:	429a      	cmp	r2, r3
 800754c:	d124      	bne.n	8007598 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f958 	bl	8007804 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007554:	e020      	b.n	8007598 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d01d      	beq.n	8007598 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2204      	movs	r2, #4
 8007560:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007564:	e018      	b.n	8007598 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f867 	bl	800763a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f8da 	bl	8007726 <CDC_ProcessReception>
      break;
 8007572:	e014      	b.n	800759e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 ffe3 	bl	8008542 <USBH_ClrFeature>
 800757c:	4603      	mov	r3, r0
 800757e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800758e:	e005      	b.n	800759c <USBH_CDC_Process+0x120>

    default:
      break;
 8007590:	bf00      	nop
 8007592:	e004      	b.n	800759e <USBH_CDC_Process+0x122>
      break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <USBH_CDC_Process+0x122>
      break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <USBH_CDC_Process+0x122>
      break;
 800759c:	bf00      	nop

  }

  return status;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	22a1      	movs	r2, #161	; 0xa1
 80075cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2221      	movs	r2, #33	; 0x21
 80075d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2207      	movs	r2, #7
 80075e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2207      	movs	r2, #7
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 f988 	bl	8008902 <USBH_CtlReq>
 80075f2:	4603      	mov	r3, r0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2221      	movs	r2, #33	; 0x21
 800760a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2207      	movs	r2, #7
 8007622:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2207      	movs	r2, #7
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 f969 	bl	8008902 <USBH_CtlReq>
 8007630:	4603      	mov	r3, r0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af02      	add	r7, sp, #8
 8007640:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800764c:	2300      	movs	r3, #0
 800764e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007656:	2b01      	cmp	r3, #1
 8007658:	d002      	beq.n	8007660 <CDC_ProcessTransmission+0x26>
 800765a:	2b02      	cmp	r3, #2
 800765c:	d023      	beq.n	80076a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800765e:	e05e      	b.n	800771e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	8b12      	ldrh	r2, [r2, #24]
 8007668:	4293      	cmp	r3, r2
 800766a:	d90b      	bls.n	8007684 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	69d9      	ldr	r1, [r3, #28]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8b1a      	ldrh	r2, [r3, #24]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	7b5b      	ldrb	r3, [r3, #13]
 8007678:	2001      	movs	r0, #1
 800767a:	9000      	str	r0, [sp, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 fb4e 	bl	8008d1e <USBH_BulkSendData>
 8007682:	e00b      	b.n	800769c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	7b5b      	ldrb	r3, [r3, #13]
 8007692:	2001      	movs	r0, #1
 8007694:	9000      	str	r0, [sp, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fb41 	bl	8008d1e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076a4:	e03b      	b.n	800771e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	7b5b      	ldrb	r3, [r3, #13]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fe65 	bl	800937c <USBH_LL_GetURBState>
 80076b2:	4603      	mov	r3, r0
 80076b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d128      	bne.n	800770e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	8b12      	ldrh	r2, [r2, #24]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d90e      	bls.n	80076e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	8b12      	ldrh	r2, [r2, #24]
 80076d0:	1a9a      	subs	r2, r3, r2
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	8b12      	ldrh	r2, [r2, #24]
 80076de:	441a      	add	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	61da      	str	r2, [r3, #28]
 80076e4:	e002      	b.n	80076ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076fc:	e00e      	b.n	800771c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f868 	bl	80077dc <USBH_CDC_TransmitCallback>
      break;
 800770c:	e006      	b.n	800771c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d103      	bne.n	800771c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800771c:	bf00      	nop
  }
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007738:	2300      	movs	r3, #0
 800773a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007742:	2b03      	cmp	r3, #3
 8007744:	d002      	beq.n	800774c <CDC_ProcessReception+0x26>
 8007746:	2b04      	cmp	r3, #4
 8007748:	d00e      	beq.n	8007768 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800774a:	e043      	b.n	80077d4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6a19      	ldr	r1, [r3, #32]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	8b5a      	ldrh	r2, [r3, #26]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	7b1b      	ldrb	r3, [r3, #12]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fb05 	bl	8008d68 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2204      	movs	r2, #4
 8007762:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007766:	e035      	b.n	80077d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	7b1b      	ldrb	r3, [r3, #12]
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fe04 	bl	800937c <USBH_LL_GetURBState>
 8007774:	4603      	mov	r3, r0
 8007776:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007778:	7cfb      	ldrb	r3, [r7, #19]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d129      	bne.n	80077d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	7b1b      	ldrb	r3, [r3, #12]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fd67 	bl	8009258 <USBH_LL_GetLastXferSize>
 800778a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	429a      	cmp	r2, r3
 8007794:	d016      	beq.n	80077c4 <CDC_ProcessReception+0x9e>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	8b5b      	ldrh	r3, [r3, #26]
 800779a:	461a      	mov	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4293      	cmp	r3, r2
 80077a0:	d910      	bls.n	80077c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1ad2      	subs	r2, r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	6a1a      	ldr	r2, [r3, #32]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	441a      	add	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2203      	movs	r2, #3
 80077be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077c2:	e006      	b.n	80077d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f80f 	bl	80077f0 <USBH_CDC_ReceiveCallback>
      break;
 80077d2:	bf00      	nop
  }
}
 80077d4:	bf00      	nop
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800782c:	2302      	movs	r3, #2
 800782e:	e029      	b.n	8007884 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	79fa      	ldrb	r2, [r7, #7]
 8007834:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f81f 	bl	800788c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f001 fc37 	bl	80090f0 <USBH_LL_Init>

  return USBH_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e009      	b.n	80078b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	33e0      	adds	r3, #224	; 0xe0
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	2200      	movs	r2, #0
 80078aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	60fb      	str	r3, [r7, #12]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b0e      	cmp	r3, #14
 80078b6:	d9f2      	bls.n	800789e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e009      	b.n	80078d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3301      	adds	r3, #1
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d8:	d3f1      	bcc.n	80078be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2240      	movs	r2, #64	; 0x40
 80078fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d016      	beq.n	8007976 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10e      	bne.n	8007970 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007958:	1c59      	adds	r1, r3, #1
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	33de      	adds	r3, #222	; 0xde
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
 800796e:	e004      	b.n	800797a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007970:	2302      	movs	r3, #2
 8007972:	73fb      	strb	r3, [r7, #15]
 8007974:	e001      	b.n	800797a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007976:	2302      	movs	r3, #2
 8007978:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d204      	bcs.n	80079ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	78fa      	ldrb	r2, [r7, #3]
 80079a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80079ac:	e001      	b.n	80079b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80079ae:	2302      	movs	r3, #2
 80079b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	70fb      	strb	r3, [r7, #3]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70bb      	strb	r3, [r7, #2]
 80079d6:	4613      	mov	r3, r2
 80079d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80079de:	2300      	movs	r3, #0
 80079e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079ea:	e025      	b.n	8007a38 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	221a      	movs	r2, #26
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	3308      	adds	r3, #8
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	3302      	adds	r3, #2
 80079fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	795b      	ldrb	r3, [r3, #5]
 8007a02:	78fa      	ldrb	r2, [r7, #3]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d002      	beq.n	8007a0e <USBH_FindInterface+0x4e>
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	2bff      	cmp	r3, #255	; 0xff
 8007a0c:	d111      	bne.n	8007a32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a12:	78ba      	ldrb	r2, [r7, #2]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d002      	beq.n	8007a1e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a18:	78bb      	ldrb	r3, [r7, #2]
 8007a1a:	2bff      	cmp	r3, #255	; 0xff
 8007a1c:	d109      	bne.n	8007a32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a22:	787a      	ldrb	r2, [r7, #1]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d002      	beq.n	8007a2e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a28:	787b      	ldrb	r3, [r7, #1]
 8007a2a:	2bff      	cmp	r3, #255	; 0xff
 8007a2c:	d101      	bne.n	8007a32 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	e006      	b.n	8007a40 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	3301      	adds	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d9d6      	bls.n	80079ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a3e:	23ff      	movs	r3, #255	; 0xff
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fb87 	bl	8009168 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fca0 	bl	80093a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af04      	add	r7, sp, #16
 8007a72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d102      	bne.n	8007a8e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b0b      	cmp	r3, #11
 8007a96:	f200 81b3 	bhi.w	8007e00 <USBH_Process+0x394>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <USBH_Process+0x34>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ad1 	.word	0x08007ad1
 8007aa4:	08007b03 	.word	0x08007b03
 8007aa8:	08007b6b 	.word	0x08007b6b
 8007aac:	08007d9b 	.word	0x08007d9b
 8007ab0:	08007e01 	.word	0x08007e01
 8007ab4:	08007c0f 	.word	0x08007c0f
 8007ab8:	08007d41 	.word	0x08007d41
 8007abc:	08007c45 	.word	0x08007c45
 8007ac0:	08007c65 	.word	0x08007c65
 8007ac4:	08007c85 	.word	0x08007c85
 8007ac8:	08007cb3 	.word	0x08007cb3
 8007acc:	08007d83 	.word	0x08007d83
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8193 	beq.w	8007e04 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ae4:	20c8      	movs	r0, #200	; 0xc8
 8007ae6:	f001 fca3 	bl	8009430 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fb99 	bl	8009222 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b00:	e180      	b.n	8007e04 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d107      	bne.n	8007b1c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b1a:	e182      	b.n	8007e22 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b26:	d914      	bls.n	8007b52 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b2e:	3301      	adds	r3, #1
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d903      	bls.n	8007b4a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	220d      	movs	r2, #13
 8007b46:	701a      	strb	r2, [r3, #0]
      break;
 8007b48:	e16b      	b.n	8007e22 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
      break;
 8007b50:	e167      	b.n	8007e22 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b58:	f103 020a 	add.w	r2, r3, #10
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b62:	200a      	movs	r0, #10
 8007b64:	f001 fc64 	bl	8009430 <USBH_Delay>
      break;
 8007b68:	e15b      	b.n	8007e22 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b7a:	2104      	movs	r1, #4
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b80:	2064      	movs	r0, #100	; 0x64
 8007b82:	f001 fc55 	bl	8009430 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 fb24 	bl	80091d4 <USBH_LL_GetSpeed>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2205      	movs	r2, #5
 8007b9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 f92f 	bl	8008e02 <USBH_AllocPipe>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007bac:	2180      	movs	r1, #128	; 0x80
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 f927 	bl	8008e02 <USBH_AllocPipe>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	7919      	ldrb	r1, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007bd0:	b292      	uxth	r2, r2
 8007bd2:	9202      	str	r2, [sp, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	9201      	str	r2, [sp, #4]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2280      	movs	r2, #128	; 0x80
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 f8e0 	bl	8008da4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7959      	ldrb	r1, [r3, #5]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bf8:	b292      	uxth	r2, r2
 8007bfa:	9202      	str	r2, [sp, #8]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	9201      	str	r2, [sp, #4]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	4603      	mov	r3, r0
 8007c04:	2200      	movs	r2, #0
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 f8cc 	bl	8008da4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c0c:	e109      	b.n	8007e22 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f90c 	bl	8007e2c <USBH_HandleEnum>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 80f3 	bne.w	8007e08 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d103      	bne.n	8007c3c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2208      	movs	r2, #8
 8007c38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c3a:	e0e5      	b.n	8007e08 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2207      	movs	r2, #7
 8007c40:	701a      	strb	r2, [r3, #0]
      break;
 8007c42:	e0e1      	b.n	8007e08 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80de 	beq.w	8007e0c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c56:	2101      	movs	r1, #1
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2208      	movs	r2, #8
 8007c60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c62:	e0d3      	b.n	8007e0c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fc20 	bl	80084b4 <USBH_SetCfg>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 80ca 	bne.w	8007e10 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2209      	movs	r2, #9
 8007c80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c82:	e0c5      	b.n	8007e10 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007c92:	2101      	movs	r1, #1
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fc30 	bl	80084fa <USBH_SetFeature>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 80b9 	bne.w	8007e14 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	220a      	movs	r2, #10
 8007ca6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ca8:	e0b4      	b.n	8007e14 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	220a      	movs	r2, #10
 8007cae:	701a      	strb	r2, [r3, #0]
      break;
 8007cb0:	e0b0      	b.n	8007e14 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80ad 	beq.w	8007e18 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
 8007cca:	e016      	b.n	8007cfa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ccc:	7bfa      	ldrb	r2, [r7, #15]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32de      	adds	r2, #222	; 0xde
 8007cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd6:	791a      	ldrb	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d108      	bne.n	8007cf4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ce2:	7bfa      	ldrb	r2, [r7, #15]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	32de      	adds	r2, #222	; 0xde
 8007ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007cf2:	e005      	b.n	8007d00 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	73fb      	strb	r3, [r7, #15]
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0e5      	beq.n	8007ccc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d016      	beq.n	8007d38 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d109      	bne.n	8007d30 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2206      	movs	r2, #6
 8007d20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d28:	2103      	movs	r1, #3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d2e:	e073      	b.n	8007e18 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	220d      	movs	r2, #13
 8007d34:	701a      	strb	r2, [r3, #0]
      break;
 8007d36:	e06f      	b.n	8007e18 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	220d      	movs	r2, #13
 8007d3c:	701a      	strb	r2, [r3, #0]
      break;
 8007d3e:	e06b      	b.n	8007e18 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d017      	beq.n	8007d7a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d103      	bne.n	8007d6a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	220b      	movs	r2, #11
 8007d66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d68:	e058      	b.n	8007e1c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d154      	bne.n	8007e1c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	220d      	movs	r2, #13
 8007d76:	701a      	strb	r2, [r3, #0]
      break;
 8007d78:	e050      	b.n	8007e1c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220d      	movs	r2, #13
 8007d7e:	701a      	strb	r2, [r3, #0]
      break;
 8007d80:	e04c      	b.n	8007e1c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d049      	beq.n	8007e20 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
      }
      break;
 8007d98:	e042      	b.n	8007e20 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff fd72 	bl	800788c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d009      	beq.n	8007dc6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dd6:	2105      	movs	r1, #5
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d107      	bne.n	8007df8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fe2b 	bl	8007a4c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007df6:	e014      	b.n	8007e22 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f9b5 	bl	8009168 <USBH_LL_Start>
      break;
 8007dfe:	e010      	b.n	8007e22 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e00:	bf00      	nop
 8007e02:	e00e      	b.n	8007e22 <USBH_Process+0x3b6>
      break;
 8007e04:	bf00      	nop
 8007e06:	e00c      	b.n	8007e22 <USBH_Process+0x3b6>
      break;
 8007e08:	bf00      	nop
 8007e0a:	e00a      	b.n	8007e22 <USBH_Process+0x3b6>
    break;
 8007e0c:	bf00      	nop
 8007e0e:	e008      	b.n	8007e22 <USBH_Process+0x3b6>
      break;
 8007e10:	bf00      	nop
 8007e12:	e006      	b.n	8007e22 <USBH_Process+0x3b6>
      break;
 8007e14:	bf00      	nop
 8007e16:	e004      	b.n	8007e22 <USBH_Process+0x3b6>
      break;
 8007e18:	bf00      	nop
 8007e1a:	e002      	b.n	8007e22 <USBH_Process+0x3b6>
      break;
 8007e1c:	bf00      	nop
 8007e1e:	e000      	b.n	8007e22 <USBH_Process+0x3b6>
      break;
 8007e20:	bf00      	nop
  }
  return USBH_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af04      	add	r7, sp, #16
 8007e32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	f200 81c1 	bhi.w	80081c8 <USBH_HandleEnum+0x39c>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBH_HandleEnum+0x20>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007f2b 	.word	0x08007f2b
 8007e54:	08007f95 	.word	0x08007f95
 8007e58:	08008023 	.word	0x08008023
 8007e5c:	0800808d 	.word	0x0800808d
 8007e60:	080080fd 	.word	0x080080fd
 8007e64:	08008143 	.word	0x08008143
 8007e68:	08008189 	.word	0x08008189
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e6c:	2108      	movs	r1, #8
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa50 	bl	8008314 <USBH_Get_DevDesc>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d130      	bne.n	8007ee0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7919      	ldrb	r1, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	9202      	str	r2, [sp, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	9201      	str	r2, [sp, #4]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4603      	mov	r3, r0
 8007eae:	2280      	movs	r2, #128	; 0x80
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 ff77 	bl	8008da4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7959      	ldrb	r1, [r3, #5]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	9202      	str	r2, [sp, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	9201      	str	r2, [sp, #4]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 ff63 	bl	8008da4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ede:	e175      	b.n	80081cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	f040 8172 	bne.w	80081cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eee:	3301      	adds	r3, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d903      	bls.n	8007f0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	220d      	movs	r2, #13
 8007f06:	701a      	strb	r2, [r3, #0]
      break;
 8007f08:	e160      	b.n	80081cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	795b      	ldrb	r3, [r3, #5]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 ff97 	bl	8008e44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	791b      	ldrb	r3, [r3, #4]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 ff91 	bl	8008e44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
      break;
 8007f28:	e150      	b.n	80081cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f2a:	2112      	movs	r1, #18
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f9f1 	bl	8008314 <USBH_Get_DevDesc>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f42:	e145      	b.n	80081d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	f040 8142 	bne.w	80081d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f52:	3301      	adds	r3, #1
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d903      	bls.n	8007f6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	220d      	movs	r2, #13
 8007f6a:	701a      	strb	r2, [r3, #0]
      break;
 8007f6c:	e130      	b.n	80081d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	795b      	ldrb	r3, [r3, #5]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 ff65 	bl	8008e44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	791b      	ldrb	r3, [r3, #4]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 ff5f 	bl	8008e44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
      break;
 8007f92:	e11d      	b.n	80081d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f94:	2101      	movs	r1, #1
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa68 	bl	800846c <USBH_SetAddress>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d132      	bne.n	800800c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007fa6:	2002      	movs	r0, #2
 8007fa8:	f001 fa42 	bl	8009430 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7919      	ldrb	r1, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fce:	b292      	uxth	r2, r2
 8007fd0:	9202      	str	r2, [sp, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	9201      	str	r2, [sp, #4]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2280      	movs	r2, #128	; 0x80
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fee1 	bl	8008da4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7959      	ldrb	r1, [r3, #5]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	9202      	str	r2, [sp, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	9201      	str	r2, [sp, #4]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4603      	mov	r3, r0
 8008002:	2200      	movs	r2, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fecd 	bl	8008da4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800800a:	e0e3      	b.n	80081d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b03      	cmp	r3, #3
 8008010:	f040 80e0 	bne.w	80081d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	220d      	movs	r2, #13
 8008018:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	705a      	strb	r2, [r3, #1]
      break;
 8008020:	e0d8      	b.n	80081d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008022:	2109      	movs	r1, #9
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f99d 	bl	8008364 <USBH_Get_CfgDesc>
 800802a:	4603      	mov	r3, r0
 800802c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2204      	movs	r2, #4
 8008038:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800803a:	e0cd      	b.n	80081d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b03      	cmp	r3, #3
 8008040:	f040 80ca 	bne.w	80081d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800804a:	3301      	adds	r3, #1
 800804c:	b2da      	uxtb	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800805a:	2b03      	cmp	r3, #3
 800805c:	d903      	bls.n	8008066 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	220d      	movs	r2, #13
 8008062:	701a      	strb	r2, [r3, #0]
      break;
 8008064:	e0b8      	b.n	80081d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	795b      	ldrb	r3, [r3, #5]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fee9 	bl	8008e44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	791b      	ldrb	r3, [r3, #4]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fee3 	bl	8008e44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
      break;
 800808a:	e0a5      	b.n	80081d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f965 	bl	8008364 <USBH_Get_CfgDesc>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d103      	bne.n	80080ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2205      	movs	r2, #5
 80080a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080aa:	e097      	b.n	80081dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	f040 8094 	bne.w	80081dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ba:	3301      	adds	r3, #1
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d903      	bls.n	80080d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	220d      	movs	r2, #13
 80080d2:	701a      	strb	r2, [r3, #0]
      break;
 80080d4:	e082      	b.n	80081dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	795b      	ldrb	r3, [r3, #5]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 feb1 	bl	8008e44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	791b      	ldrb	r3, [r3, #4]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 feab 	bl	8008e44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
      break;
 80080fa:	e06f      	b.n	80081dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008102:	2b00      	cmp	r3, #0
 8008104:	d019      	beq.n	800813a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008112:	23ff      	movs	r3, #255	; 0xff
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f949 	bl	80083ac <USBH_Get_StringDesc>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d103      	bne.n	800812c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2206      	movs	r2, #6
 8008128:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800812a:	e059      	b.n	80081e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d156      	bne.n	80081e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2206      	movs	r2, #6
 8008136:	705a      	strb	r2, [r3, #1]
      break;
 8008138:	e052      	b.n	80081e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2206      	movs	r2, #6
 800813e:	705a      	strb	r2, [r3, #1]
      break;
 8008140:	e04e      	b.n	80081e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008148:	2b00      	cmp	r3, #0
 800814a:	d019      	beq.n	8008180 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008158:	23ff      	movs	r3, #255	; 0xff
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f926 	bl	80083ac <USBH_Get_StringDesc>
 8008160:	4603      	mov	r3, r0
 8008162:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2207      	movs	r2, #7
 800816e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008170:	e038      	b.n	80081e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b03      	cmp	r3, #3
 8008176:	d135      	bne.n	80081e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2207      	movs	r2, #7
 800817c:	705a      	strb	r2, [r3, #1]
      break;
 800817e:	e031      	b.n	80081e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2207      	movs	r2, #7
 8008184:	705a      	strb	r2, [r3, #1]
      break;
 8008186:	e02d      	b.n	80081e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800818e:	2b00      	cmp	r3, #0
 8008190:	d017      	beq.n	80081c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800819e:	23ff      	movs	r3, #255	; 0xff
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f903 	bl	80083ac <USBH_Get_StringDesc>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80081b4:	e018      	b.n	80081e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d115      	bne.n	80081e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
      break;
 80081c0:	e012      	b.n	80081e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]
      break;
 80081c6:	e00f      	b.n	80081e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80081c8:	bf00      	nop
 80081ca:	e00e      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081cc:	bf00      	nop
 80081ce:	e00c      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081d0:	bf00      	nop
 80081d2:	e00a      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081d4:	bf00      	nop
 80081d6:	e008      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081d8:	bf00      	nop
 80081da:	e006      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081dc:	bf00      	nop
 80081de:	e004      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081e0:	bf00      	nop
 80081e2:	e002      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081e4:	bf00      	nop
 80081e6:	e000      	b.n	80081ea <USBH_HandleEnum+0x3be>
      break;
 80081e8:	bf00      	nop
  }
  return Status;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f804 	bl	8008236 <USBH_HandleSof>
}
 800822e:	bf00      	nop
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b0b      	cmp	r3, #11
 8008246:	d10a      	bne.n	800825e <USBH_HandleSof+0x28>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
  }
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008276:	bf00      	nop
}
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008292:	bf00      	nop
}
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 ff56 	bl	800919e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	791b      	ldrb	r3, [r3, #4]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fda3 	bl	8008e44 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	795b      	ldrb	r3, [r3, #5]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fd9d 	bl	8008e44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af02      	add	r7, sp, #8
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	b29b      	uxth	r3, r3
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008332:	2100      	movs	r1, #0
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f864 	bl	8008402 <USBH_GetDescriptor>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f203 3026 	addw	r0, r3, #806	; 0x326
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	b292      	uxth	r2, r2
 8008354:	4619      	mov	r1, r3
 8008356:	f000 f918 	bl	800858a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	331c      	adds	r3, #28
 8008374:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008376:	887b      	ldrh	r3, [r7, #2]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f83d 	bl	8008402 <USBH_GetDescriptor>
 8008388:	4603      	mov	r3, r0
 800838a:	72fb      	strb	r3, [r7, #11]
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d107      	bne.n	80083a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008398:	887a      	ldrh	r2, [r7, #2]
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f964 	bl	800866a <USBH_ParseCfgDesc>
  }

  return status;
 80083a2:	7afb      	ldrb	r3, [r7, #11]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	461a      	mov	r2, r3
 80083b8:	460b      	mov	r3, r1
 80083ba:	72fb      	strb	r3, [r7, #11]
 80083bc:	4613      	mov	r3, r2
 80083be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80083c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80083d0:	893b      	ldrh	r3, [r7, #8]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	460b      	mov	r3, r1
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f812 	bl	8008402 <USBH_GetDescriptor>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d107      	bne.n	80083f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083ee:	893a      	ldrh	r2, [r7, #8]
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fa37 	bl	8008866 <USBH_ParseStringDesc>
  }

  return status;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	72fb      	strb	r3, [r7, #11]
 8008410:	4613      	mov	r3, r2
 8008412:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	789b      	ldrb	r3, [r3, #2]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d11c      	bne.n	8008456 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008422:	b2da      	uxtb	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2206      	movs	r2, #6
 800842c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	893a      	ldrh	r2, [r7, #8]
 8008432:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008434:	893b      	ldrh	r3, [r7, #8]
 8008436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800843a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843e:	d104      	bne.n	800844a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f240 4209 	movw	r2, #1033	; 0x409
 8008446:	829a      	strh	r2, [r3, #20]
 8008448:	e002      	b.n	8008450 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8b3a      	ldrh	r2, [r7, #24]
 8008454:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008456:	8b3b      	ldrh	r3, [r7, #24]
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fa50 	bl	8008902 <USBH_CtlReq>
 8008462:	4603      	mov	r3, r0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d10f      	bne.n	80084a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2205      	movs	r2, #5
 800848a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fa2c 	bl	8008902 <USBH_CtlReq>
 80084aa:	4603      	mov	r3, r0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	789b      	ldrb	r3, [r3, #2]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d10e      	bne.n	80084e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2209      	movs	r2, #9
 80084d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	887a      	ldrh	r2, [r7, #2]
 80084d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa09 	bl	8008902 <USBH_CtlReq>
 80084f0:	4603      	mov	r3, r0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	789b      	ldrb	r3, [r3, #2]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d10f      	bne.n	800852e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2203      	movs	r2, #3
 8008518:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	b29a      	uxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f9e5 	bl	8008902 <USBH_CtlReq>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	789b      	ldrb	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10f      	bne.n	8008576 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008576:	2200      	movs	r2, #0
 8008578:	2100      	movs	r1, #0
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f9c1 	bl	8008902 <USBH_CtlReq>
 8008580:	4603      	mov	r3, r0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	4613      	mov	r3, r2
 8008596:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	781a      	ldrb	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	785a      	ldrb	r2, [r3, #1]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	3302      	adds	r3, #2
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	3303      	adds	r3, #3
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	4313      	orrs	r3, r2
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	791a      	ldrb	r2, [r3, #4]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	795a      	ldrb	r2, [r3, #5]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	799a      	ldrb	r2, [r3, #6]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	79da      	ldrb	r2, [r3, #7]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80085e4:	88fb      	ldrh	r3, [r7, #6]
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d939      	bls.n	800865e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3308      	adds	r3, #8
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	3309      	adds	r3, #9
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	4313      	orrs	r3, r2
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	330a      	adds	r3, #10
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b29a      	uxth	r2, r3
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	330b      	adds	r3, #11
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	b29b      	uxth	r3, r3
 800861a:	4313      	orrs	r3, r2
 800861c:	b29a      	uxth	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	330c      	adds	r3, #12
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	b29a      	uxth	r2, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	330d      	adds	r3, #13
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	b29b      	uxth	r3, r3
 8008636:	4313      	orrs	r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	7b9a      	ldrb	r2, [r3, #14]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	7bda      	ldrb	r2, [r3, #15]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	7c1a      	ldrb	r2, [r3, #16]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	7c5a      	ldrb	r2, [r3, #17]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	745a      	strb	r2, [r3, #17]
  }
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b08a      	sub	sp, #40	; 0x28
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	4613      	mov	r3, r2
 8008676:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	785a      	ldrb	r2, [r3, #1]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3302      	adds	r3, #2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3303      	adds	r3, #3
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	021b      	lsls	r3, r3, #8
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	791a      	ldrb	r2, [r3, #4]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	795a      	ldrb	r2, [r3, #5]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	799a      	ldrb	r2, [r3, #6]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	79da      	ldrb	r2, [r3, #7]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	7a1a      	ldrb	r2, [r3, #8]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80086e0:	88fb      	ldrh	r3, [r7, #6]
 80086e2:	2b09      	cmp	r3, #9
 80086e4:	d95f      	bls.n	80087a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80086e6:	2309      	movs	r3, #9
 80086e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80086ee:	e051      	b.n	8008794 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80086f0:	f107 0316 	add.w	r3, r7, #22
 80086f4:	4619      	mov	r1, r3
 80086f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086f8:	f000 f8e8 	bl	80088cc <USBH_GetNextDesc>
 80086fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	2b04      	cmp	r3, #4
 8008704:	d146      	bne.n	8008794 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800870a:	221a      	movs	r2, #26
 800870c:	fb02 f303 	mul.w	r3, r2, r3
 8008710:	3308      	adds	r3, #8
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4413      	add	r3, r2
 8008716:	3302      	adds	r3, #2
 8008718:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800871a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800871c:	69f8      	ldr	r0, [r7, #28]
 800871e:	f000 f846 	bl	80087ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008728:	2300      	movs	r3, #0
 800872a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800872c:	e022      	b.n	8008774 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800872e:	f107 0316 	add.w	r3, r7, #22
 8008732:	4619      	mov	r1, r3
 8008734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008736:	f000 f8c9 	bl	80088cc <USBH_GetNextDesc>
 800873a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	2b05      	cmp	r3, #5
 8008742:	d117      	bne.n	8008774 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008748:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800874c:	3201      	adds	r2, #1
 800874e:	00d2      	lsls	r2, r2, #3
 8008750:	211a      	movs	r1, #26
 8008752:	fb01 f303 	mul.w	r3, r1, r3
 8008756:	4413      	add	r3, r2
 8008758:	3308      	adds	r3, #8
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	3304      	adds	r3, #4
 8008760:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008764:	69b8      	ldr	r0, [r7, #24]
 8008766:	f000 f851 	bl	800880c <USBH_ParseEPDesc>
            ep_ix++;
 800876a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800876e:	3301      	adds	r3, #1
 8008770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	791b      	ldrb	r3, [r3, #4]
 8008778:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800877c:	429a      	cmp	r2, r3
 800877e:	d204      	bcs.n	800878a <USBH_ParseCfgDesc+0x120>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	885a      	ldrh	r2, [r3, #2]
 8008784:	8afb      	ldrh	r3, [r7, #22]
 8008786:	429a      	cmp	r2, r3
 8008788:	d8d1      	bhi.n	800872e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800878a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800878e:	3301      	adds	r3, #1
 8008790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008798:	2b01      	cmp	r3, #1
 800879a:	d804      	bhi.n	80087a6 <USBH_ParseCfgDesc+0x13c>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	885a      	ldrh	r2, [r3, #2]
 80087a0:	8afb      	ldrh	r3, [r7, #22]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d8a4      	bhi.n	80086f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80087a6:	bf00      	nop
 80087a8:	3728      	adds	r7, #40	; 0x28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	785a      	ldrb	r2, [r3, #1]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	789a      	ldrb	r2, [r3, #2]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	78da      	ldrb	r2, [r3, #3]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	791a      	ldrb	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	795a      	ldrb	r2, [r3, #5]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	799a      	ldrb	r2, [r3, #6]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	79da      	ldrb	r2, [r3, #7]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	7a1a      	ldrb	r2, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	721a      	strb	r2, [r3, #8]
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	785a      	ldrb	r2, [r3, #1]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	789a      	ldrb	r2, [r3, #2]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	78da      	ldrb	r2, [r3, #3]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	3304      	adds	r3, #4
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	b29a      	uxth	r2, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	3305      	adds	r3, #5
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	021b      	lsls	r3, r3, #8
 8008848:	b29b      	uxth	r3, r3
 800884a:	4313      	orrs	r3, r2
 800884c:	b29a      	uxth	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	799a      	ldrb	r2, [r3, #6]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	719a      	strb	r2, [r3, #6]
}
 800885a:	bf00      	nop
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008866:	b480      	push	{r7}
 8008868:	b087      	sub	sp, #28
 800886a:	af00      	add	r7, sp, #0
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	4613      	mov	r3, r2
 8008872:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3301      	adds	r3, #1
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b03      	cmp	r3, #3
 800887c:	d120      	bne.n	80088c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	1e9a      	subs	r2, r3, #2
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	4293      	cmp	r3, r2
 8008888:	bf28      	it	cs
 800888a:	4613      	movcs	r3, r2
 800888c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3302      	adds	r3, #2
 8008892:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008894:	2300      	movs	r3, #0
 8008896:	82fb      	strh	r3, [r7, #22]
 8008898:	e00b      	b.n	80088b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800889a:	8afb      	ldrh	r3, [r7, #22]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80088ac:	8afb      	ldrh	r3, [r7, #22]
 80088ae:	3302      	adds	r3, #2
 80088b0:	82fb      	strh	r3, [r7, #22]
 80088b2:	8afa      	ldrh	r2, [r7, #22]
 80088b4:	8abb      	ldrh	r3, [r7, #20]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d3ef      	bcc.n	800889a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	701a      	strb	r2, [r3, #0]
  }
}
 80088c0:	bf00      	nop
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	881a      	ldrh	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4413      	add	r3, r2
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4413      	add	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088f4:	68fb      	ldr	r3, [r7, #12]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	4613      	mov	r3, r2
 800890e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	789b      	ldrb	r3, [r3, #2]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d002      	beq.n	8008922 <USBH_CtlReq+0x20>
 800891c:	2b02      	cmp	r3, #2
 800891e:	d00f      	beq.n	8008940 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008920:	e027      	b.n	8008972 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	88fa      	ldrh	r2, [r7, #6]
 800892c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2202      	movs	r2, #2
 8008938:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800893a:	2301      	movs	r3, #1
 800893c:	75fb      	strb	r3, [r7, #23]
      break;
 800893e:	e018      	b.n	8008972 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f81b 	bl	800897c <USBH_HandleControl>
 8008946:	4603      	mov	r3, r0
 8008948:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <USBH_CtlReq+0x54>
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d106      	bne.n	8008964 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	761a      	strb	r2, [r3, #24]
      break;
 8008962:	e005      	b.n	8008970 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d102      	bne.n	8008970 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	709a      	strb	r2, [r3, #2]
      break;
 8008970:	bf00      	nop
  }
  return status;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af02      	add	r7, sp, #8
 8008982:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008984:	2301      	movs	r3, #1
 8008986:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7e1b      	ldrb	r3, [r3, #24]
 8008990:	3b01      	subs	r3, #1
 8008992:	2b0a      	cmp	r3, #10
 8008994:	f200 8156 	bhi.w	8008c44 <USBH_HandleControl+0x2c8>
 8008998:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <USBH_HandleControl+0x24>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	080089e7 	.word	0x080089e7
 80089a8:	08008a51 	.word	0x08008a51
 80089ac:	08008a77 	.word	0x08008a77
 80089b0:	08008aaf 	.word	0x08008aaf
 80089b4:	08008ad9 	.word	0x08008ad9
 80089b8:	08008b2b 	.word	0x08008b2b
 80089bc:	08008b4d 	.word	0x08008b4d
 80089c0:	08008b89 	.word	0x08008b89
 80089c4:	08008baf 	.word	0x08008baf
 80089c8:	08008bed 	.word	0x08008bed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f103 0110 	add.w	r1, r3, #16
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	795b      	ldrb	r3, [r3, #5]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f943 	bl	8008c64 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2202      	movs	r2, #2
 80089e2:	761a      	strb	r2, [r3, #24]
      break;
 80089e4:	e139      	b.n	8008c5a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fcc5 	bl	800937c <USBH_LL_GetURBState>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d11e      	bne.n	8008a3a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7c1b      	ldrb	r3, [r3, #16]
 8008a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8adb      	ldrh	r3, [r3, #22]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008a0e:	7b7b      	ldrb	r3, [r7, #13]
 8008a10:	2b80      	cmp	r3, #128	; 0x80
 8008a12:	d103      	bne.n	8008a1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2203      	movs	r2, #3
 8008a18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a1a:	e115      	b.n	8008c48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2205      	movs	r2, #5
 8008a20:	761a      	strb	r2, [r3, #24]
      break;
 8008a22:	e111      	b.n	8008c48 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008a24:	7b7b      	ldrb	r3, [r7, #13]
 8008a26:	2b80      	cmp	r3, #128	; 0x80
 8008a28:	d103      	bne.n	8008a32 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2209      	movs	r2, #9
 8008a2e:	761a      	strb	r2, [r3, #24]
      break;
 8008a30:	e10a      	b.n	8008c48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2207      	movs	r2, #7
 8008a36:	761a      	strb	r2, [r3, #24]
      break;
 8008a38:	e106      	b.n	8008c48 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d003      	beq.n	8008a48 <USBH_HandleControl+0xcc>
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	f040 8100 	bne.w	8008c48 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	220b      	movs	r2, #11
 8008a4c:	761a      	strb	r2, [r3, #24]
      break;
 8008a4e:	e0fb      	b.n	8008c48 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6899      	ldr	r1, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	899a      	ldrh	r2, [r3, #12]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	791b      	ldrb	r3, [r3, #4]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f93a 	bl	8008ce2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2204      	movs	r2, #4
 8008a72:	761a      	strb	r2, [r3, #24]
      break;
 8008a74:	e0f1      	b.n	8008c5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fc7d 	bl	800937c <USBH_LL_GetURBState>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d102      	bne.n	8008a92 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2209      	movs	r2, #9
 8008a90:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d102      	bne.n	8008a9e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a9c:	e0d6      	b.n	8008c4c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	f040 80d3 	bne.w	8008c4c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	220b      	movs	r2, #11
 8008aaa:	761a      	strb	r2, [r3, #24]
      break;
 8008aac:	e0ce      	b.n	8008c4c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6899      	ldr	r1, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	899a      	ldrh	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	795b      	ldrb	r3, [r3, #5]
 8008aba:	2001      	movs	r0, #1
 8008abc:	9000      	str	r0, [sp, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f8ea 	bl	8008c98 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2206      	movs	r2, #6
 8008ad4:	761a      	strb	r2, [r3, #24]
      break;
 8008ad6:	e0c0      	b.n	8008c5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	795b      	ldrb	r3, [r3, #5]
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fc4c 	bl	800937c <USBH_LL_GetURBState>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d103      	bne.n	8008af6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2207      	movs	r2, #7
 8008af2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008af4:	e0ac      	b.n	8008c50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b05      	cmp	r3, #5
 8008afa:	d105      	bne.n	8008b08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	220c      	movs	r2, #12
 8008b00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b02:	2303      	movs	r3, #3
 8008b04:	73fb      	strb	r3, [r7, #15]
      break;
 8008b06:	e0a3      	b.n	8008c50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d103      	bne.n	8008b16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2205      	movs	r2, #5
 8008b12:	761a      	strb	r2, [r3, #24]
      break;
 8008b14:	e09c      	b.n	8008c50 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	f040 8099 	bne.w	8008c50 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	220b      	movs	r2, #11
 8008b22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008b24:	2302      	movs	r3, #2
 8008b26:	73fb      	strb	r3, [r7, #15]
      break;
 8008b28:	e092      	b.n	8008c50 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	791b      	ldrb	r3, [r3, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2100      	movs	r1, #0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f8d5 	bl	8008ce2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2208      	movs	r2, #8
 8008b48:	761a      	strb	r2, [r3, #24]

      break;
 8008b4a:	e086      	b.n	8008c5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	791b      	ldrb	r3, [r3, #4]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fc12 	bl	800937c <USBH_LL_GetURBState>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d105      	bne.n	8008b6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	220d      	movs	r2, #13
 8008b66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b6c:	e072      	b.n	8008c54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d103      	bne.n	8008b7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	220b      	movs	r2, #11
 8008b78:	761a      	strb	r2, [r3, #24]
      break;
 8008b7a:	e06b      	b.n	8008c54 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d168      	bne.n	8008c54 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008b82:	2303      	movs	r3, #3
 8008b84:	73fb      	strb	r3, [r7, #15]
      break;
 8008b86:	e065      	b.n	8008c54 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	795b      	ldrb	r3, [r3, #5]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	9200      	str	r2, [sp, #0]
 8008b90:	2200      	movs	r2, #0
 8008b92:	2100      	movs	r1, #0
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f87f 	bl	8008c98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	220a      	movs	r2, #10
 8008baa:	761a      	strb	r2, [r3, #24]
      break;
 8008bac:	e055      	b.n	8008c5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	795b      	ldrb	r3, [r3, #5]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fbe1 	bl	800937c <USBH_LL_GetURBState>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d105      	bne.n	8008bd0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	220d      	movs	r2, #13
 8008bcc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008bce:	e043      	b.n	8008c58 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d103      	bne.n	8008bde <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2209      	movs	r2, #9
 8008bda:	761a      	strb	r2, [r3, #24]
      break;
 8008bdc:	e03c      	b.n	8008c58 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d139      	bne.n	8008c58 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	220b      	movs	r2, #11
 8008be8:	761a      	strb	r2, [r3, #24]
      break;
 8008bea:	e035      	b.n	8008c58 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	7e5b      	ldrb	r3, [r3, #25]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	765a      	strb	r2, [r3, #25]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	7e5b      	ldrb	r3, [r3, #25]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d806      	bhi.n	8008c0e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008c0c:	e025      	b.n	8008c5a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c14:	2106      	movs	r1, #6
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	795b      	ldrb	r3, [r3, #5]
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f90c 	bl	8008e44 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f906 	bl	8008e44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	73fb      	strb	r3, [r7, #15]
      break;
 8008c42:	e00a      	b.n	8008c5a <USBH_HandleControl+0x2de>

    default:
      break;
 8008c44:	bf00      	nop
 8008c46:	e008      	b.n	8008c5a <USBH_HandleControl+0x2de>
      break;
 8008c48:	bf00      	nop
 8008c4a:	e006      	b.n	8008c5a <USBH_HandleControl+0x2de>
      break;
 8008c4c:	bf00      	nop
 8008c4e:	e004      	b.n	8008c5a <USBH_HandleControl+0x2de>
      break;
 8008c50:	bf00      	nop
 8008c52:	e002      	b.n	8008c5a <USBH_HandleControl+0x2de>
      break;
 8008c54:	bf00      	nop
 8008c56:	e000      	b.n	8008c5a <USBH_HandleControl+0x2de>
      break;
 8008c58:	bf00      	nop
  }

  return status;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af04      	add	r7, sp, #16
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c72:	79f9      	ldrb	r1, [r7, #7]
 8008c74:	2300      	movs	r3, #0
 8008c76:	9303      	str	r3, [sp, #12]
 8008c78:	2308      	movs	r3, #8
 8008c7a:	9302      	str	r3, [sp, #8]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	2300      	movs	r3, #0
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	2300      	movs	r3, #0
 8008c86:	2200      	movs	r2, #0
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fb46 	bl	800931a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b088      	sub	sp, #32
 8008c9c:	af04      	add	r7, sp, #16
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	80fb      	strh	r3, [r7, #6]
 8008caa:	4613      	mov	r3, r2
 8008cac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008cbc:	7979      	ldrb	r1, [r7, #5]
 8008cbe:	7e3b      	ldrb	r3, [r7, #24]
 8008cc0:	9303      	str	r3, [sp, #12]
 8008cc2:	88fb      	ldrh	r3, [r7, #6]
 8008cc4:	9302      	str	r3, [sp, #8]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	2301      	movs	r3, #1
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fb21 	bl	800931a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b088      	sub	sp, #32
 8008ce6:	af04      	add	r7, sp, #16
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	4611      	mov	r1, r2
 8008cee:	461a      	mov	r2, r3
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	80fb      	strh	r3, [r7, #6]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008cf8:	7979      	ldrb	r1, [r7, #5]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9303      	str	r3, [sp, #12]
 8008cfe:	88fb      	ldrh	r3, [r7, #6]
 8008d00:	9302      	str	r3, [sp, #8]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	2301      	movs	r3, #1
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fb03 	bl	800931a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008d14:	2300      	movs	r3, #0

}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b088      	sub	sp, #32
 8008d22:	af04      	add	r7, sp, #16
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	4611      	mov	r1, r2
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	80fb      	strh	r3, [r7, #6]
 8008d30:	4613      	mov	r3, r2
 8008d32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d42:	7979      	ldrb	r1, [r7, #5]
 8008d44:	7e3b      	ldrb	r3, [r7, #24]
 8008d46:	9303      	str	r3, [sp, #12]
 8008d48:	88fb      	ldrh	r3, [r7, #6]
 8008d4a:	9302      	str	r3, [sp, #8]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	2301      	movs	r3, #1
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	2302      	movs	r3, #2
 8008d56:	2200      	movs	r2, #0
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fade 	bl	800931a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af04      	add	r7, sp, #16
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	460b      	mov	r3, r1
 8008d78:	80fb      	strh	r3, [r7, #6]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d7e:	7979      	ldrb	r1, [r7, #5]
 8008d80:	2300      	movs	r3, #0
 8008d82:	9303      	str	r3, [sp, #12]
 8008d84:	88fb      	ldrh	r3, [r7, #6]
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	9301      	str	r3, [sp, #4]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	2302      	movs	r3, #2
 8008d92:	2201      	movs	r2, #1
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 fac0 	bl	800931a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af04      	add	r7, sp, #16
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	461a      	mov	r2, r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	70fb      	strb	r3, [r7, #3]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70bb      	strb	r3, [r7, #2]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008dbe:	7878      	ldrb	r0, [r7, #1]
 8008dc0:	78ba      	ldrb	r2, [r7, #2]
 8008dc2:	78f9      	ldrb	r1, [r7, #3]
 8008dc4:	8b3b      	ldrh	r3, [r7, #24]
 8008dc6:	9302      	str	r3, [sp, #8]
 8008dc8:	7d3b      	ldrb	r3, [r7, #20]
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	7c3b      	ldrb	r3, [r7, #16]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fa53 	bl	800927e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa72 	bl	80092dc <USBH_LL_ClosePipe>

  return USBH_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f836 	bl	8008e80 <USBH_GetFreePipe>
 8008e14:	4603      	mov	r3, r0
 8008e16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008e18:	89fb      	ldrh	r3, [r7, #14]
 8008e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00a      	beq.n	8008e38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	89fb      	ldrh	r3, [r7, #14]
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	33e0      	adds	r3, #224	; 0xe0
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	440b      	add	r3, r1
 8008e36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008e38:	89fb      	ldrh	r3, [r7, #14]
 8008e3a:	b2db      	uxtb	r3, r3
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	2b0a      	cmp	r3, #10
 8008e54:	d80d      	bhi.n	8008e72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	33e0      	adds	r3, #224	; 0xe0
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	78fb      	ldrb	r3, [r7, #3]
 8008e64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	33e0      	adds	r3, #224	; 0xe0
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e00f      	b.n	8008eb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	33e0      	adds	r3, #224	; 0xe0
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	e007      	b.n	8008ebc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	73fb      	strb	r3, [r7, #15]
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b0a      	cmp	r3, #10
 8008eb6:	d9ec      	bls.n	8008e92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	490e      	ldr	r1, [pc, #56]	; (8008f08 <MX_USB_HOST_Init+0x40>)
 8008ed0:	480e      	ldr	r0, [pc, #56]	; (8008f0c <MX_USB_HOST_Init+0x44>)
 8008ed2:	f7fe fca1 	bl	8007818 <USBH_Init>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008edc:	f7f7 ffea 	bl	8000eb4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008ee0:	490b      	ldr	r1, [pc, #44]	; (8008f10 <MX_USB_HOST_Init+0x48>)
 8008ee2:	480a      	ldr	r0, [pc, #40]	; (8008f0c <MX_USB_HOST_Init+0x44>)
 8008ee4:	f7fe fd26 	bl	8007934 <USBH_RegisterClass>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008eee:	f7f7 ffe1 	bl	8000eb4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008ef2:	4806      	ldr	r0, [pc, #24]	; (8008f0c <MX_USB_HOST_Init+0x44>)
 8008ef4:	f7fe fdaa 	bl	8007a4c <USBH_Start>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008efe:	f7f7 ffd9 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008f02:	bf00      	nop
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	08008f29 	.word	0x08008f29
 8008f0c:	20000348 	.word	0x20000348
 8008f10:	2000000c 	.word	0x2000000c

08008f14 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008f18:	4802      	ldr	r0, [pc, #8]	; (8008f24 <MX_USB_HOST_Process+0x10>)
 8008f1a:	f7fe fda7 	bl	8007a6c <USBH_Process>
}
 8008f1e:	bf00      	nop
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000348 	.word	0x20000348

08008f28 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d819      	bhi.n	8008f70 <USBH_UserProcess+0x48>
 8008f3c:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <USBH_UserProcess+0x1c>)
 8008f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	08008f71 	.word	0x08008f71
 8008f48:	08008f61 	.word	0x08008f61
 8008f4c:	08008f71 	.word	0x08008f71
 8008f50:	08008f69 	.word	0x08008f69
 8008f54:	08008f59 	.word	0x08008f59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008f58:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <USBH_UserProcess+0x58>)
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	701a      	strb	r2, [r3, #0]
  break;
 8008f5e:	e008      	b.n	8008f72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008f60:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <USBH_UserProcess+0x58>)
 8008f62:	2202      	movs	r2, #2
 8008f64:	701a      	strb	r2, [r3, #0]
  break;
 8008f66:	e004      	b.n	8008f72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <USBH_UserProcess+0x58>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	701a      	strb	r2, [r3, #0]
  break;
 8008f6e:	e000      	b.n	8008f72 <USBH_UserProcess+0x4a>

  default:
  break;
 8008f70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	20000108 	.word	0x20000108

08008f84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08a      	sub	sp, #40	; 0x28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f8c:	f107 0314 	add.w	r3, r7, #20
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	605a      	str	r2, [r3, #4]
 8008f96:	609a      	str	r2, [r3, #8]
 8008f98:	60da      	str	r2, [r3, #12]
 8008f9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fa4:	d147      	bne.n	8009036 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	4b25      	ldr	r3, [pc, #148]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	4a24      	ldr	r2, [pc, #144]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 8008fb0:	f043 0301 	orr.w	r3, r3, #1
 8008fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8008fb6:	4b22      	ldr	r3, [pc, #136]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	613b      	str	r3, [r7, #16]
 8008fc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	481b      	ldr	r0, [pc, #108]	; (8009044 <HAL_HCD_MspInit+0xc0>)
 8008fd8:	f7f8 fe98 	bl	8001d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008fdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fea:	2300      	movs	r3, #0
 8008fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fee:	230a      	movs	r3, #10
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ff2:	f107 0314 	add.w	r3, r7, #20
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4812      	ldr	r0, [pc, #72]	; (8009044 <HAL_HCD_MspInit+0xc0>)
 8008ffa:	f7f8 fe87 	bl	8001d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 8009000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009002:	4a0f      	ldr	r2, [pc, #60]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 8009004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009008:	6353      	str	r3, [r2, #52]	; 0x34
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	4a0b      	ldr	r2, [pc, #44]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 8009014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009018:	6453      	str	r3, [r2, #68]	; 0x44
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <HAL_HCD_MspInit+0xbc>)
 800901c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009026:	2200      	movs	r2, #0
 8009028:	2100      	movs	r1, #0
 800902a:	2043      	movs	r0, #67	; 0x43
 800902c:	f7f8 fac7 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009030:	2043      	movs	r0, #67	; 0x43
 8009032:	f7f8 fae0 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009036:	bf00      	nop
 8009038:	3728      	adds	r7, #40	; 0x28
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	40023800 	.word	0x40023800
 8009044:	40020000 	.word	0x40020000

08009048 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff f8db 	bl	8008212 <USBH_LL_IncTimer>
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff f913 	bl	800829e <USBH_LL_Connect>
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff f91c 	bl	80082cc <USBH_LL_Disconnect>
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
 80090a8:	4613      	mov	r3, r2
 80090aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff f8cd 	bl	8008266 <USBH_LL_PortEnabled>
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff f8cd 	bl	8008282 <USBH_LL_PortDisabled>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d12a      	bne.n	8009158 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009102:	4a18      	ldr	r2, [pc, #96]	; (8009164 <USBH_LL_Init+0x74>)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a15      	ldr	r2, [pc, #84]	; (8009164 <USBH_LL_Init+0x74>)
 800910e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009112:	4b14      	ldr	r3, [pc, #80]	; (8009164 <USBH_LL_Init+0x74>)
 8009114:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009118:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800911a:	4b12      	ldr	r3, [pc, #72]	; (8009164 <USBH_LL_Init+0x74>)
 800911c:	2208      	movs	r2, #8
 800911e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009120:	4b10      	ldr	r3, [pc, #64]	; (8009164 <USBH_LL_Init+0x74>)
 8009122:	2201      	movs	r2, #1
 8009124:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009126:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <USBH_LL_Init+0x74>)
 8009128:	2200      	movs	r2, #0
 800912a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800912c:	4b0d      	ldr	r3, [pc, #52]	; (8009164 <USBH_LL_Init+0x74>)
 800912e:	2202      	movs	r2, #2
 8009130:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009132:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <USBH_LL_Init+0x74>)
 8009134:	2200      	movs	r2, #0
 8009136:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009138:	480a      	ldr	r0, [pc, #40]	; (8009164 <USBH_LL_Init+0x74>)
 800913a:	f7f8 ff9c 	bl	8002076 <HAL_HCD_Init>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009144:	f7f7 feb6 	bl	8000eb4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009148:	4806      	ldr	r0, [pc, #24]	; (8009164 <USBH_LL_Init+0x74>)
 800914a:	f7f9 fb79 	bl	8002840 <HAL_HCD_GetCurrentFrame>
 800914e:	4603      	mov	r3, r0
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff f84e 	bl	80081f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20000720 	.word	0x20000720

08009168 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800917e:	4618      	mov	r0, r3
 8009180:	f7f9 fae8 	bl	8002754 <HAL_HCD_Start>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f95c 	bl	8009448 <USBH_Get_USB_Status>
 8009190:	4603      	mov	r3, r0
 8009192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009194:	7bbb      	ldrb	r3, [r7, #14]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7f9 faf0 	bl	800279a <HAL_HCD_Stop>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 f941 	bl	8009448 <USBH_Get_USB_Status>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80091dc:	2301      	movs	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7f9 fb38 	bl	800285c <HAL_HCD_GetCurrentSpeed>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d00c      	beq.n	800920c <USBH_LL_GetSpeed+0x38>
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d80d      	bhi.n	8009212 <USBH_LL_GetSpeed+0x3e>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <USBH_LL_GetSpeed+0x2c>
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d003      	beq.n	8009206 <USBH_LL_GetSpeed+0x32>
 80091fe:	e008      	b.n	8009212 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]
    break;
 8009204:	e008      	b.n	8009218 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009206:	2301      	movs	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]
    break;
 800920a:	e005      	b.n	8009218 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800920c:	2302      	movs	r3, #2
 800920e:	73fb      	strb	r3, [r7, #15]
    break;
 8009210:	e002      	b.n	8009218 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009212:	2301      	movs	r3, #1
 8009214:	73fb      	strb	r3, [r7, #15]
    break;
 8009216:	bf00      	nop
  }
  return  speed;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009238:	4618      	mov	r0, r3
 800923a:	f7f9 facb 	bl	80027d4 <HAL_HCD_ResetPort>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f8ff 	bl	8009448 <USBH_Get_USB_Status>
 800924a:	4603      	mov	r3, r0
 800924c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7f9 fad2 	bl	8002818 <HAL_HCD_HC_GetXferCount>
 8009274:	4603      	mov	r3, r0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800927e:	b590      	push	{r4, r7, lr}
 8009280:	b089      	sub	sp, #36	; 0x24
 8009282:	af04      	add	r7, sp, #16
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	4608      	mov	r0, r1
 8009288:	4611      	mov	r1, r2
 800928a:	461a      	mov	r2, r3
 800928c:	4603      	mov	r3, r0
 800928e:	70fb      	strb	r3, [r7, #3]
 8009290:	460b      	mov	r3, r1
 8009292:	70bb      	strb	r3, [r7, #2]
 8009294:	4613      	mov	r3, r2
 8009296:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80092a6:	787c      	ldrb	r4, [r7, #1]
 80092a8:	78ba      	ldrb	r2, [r7, #2]
 80092aa:	78f9      	ldrb	r1, [r7, #3]
 80092ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092ae:	9302      	str	r3, [sp, #8]
 80092b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	4623      	mov	r3, r4
 80092be:	f7f8 ff3c 	bl	800213a <HAL_HCD_HC_Init>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 f8bd 	bl	8009448 <USBH_Get_USB_Status>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd90      	pop	{r4, r7, pc}

080092dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f8 ffac 	bl	8002258 <HAL_HCD_HC_Halt>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009304:	7bfb      	ldrb	r3, [r7, #15]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f89e 	bl	8009448 <USBH_Get_USB_Status>
 800930c:	4603      	mov	r3, r0
 800930e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009310:	7bbb      	ldrb	r3, [r7, #14]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800931a:	b590      	push	{r4, r7, lr}
 800931c:	b089      	sub	sp, #36	; 0x24
 800931e:	af04      	add	r7, sp, #16
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	4608      	mov	r0, r1
 8009324:	4611      	mov	r1, r2
 8009326:	461a      	mov	r2, r3
 8009328:	4603      	mov	r3, r0
 800932a:	70fb      	strb	r3, [r7, #3]
 800932c:	460b      	mov	r3, r1
 800932e:	70bb      	strb	r3, [r7, #2]
 8009330:	4613      	mov	r3, r2
 8009332:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009342:	787c      	ldrb	r4, [r7, #1]
 8009344:	78ba      	ldrb	r2, [r7, #2]
 8009346:	78f9      	ldrb	r1, [r7, #3]
 8009348:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009350:	9302      	str	r3, [sp, #8]
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	4623      	mov	r3, r4
 800935e:	f7f8 ff9f 	bl	80022a0 <HAL_HCD_HC_SubmitRequest>
 8009362:	4603      	mov	r3, r0
 8009364:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f86d 	bl	8009448 <USBH_Get_USB_Status>
 800936e:	4603      	mov	r3, r0
 8009370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009372:	7bbb      	ldrb	r3, [r7, #14]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	bd90      	pop	{r4, r7, pc}

0800937c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800938e:	78fa      	ldrb	r2, [r7, #3]
 8009390:	4611      	mov	r1, r2
 8009392:	4618      	mov	r0, r3
 8009394:	f7f9 fa2c 	bl	80027f0 <HAL_HCD_HC_GetURBState>
 8009398:	4603      	mov	r3, r0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d103      	bne.n	80093c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f870 	bl	80094a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80093c0:	20c8      	movs	r0, #200	; 0xc8
 80093c2:	f7f7 fffd 	bl	80013c0 <HAL_Delay>
  return USBH_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	70fb      	strb	r3, [r7, #3]
 80093dc:	4613      	mov	r3, r2
 80093de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	212c      	movs	r1, #44	; 0x2c
 80093ee:	fb01 f303 	mul.w	r3, r1, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	333b      	adds	r3, #59	; 0x3b
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	212c      	movs	r1, #44	; 0x2c
 8009402:	fb01 f303 	mul.w	r3, r1, r3
 8009406:	4413      	add	r3, r2
 8009408:	3354      	adds	r3, #84	; 0x54
 800940a:	78ba      	ldrb	r2, [r7, #2]
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	e008      	b.n	8009422 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	212c      	movs	r1, #44	; 0x2c
 8009416:	fb01 f303 	mul.w	r3, r1, r3
 800941a:	4413      	add	r3, r2
 800941c:	3355      	adds	r3, #85	; 0x55
 800941e:	78ba      	ldrb	r2, [r7, #2]
 8009420:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f7 ffc1 	bl	80013c0 <HAL_Delay>
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	2b03      	cmp	r3, #3
 800945a:	d817      	bhi.n	800948c <USBH_Get_USB_Status+0x44>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <USBH_Get_USB_Status+0x1c>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009475 	.word	0x08009475
 8009468:	0800947b 	.word	0x0800947b
 800946c:	08009481 	.word	0x08009481
 8009470:	08009487 	.word	0x08009487
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
    break;
 8009478:	e00b      	b.n	8009492 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800947a:	2302      	movs	r3, #2
 800947c:	73fb      	strb	r3, [r7, #15]
    break;
 800947e:	e008      	b.n	8009492 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009480:	2301      	movs	r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]
    break;
 8009484:	e005      	b.n	8009492 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009486:	2302      	movs	r3, #2
 8009488:	73fb      	strb	r3, [r7, #15]
    break;
 800948a:	e002      	b.n	8009492 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800948c:	2302      	movs	r3, #2
 800948e:	73fb      	strb	r3, [r7, #15]
    break;
 8009490:	bf00      	nop
  }
  return usb_status;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d102      	bne.n	80094ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80094b4:	2301      	movs	r3, #1
 80094b6:	73fb      	strb	r3, [r7, #15]
 80094b8:	e001      	b.n	80094be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	461a      	mov	r2, r3
 80094c2:	2101      	movs	r1, #1
 80094c4:	4803      	ldr	r0, [pc, #12]	; (80094d4 <MX_DriverVbusFS+0x34>)
 80094c6:	f7f8 fdbd 	bl	8002044 <HAL_GPIO_WritePin>
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40020800 	.word	0x40020800

080094d8 <sinf>:
 80094d8:	ee10 3a10 	vmov	r3, s0
 80094dc:	b507      	push	{r0, r1, r2, lr}
 80094de:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <sinf+0x7c>)
 80094e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094e4:	4293      	cmp	r3, r2
 80094e6:	dc05      	bgt.n	80094f4 <sinf+0x1c>
 80094e8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8009558 <sinf+0x80>
 80094ec:	2000      	movs	r0, #0
 80094ee:	f000 fc5b 	bl	8009da8 <__kernel_sinf>
 80094f2:	e004      	b.n	80094fe <sinf+0x26>
 80094f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80094f8:	db04      	blt.n	8009504 <sinf+0x2c>
 80094fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80094fe:	b003      	add	sp, #12
 8009500:	f85d fb04 	ldr.w	pc, [sp], #4
 8009504:	4668      	mov	r0, sp
 8009506:	f000 f829 	bl	800955c <__ieee754_rem_pio2f>
 800950a:	f000 0003 	and.w	r0, r0, #3
 800950e:	2801      	cmp	r0, #1
 8009510:	d008      	beq.n	8009524 <sinf+0x4c>
 8009512:	2802      	cmp	r0, #2
 8009514:	d00d      	beq.n	8009532 <sinf+0x5a>
 8009516:	b9b0      	cbnz	r0, 8009546 <sinf+0x6e>
 8009518:	eddd 0a01 	vldr	s1, [sp, #4]
 800951c:	ed9d 0a00 	vldr	s0, [sp]
 8009520:	2001      	movs	r0, #1
 8009522:	e7e4      	b.n	80094ee <sinf+0x16>
 8009524:	eddd 0a01 	vldr	s1, [sp, #4]
 8009528:	ed9d 0a00 	vldr	s0, [sp]
 800952c:	f000 f952 	bl	80097d4 <__kernel_cosf>
 8009530:	e7e5      	b.n	80094fe <sinf+0x26>
 8009532:	eddd 0a01 	vldr	s1, [sp, #4]
 8009536:	ed9d 0a00 	vldr	s0, [sp]
 800953a:	2001      	movs	r0, #1
 800953c:	f000 fc34 	bl	8009da8 <__kernel_sinf>
 8009540:	eeb1 0a40 	vneg.f32	s0, s0
 8009544:	e7db      	b.n	80094fe <sinf+0x26>
 8009546:	eddd 0a01 	vldr	s1, [sp, #4]
 800954a:	ed9d 0a00 	vldr	s0, [sp]
 800954e:	f000 f941 	bl	80097d4 <__kernel_cosf>
 8009552:	e7f5      	b.n	8009540 <sinf+0x68>
 8009554:	3f490fd8 	.word	0x3f490fd8
 8009558:	00000000 	.word	0x00000000

0800955c <__ieee754_rem_pio2f>:
 800955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800955e:	ee10 6a10 	vmov	r6, s0
 8009562:	4b8e      	ldr	r3, [pc, #568]	; (800979c <__ieee754_rem_pio2f+0x240>)
 8009564:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009568:	429d      	cmp	r5, r3
 800956a:	b087      	sub	sp, #28
 800956c:	eef0 7a40 	vmov.f32	s15, s0
 8009570:	4604      	mov	r4, r0
 8009572:	dc05      	bgt.n	8009580 <__ieee754_rem_pio2f+0x24>
 8009574:	2300      	movs	r3, #0
 8009576:	ed80 0a00 	vstr	s0, [r0]
 800957a:	6043      	str	r3, [r0, #4]
 800957c:	2000      	movs	r0, #0
 800957e:	e01a      	b.n	80095b6 <__ieee754_rem_pio2f+0x5a>
 8009580:	4b87      	ldr	r3, [pc, #540]	; (80097a0 <__ieee754_rem_pio2f+0x244>)
 8009582:	429d      	cmp	r5, r3
 8009584:	dc46      	bgt.n	8009614 <__ieee754_rem_pio2f+0xb8>
 8009586:	2e00      	cmp	r6, #0
 8009588:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80097a4 <__ieee754_rem_pio2f+0x248>
 800958c:	4b86      	ldr	r3, [pc, #536]	; (80097a8 <__ieee754_rem_pio2f+0x24c>)
 800958e:	f025 050f 	bic.w	r5, r5, #15
 8009592:	dd1f      	ble.n	80095d4 <__ieee754_rem_pio2f+0x78>
 8009594:	429d      	cmp	r5, r3
 8009596:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800959a:	d00e      	beq.n	80095ba <__ieee754_rem_pio2f+0x5e>
 800959c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80097ac <__ieee754_rem_pio2f+0x250>
 80095a0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80095a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80095a8:	ed80 0a00 	vstr	s0, [r0]
 80095ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095b0:	2001      	movs	r0, #1
 80095b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80095b6:	b007      	add	sp, #28
 80095b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ba:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80097b0 <__ieee754_rem_pio2f+0x254>
 80095be:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80097b4 <__ieee754_rem_pio2f+0x258>
 80095c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80095c6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80095ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095ce:	edc0 6a00 	vstr	s13, [r0]
 80095d2:	e7eb      	b.n	80095ac <__ieee754_rem_pio2f+0x50>
 80095d4:	429d      	cmp	r5, r3
 80095d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80095da:	d00e      	beq.n	80095fa <__ieee754_rem_pio2f+0x9e>
 80095dc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80097ac <__ieee754_rem_pio2f+0x250>
 80095e0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80095e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80095e8:	ed80 0a00 	vstr	s0, [r0]
 80095ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095f0:	f04f 30ff 	mov.w	r0, #4294967295
 80095f4:	edc4 7a01 	vstr	s15, [r4, #4]
 80095f8:	e7dd      	b.n	80095b6 <__ieee754_rem_pio2f+0x5a>
 80095fa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80097b0 <__ieee754_rem_pio2f+0x254>
 80095fe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80097b4 <__ieee754_rem_pio2f+0x258>
 8009602:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009606:	ee77 6a87 	vadd.f32	s13, s15, s14
 800960a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800960e:	edc0 6a00 	vstr	s13, [r0]
 8009612:	e7eb      	b.n	80095ec <__ieee754_rem_pio2f+0x90>
 8009614:	4b68      	ldr	r3, [pc, #416]	; (80097b8 <__ieee754_rem_pio2f+0x25c>)
 8009616:	429d      	cmp	r5, r3
 8009618:	dc72      	bgt.n	8009700 <__ieee754_rem_pio2f+0x1a4>
 800961a:	f000 fc0d 	bl	8009e38 <fabsf>
 800961e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80097bc <__ieee754_rem_pio2f+0x260>
 8009622:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009626:	eee0 7a07 	vfma.f32	s15, s0, s14
 800962a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800962e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009632:	ee17 0a90 	vmov	r0, s15
 8009636:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80097a4 <__ieee754_rem_pio2f+0x248>
 800963a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800963e:	281f      	cmp	r0, #31
 8009640:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80097ac <__ieee754_rem_pio2f+0x250>
 8009644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009648:	eeb1 6a47 	vneg.f32	s12, s14
 800964c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009650:	ee16 2a90 	vmov	r2, s13
 8009654:	dc1c      	bgt.n	8009690 <__ieee754_rem_pio2f+0x134>
 8009656:	495a      	ldr	r1, [pc, #360]	; (80097c0 <__ieee754_rem_pio2f+0x264>)
 8009658:	1e47      	subs	r7, r0, #1
 800965a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800965e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009662:	428b      	cmp	r3, r1
 8009664:	d014      	beq.n	8009690 <__ieee754_rem_pio2f+0x134>
 8009666:	6022      	str	r2, [r4, #0]
 8009668:	ed94 7a00 	vldr	s14, [r4]
 800966c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009670:	2e00      	cmp	r6, #0
 8009672:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009676:	ed84 0a01 	vstr	s0, [r4, #4]
 800967a:	da9c      	bge.n	80095b6 <__ieee754_rem_pio2f+0x5a>
 800967c:	eeb1 7a47 	vneg.f32	s14, s14
 8009680:	eeb1 0a40 	vneg.f32	s0, s0
 8009684:	ed84 7a00 	vstr	s14, [r4]
 8009688:	ed84 0a01 	vstr	s0, [r4, #4]
 800968c:	4240      	negs	r0, r0
 800968e:	e792      	b.n	80095b6 <__ieee754_rem_pio2f+0x5a>
 8009690:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009694:	15eb      	asrs	r3, r5, #23
 8009696:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800969a:	2d08      	cmp	r5, #8
 800969c:	dde3      	ble.n	8009666 <__ieee754_rem_pio2f+0x10a>
 800969e:	eddf 7a44 	vldr	s15, [pc, #272]	; 80097b0 <__ieee754_rem_pio2f+0x254>
 80096a2:	eef0 6a40 	vmov.f32	s13, s0
 80096a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80096aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80096ae:	eea6 0a27 	vfma.f32	s0, s12, s15
 80096b2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80097b4 <__ieee754_rem_pio2f+0x258>
 80096b6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80096ba:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80096be:	eef0 7a40 	vmov.f32	s15, s0
 80096c2:	ee15 2a90 	vmov	r2, s11
 80096c6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80096ca:	1a5b      	subs	r3, r3, r1
 80096cc:	2b19      	cmp	r3, #25
 80096ce:	dc04      	bgt.n	80096da <__ieee754_rem_pio2f+0x17e>
 80096d0:	edc4 5a00 	vstr	s11, [r4]
 80096d4:	eeb0 0a66 	vmov.f32	s0, s13
 80096d8:	e7c6      	b.n	8009668 <__ieee754_rem_pio2f+0x10c>
 80096da:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80097c4 <__ieee754_rem_pio2f+0x268>
 80096de:	eeb0 0a66 	vmov.f32	s0, s13
 80096e2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80096e6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80096ea:	eddf 6a37 	vldr	s13, [pc, #220]	; 80097c8 <__ieee754_rem_pio2f+0x26c>
 80096ee:	eee6 7a25 	vfma.f32	s15, s12, s11
 80096f2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80096f6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80096fa:	ed84 7a00 	vstr	s14, [r4]
 80096fe:	e7b3      	b.n	8009668 <__ieee754_rem_pio2f+0x10c>
 8009700:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009704:	db06      	blt.n	8009714 <__ieee754_rem_pio2f+0x1b8>
 8009706:	ee70 7a40 	vsub.f32	s15, s0, s0
 800970a:	edc0 7a01 	vstr	s15, [r0, #4]
 800970e:	edc0 7a00 	vstr	s15, [r0]
 8009712:	e733      	b.n	800957c <__ieee754_rem_pio2f+0x20>
 8009714:	15ea      	asrs	r2, r5, #23
 8009716:	3a86      	subs	r2, #134	; 0x86
 8009718:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800971c:	ee07 3a90 	vmov	s15, r3
 8009720:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009724:	eddf 6a29 	vldr	s13, [pc, #164]	; 80097cc <__ieee754_rem_pio2f+0x270>
 8009728:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800972c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009730:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009734:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009738:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800973c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009744:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009748:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800974c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009754:	edcd 7a05 	vstr	s15, [sp, #20]
 8009758:	d11e      	bne.n	8009798 <__ieee754_rem_pio2f+0x23c>
 800975a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009762:	bf14      	ite	ne
 8009764:	2302      	movne	r3, #2
 8009766:	2301      	moveq	r3, #1
 8009768:	4919      	ldr	r1, [pc, #100]	; (80097d0 <__ieee754_rem_pio2f+0x274>)
 800976a:	9101      	str	r1, [sp, #4]
 800976c:	2102      	movs	r1, #2
 800976e:	9100      	str	r1, [sp, #0]
 8009770:	a803      	add	r0, sp, #12
 8009772:	4621      	mov	r1, r4
 8009774:	f000 f88e 	bl	8009894 <__kernel_rem_pio2f>
 8009778:	2e00      	cmp	r6, #0
 800977a:	f6bf af1c 	bge.w	80095b6 <__ieee754_rem_pio2f+0x5a>
 800977e:	edd4 7a00 	vldr	s15, [r4]
 8009782:	eef1 7a67 	vneg.f32	s15, s15
 8009786:	edc4 7a00 	vstr	s15, [r4]
 800978a:	edd4 7a01 	vldr	s15, [r4, #4]
 800978e:	eef1 7a67 	vneg.f32	s15, s15
 8009792:	edc4 7a01 	vstr	s15, [r4, #4]
 8009796:	e779      	b.n	800968c <__ieee754_rem_pio2f+0x130>
 8009798:	2303      	movs	r3, #3
 800979a:	e7e5      	b.n	8009768 <__ieee754_rem_pio2f+0x20c>
 800979c:	3f490fd8 	.word	0x3f490fd8
 80097a0:	4016cbe3 	.word	0x4016cbe3
 80097a4:	3fc90f80 	.word	0x3fc90f80
 80097a8:	3fc90fd0 	.word	0x3fc90fd0
 80097ac:	37354443 	.word	0x37354443
 80097b0:	37354400 	.word	0x37354400
 80097b4:	2e85a308 	.word	0x2e85a308
 80097b8:	43490f80 	.word	0x43490f80
 80097bc:	3f22f984 	.word	0x3f22f984
 80097c0:	0800a21c 	.word	0x0800a21c
 80097c4:	2e85a300 	.word	0x2e85a300
 80097c8:	248d3132 	.word	0x248d3132
 80097cc:	43800000 	.word	0x43800000
 80097d0:	0800a29c 	.word	0x0800a29c

080097d4 <__kernel_cosf>:
 80097d4:	ee10 3a10 	vmov	r3, s0
 80097d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80097e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80097e4:	da05      	bge.n	80097f2 <__kernel_cosf+0x1e>
 80097e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80097ea:	ee17 2a90 	vmov	r2, s15
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	d03d      	beq.n	800986e <__kernel_cosf+0x9a>
 80097f2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80097f6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009874 <__kernel_cosf+0xa0>
 80097fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009878 <__kernel_cosf+0xa4>
 80097fe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800987c <__kernel_cosf+0xa8>
 8009802:	4a1f      	ldr	r2, [pc, #124]	; (8009880 <__kernel_cosf+0xac>)
 8009804:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009808:	4293      	cmp	r3, r2
 800980a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009884 <__kernel_cosf+0xb0>
 800980e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009812:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009888 <__kernel_cosf+0xb4>
 8009816:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800981a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800988c <__kernel_cosf+0xb8>
 800981e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009822:	eeb0 7a66 	vmov.f32	s14, s13
 8009826:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800982a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800982e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8009832:	ee67 6a25 	vmul.f32	s13, s14, s11
 8009836:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800983a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800983e:	dc04      	bgt.n	800984a <__kernel_cosf+0x76>
 8009840:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009844:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009848:	4770      	bx	lr
 800984a:	4a11      	ldr	r2, [pc, #68]	; (8009890 <__kernel_cosf+0xbc>)
 800984c:	4293      	cmp	r3, r2
 800984e:	bfda      	itte	le
 8009850:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009854:	ee06 3a90 	vmovle	s13, r3
 8009858:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800985c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009860:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009868:	ee30 0a67 	vsub.f32	s0, s0, s15
 800986c:	4770      	bx	lr
 800986e:	eeb0 0a46 	vmov.f32	s0, s12
 8009872:	4770      	bx	lr
 8009874:	ad47d74e 	.word	0xad47d74e
 8009878:	310f74f6 	.word	0x310f74f6
 800987c:	3d2aaaab 	.word	0x3d2aaaab
 8009880:	3e999999 	.word	0x3e999999
 8009884:	b493f27c 	.word	0xb493f27c
 8009888:	37d00d01 	.word	0x37d00d01
 800988c:	bab60b61 	.word	0xbab60b61
 8009890:	3f480000 	.word	0x3f480000

08009894 <__kernel_rem_pio2f>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	ed2d 8b04 	vpush	{d8-d9}
 800989c:	b0d7      	sub	sp, #348	; 0x15c
 800989e:	4616      	mov	r6, r2
 80098a0:	4698      	mov	r8, r3
 80098a2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80098a4:	4bbb      	ldr	r3, [pc, #748]	; (8009b94 <__kernel_rem_pio2f+0x300>)
 80098a6:	9001      	str	r0, [sp, #4]
 80098a8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80098ac:	1d33      	adds	r3, r6, #4
 80098ae:	460d      	mov	r5, r1
 80098b0:	f108 39ff 	add.w	r9, r8, #4294967295
 80098b4:	db29      	blt.n	800990a <__kernel_rem_pio2f+0x76>
 80098b6:	1ef1      	subs	r1, r6, #3
 80098b8:	bf48      	it	mi
 80098ba:	1d31      	addmi	r1, r6, #4
 80098bc:	10c9      	asrs	r1, r1, #3
 80098be:	1c4c      	adds	r4, r1, #1
 80098c0:	00e3      	lsls	r3, r4, #3
 80098c2:	9302      	str	r3, [sp, #8]
 80098c4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80098c6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8009ba4 <__kernel_rem_pio2f+0x310>
 80098ca:	eba1 0009 	sub.w	r0, r1, r9
 80098ce:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80098d2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80098d6:	eb07 0c09 	add.w	ip, r7, r9
 80098da:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80098de:	2300      	movs	r3, #0
 80098e0:	4563      	cmp	r3, ip
 80098e2:	dd14      	ble.n	800990e <__kernel_rem_pio2f+0x7a>
 80098e4:	ab1a      	add	r3, sp, #104	; 0x68
 80098e6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80098ea:	46cc      	mov	ip, r9
 80098ec:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80098f0:	f1c8 0b01 	rsb	fp, r8, #1
 80098f4:	eb0b 020c 	add.w	r2, fp, ip
 80098f8:	4297      	cmp	r7, r2
 80098fa:	db27      	blt.n	800994c <__kernel_rem_pio2f+0xb8>
 80098fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009900:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009ba4 <__kernel_rem_pio2f+0x310>
 8009904:	4618      	mov	r0, r3
 8009906:	2200      	movs	r2, #0
 8009908:	e016      	b.n	8009938 <__kernel_rem_pio2f+0xa4>
 800990a:	2100      	movs	r1, #0
 800990c:	e7d7      	b.n	80098be <__kernel_rem_pio2f+0x2a>
 800990e:	42d8      	cmn	r0, r3
 8009910:	bf5d      	ittte	pl
 8009912:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8009916:	ee07 2a90 	vmovpl	s15, r2
 800991a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800991e:	eef0 7a47 	vmovmi.f32	s15, s14
 8009922:	ecea 7a01 	vstmia	sl!, {s15}
 8009926:	3301      	adds	r3, #1
 8009928:	e7da      	b.n	80098e0 <__kernel_rem_pio2f+0x4c>
 800992a:	ecfe 6a01 	vldmia	lr!, {s13}
 800992e:	ed90 7a00 	vldr	s14, [r0]
 8009932:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009936:	3201      	adds	r2, #1
 8009938:	454a      	cmp	r2, r9
 800993a:	f1a0 0004 	sub.w	r0, r0, #4
 800993e:	ddf4      	ble.n	800992a <__kernel_rem_pio2f+0x96>
 8009940:	ecea 7a01 	vstmia	sl!, {s15}
 8009944:	3304      	adds	r3, #4
 8009946:	f10c 0c01 	add.w	ip, ip, #1
 800994a:	e7d3      	b.n	80098f4 <__kernel_rem_pio2f+0x60>
 800994c:	ab06      	add	r3, sp, #24
 800994e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009956:	eddf 8a92 	vldr	s17, [pc, #584]	; 8009ba0 <__kernel_rem_pio2f+0x30c>
 800995a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8009b9c <__kernel_rem_pio2f+0x308>
 800995e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	46ba      	mov	sl, r7
 8009966:	ab56      	add	r3, sp, #344	; 0x158
 8009968:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800996c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8009970:	ab06      	add	r3, sp, #24
 8009972:	4618      	mov	r0, r3
 8009974:	4652      	mov	r2, sl
 8009976:	2a00      	cmp	r2, #0
 8009978:	dc51      	bgt.n	8009a1e <__kernel_rem_pio2f+0x18a>
 800997a:	4620      	mov	r0, r4
 800997c:	9305      	str	r3, [sp, #20]
 800997e:	f000 faa5 	bl	8009ecc <scalbnf>
 8009982:	eeb0 8a40 	vmov.f32	s16, s0
 8009986:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800998a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800998e:	f000 fa5b 	bl	8009e48 <floorf>
 8009992:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009996:	eea0 8a67 	vfms.f32	s16, s0, s15
 800999a:	2c00      	cmp	r4, #0
 800999c:	9b05      	ldr	r3, [sp, #20]
 800999e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80099a2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80099a6:	edcd 7a00 	vstr	s15, [sp]
 80099aa:	ee38 8a40 	vsub.f32	s16, s16, s0
 80099ae:	dd4b      	ble.n	8009a48 <__kernel_rem_pio2f+0x1b4>
 80099b0:	f10a 3cff 	add.w	ip, sl, #4294967295
 80099b4:	aa06      	add	r2, sp, #24
 80099b6:	f1c4 0e08 	rsb	lr, r4, #8
 80099ba:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80099be:	ee17 1a90 	vmov	r1, s15
 80099c2:	fa42 f00e 	asr.w	r0, r2, lr
 80099c6:	4401      	add	r1, r0
 80099c8:	9100      	str	r1, [sp, #0]
 80099ca:	fa00 f00e 	lsl.w	r0, r0, lr
 80099ce:	a906      	add	r1, sp, #24
 80099d0:	1a12      	subs	r2, r2, r0
 80099d2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80099d6:	f1c4 0007 	rsb	r0, r4, #7
 80099da:	fa42 fb00 	asr.w	fp, r2, r0
 80099de:	f1bb 0f00 	cmp.w	fp, #0
 80099e2:	dd43      	ble.n	8009a6c <__kernel_rem_pio2f+0x1d8>
 80099e4:	9a00      	ldr	r2, [sp, #0]
 80099e6:	f04f 0e00 	mov.w	lr, #0
 80099ea:	3201      	adds	r2, #1
 80099ec:	9200      	str	r2, [sp, #0]
 80099ee:	4670      	mov	r0, lr
 80099f0:	45f2      	cmp	sl, lr
 80099f2:	dc6c      	bgt.n	8009ace <__kernel_rem_pio2f+0x23a>
 80099f4:	2c00      	cmp	r4, #0
 80099f6:	dd04      	ble.n	8009a02 <__kernel_rem_pio2f+0x16e>
 80099f8:	2c01      	cmp	r4, #1
 80099fa:	d079      	beq.n	8009af0 <__kernel_rem_pio2f+0x25c>
 80099fc:	2c02      	cmp	r4, #2
 80099fe:	f000 8082 	beq.w	8009b06 <__kernel_rem_pio2f+0x272>
 8009a02:	f1bb 0f02 	cmp.w	fp, #2
 8009a06:	d131      	bne.n	8009a6c <__kernel_rem_pio2f+0x1d8>
 8009a08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a0c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009a10:	b360      	cbz	r0, 8009a6c <__kernel_rem_pio2f+0x1d8>
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fa5a 	bl	8009ecc <scalbnf>
 8009a18:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009a1c:	e026      	b.n	8009a6c <__kernel_rem_pio2f+0x1d8>
 8009a1e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009a22:	3a01      	subs	r2, #1
 8009a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a28:	a942      	add	r1, sp, #264	; 0x108
 8009a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a2e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8009a32:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009a36:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009a3a:	eca0 0a01 	vstmia	r0!, {s0}
 8009a3e:	ed9c 0a00 	vldr	s0, [ip]
 8009a42:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009a46:	e796      	b.n	8009976 <__kernel_rem_pio2f+0xe2>
 8009a48:	d107      	bne.n	8009a5a <__kernel_rem_pio2f+0x1c6>
 8009a4a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8009a4e:	a906      	add	r1, sp, #24
 8009a50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009a54:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8009a58:	e7c1      	b.n	80099de <__kernel_rem_pio2f+0x14a>
 8009a5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009a5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a66:	da2f      	bge.n	8009ac8 <__kernel_rem_pio2f+0x234>
 8009a68:	f04f 0b00 	mov.w	fp, #0
 8009a6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a74:	f040 8098 	bne.w	8009ba8 <__kernel_rem_pio2f+0x314>
 8009a78:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a7c:	469c      	mov	ip, r3
 8009a7e:	2200      	movs	r2, #0
 8009a80:	45bc      	cmp	ip, r7
 8009a82:	da48      	bge.n	8009b16 <__kernel_rem_pio2f+0x282>
 8009a84:	2a00      	cmp	r2, #0
 8009a86:	d05f      	beq.n	8009b48 <__kernel_rem_pio2f+0x2b4>
 8009a88:	aa06      	add	r2, sp, #24
 8009a8a:	3c08      	subs	r4, #8
 8009a8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d07d      	beq.n	8009b90 <__kernel_rem_pio2f+0x2fc>
 8009a94:	4620      	mov	r0, r4
 8009a96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	f000 fa16 	bl	8009ecc <scalbnf>
 8009aa0:	9b01      	ldr	r3, [sp, #4]
 8009aa2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009ba0 <__kernel_rem_pio2f+0x30c>
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	2900      	cmp	r1, #0
 8009aaa:	f280 80af 	bge.w	8009c0c <__kernel_rem_pio2f+0x378>
 8009aae:	4618      	mov	r0, r3
 8009ab0:	2400      	movs	r4, #0
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	f2c0 80d0 	blt.w	8009c58 <__kernel_rem_pio2f+0x3c4>
 8009ab8:	a942      	add	r1, sp, #264	; 0x108
 8009aba:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8009abe:	4a36      	ldr	r2, [pc, #216]	; (8009b98 <__kernel_rem_pio2f+0x304>)
 8009ac0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8009ba4 <__kernel_rem_pio2f+0x310>
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	e0bb      	b.n	8009c40 <__kernel_rem_pio2f+0x3ac>
 8009ac8:	f04f 0b02 	mov.w	fp, #2
 8009acc:	e78a      	b.n	80099e4 <__kernel_rem_pio2f+0x150>
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	b948      	cbnz	r0, 8009ae6 <__kernel_rem_pio2f+0x252>
 8009ad2:	b11a      	cbz	r2, 8009adc <__kernel_rem_pio2f+0x248>
 8009ad4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f10e 0e01 	add.w	lr, lr, #1
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	e784      	b.n	80099f0 <__kernel_rem_pio2f+0x15c>
 8009ae6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	4602      	mov	r2, r0
 8009aee:	e7f5      	b.n	8009adc <__kernel_rem_pio2f+0x248>
 8009af0:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009af4:	ab06      	add	r3, sp, #24
 8009af6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afe:	aa06      	add	r2, sp, #24
 8009b00:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8009b04:	e77d      	b.n	8009a02 <__kernel_rem_pio2f+0x16e>
 8009b06:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009b0a:	ab06      	add	r3, sp, #24
 8009b0c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b14:	e7f3      	b.n	8009afe <__kernel_rem_pio2f+0x26a>
 8009b16:	a906      	add	r1, sp, #24
 8009b18:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8009b1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b20:	4302      	orrs	r2, r0
 8009b22:	e7ad      	b.n	8009a80 <__kernel_rem_pio2f+0x1ec>
 8009b24:	3001      	adds	r0, #1
 8009b26:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	d0fa      	beq.n	8009b24 <__kernel_rem_pio2f+0x290>
 8009b2e:	a91a      	add	r1, sp, #104	; 0x68
 8009b30:	eb0a 0208 	add.w	r2, sl, r8
 8009b34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009b38:	f10a 0301 	add.w	r3, sl, #1
 8009b3c:	eb0a 0100 	add.w	r1, sl, r0
 8009b40:	4299      	cmp	r1, r3
 8009b42:	da04      	bge.n	8009b4e <__kernel_rem_pio2f+0x2ba>
 8009b44:	468a      	mov	sl, r1
 8009b46:	e70e      	b.n	8009966 <__kernel_rem_pio2f+0xd2>
 8009b48:	9b04      	ldr	r3, [sp, #16]
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	e7eb      	b.n	8009b26 <__kernel_rem_pio2f+0x292>
 8009b4e:	9803      	ldr	r0, [sp, #12]
 8009b50:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009b54:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009b58:	9000      	str	r0, [sp, #0]
 8009b5a:	ee07 0a90 	vmov	s15, r0
 8009b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b62:	2000      	movs	r0, #0
 8009b64:	ece2 7a01 	vstmia	r2!, {s15}
 8009b68:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009ba4 <__kernel_rem_pio2f+0x310>
 8009b6c:	4696      	mov	lr, r2
 8009b6e:	4548      	cmp	r0, r9
 8009b70:	dd06      	ble.n	8009b80 <__kernel_rem_pio2f+0x2ec>
 8009b72:	a842      	add	r0, sp, #264	; 0x108
 8009b74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009b78:	edc0 7a00 	vstr	s15, [r0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	e7df      	b.n	8009b40 <__kernel_rem_pio2f+0x2ac>
 8009b80:	ecfc 6a01 	vldmia	ip!, {s13}
 8009b84:	ed3e 7a01 	vldmdb	lr!, {s14}
 8009b88:	3001      	adds	r0, #1
 8009b8a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009b8e:	e7ee      	b.n	8009b6e <__kernel_rem_pio2f+0x2da>
 8009b90:	3b01      	subs	r3, #1
 8009b92:	e779      	b.n	8009a88 <__kernel_rem_pio2f+0x1f4>
 8009b94:	0800a5e0 	.word	0x0800a5e0
 8009b98:	0800a5b4 	.word	0x0800a5b4
 8009b9c:	43800000 	.word	0x43800000
 8009ba0:	3b800000 	.word	0x3b800000
 8009ba4:	00000000 	.word	0x00000000
 8009ba8:	9b02      	ldr	r3, [sp, #8]
 8009baa:	eeb0 0a48 	vmov.f32	s0, s16
 8009bae:	1b98      	subs	r0, r3, r6
 8009bb0:	f000 f98c 	bl	8009ecc <scalbnf>
 8009bb4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009b9c <__kernel_rem_pio2f+0x308>
 8009bb8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc0:	db1b      	blt.n	8009bfa <__kernel_rem_pio2f+0x366>
 8009bc2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009ba0 <__kernel_rem_pio2f+0x30c>
 8009bc6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009bca:	aa06      	add	r2, sp, #24
 8009bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bd0:	a906      	add	r1, sp, #24
 8009bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bd6:	3408      	adds	r4, #8
 8009bd8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009be0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009be4:	ee10 3a10 	vmov	r3, s0
 8009be8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8009bec:	ee17 2a90 	vmov	r2, s15
 8009bf0:	f10a 0301 	add.w	r3, sl, #1
 8009bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009bf8:	e74c      	b.n	8009a94 <__kernel_rem_pio2f+0x200>
 8009bfa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009bfe:	aa06      	add	r2, sp, #24
 8009c00:	ee10 3a10 	vmov	r3, s0
 8009c04:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8009c08:	4653      	mov	r3, sl
 8009c0a:	e743      	b.n	8009a94 <__kernel_rem_pio2f+0x200>
 8009c0c:	aa42      	add	r2, sp, #264	; 0x108
 8009c0e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8009c12:	aa06      	add	r2, sp, #24
 8009c14:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009c18:	9201      	str	r2, [sp, #4]
 8009c1a:	ee07 2a90 	vmov	s15, r2
 8009c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c22:	3901      	subs	r1, #1
 8009c24:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009c28:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009c2c:	edc0 7a00 	vstr	s15, [r0]
 8009c30:	e73a      	b.n	8009aa8 <__kernel_rem_pio2f+0x214>
 8009c32:	ecf2 6a01 	vldmia	r2!, {s13}
 8009c36:	ecb6 7a01 	vldmia	r6!, {s14}
 8009c3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c3e:	3101      	adds	r1, #1
 8009c40:	42b9      	cmp	r1, r7
 8009c42:	dc01      	bgt.n	8009c48 <__kernel_rem_pio2f+0x3b4>
 8009c44:	428c      	cmp	r4, r1
 8009c46:	daf4      	bge.n	8009c32 <__kernel_rem_pio2f+0x39e>
 8009c48:	aa56      	add	r2, sp, #344	; 0x158
 8009c4a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8009c4e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009c52:	3801      	subs	r0, #1
 8009c54:	3401      	adds	r4, #1
 8009c56:	e72c      	b.n	8009ab2 <__kernel_rem_pio2f+0x21e>
 8009c58:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009c5a:	2a02      	cmp	r2, #2
 8009c5c:	dc0a      	bgt.n	8009c74 <__kernel_rem_pio2f+0x3e0>
 8009c5e:	2a00      	cmp	r2, #0
 8009c60:	dc61      	bgt.n	8009d26 <__kernel_rem_pio2f+0x492>
 8009c62:	d03c      	beq.n	8009cde <__kernel_rem_pio2f+0x44a>
 8009c64:	9b00      	ldr	r3, [sp, #0]
 8009c66:	f003 0007 	and.w	r0, r3, #7
 8009c6a:	b057      	add	sp, #348	; 0x15c
 8009c6c:	ecbd 8b04 	vpop	{d8-d9}
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009c76:	2a03      	cmp	r2, #3
 8009c78:	d1f4      	bne.n	8009c64 <__kernel_rem_pio2f+0x3d0>
 8009c7a:	aa2e      	add	r2, sp, #184	; 0xb8
 8009c7c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009c80:	4608      	mov	r0, r1
 8009c82:	461c      	mov	r4, r3
 8009c84:	2c00      	cmp	r4, #0
 8009c86:	f1a0 0004 	sub.w	r0, r0, #4
 8009c8a:	dc59      	bgt.n	8009d40 <__kernel_rem_pio2f+0x4ac>
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	2801      	cmp	r0, #1
 8009c90:	f1a1 0104 	sub.w	r1, r1, #4
 8009c94:	dc64      	bgt.n	8009d60 <__kernel_rem_pio2f+0x4cc>
 8009c96:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8009ba4 <__kernel_rem_pio2f+0x310>
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	dc70      	bgt.n	8009d80 <__kernel_rem_pio2f+0x4ec>
 8009c9e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8009ca2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8009ca6:	f1bb 0f00 	cmp.w	fp, #0
 8009caa:	d172      	bne.n	8009d92 <__kernel_rem_pio2f+0x4fe>
 8009cac:	edc5 6a00 	vstr	s13, [r5]
 8009cb0:	ed85 7a01 	vstr	s14, [r5, #4]
 8009cb4:	edc5 7a02 	vstr	s15, [r5, #8]
 8009cb8:	e7d4      	b.n	8009c64 <__kernel_rem_pio2f+0x3d0>
 8009cba:	aa2e      	add	r2, sp, #184	; 0xb8
 8009cbc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009cc0:	ed91 7a00 	vldr	s14, [r1]
 8009cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	daf5      	bge.n	8009cba <__kernel_rem_pio2f+0x426>
 8009cce:	f1bb 0f00 	cmp.w	fp, #0
 8009cd2:	d001      	beq.n	8009cd8 <__kernel_rem_pio2f+0x444>
 8009cd4:	eef1 7a67 	vneg.f32	s15, s15
 8009cd8:	edc5 7a00 	vstr	s15, [r5]
 8009cdc:	e7c2      	b.n	8009c64 <__kernel_rem_pio2f+0x3d0>
 8009cde:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8009ba4 <__kernel_rem_pio2f+0x310>
 8009ce2:	e7f2      	b.n	8009cca <__kernel_rem_pio2f+0x436>
 8009ce4:	aa2e      	add	r2, sp, #184	; 0xb8
 8009ce6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8009cea:	edd0 7a00 	vldr	s15, [r0]
 8009cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cf2:	3901      	subs	r1, #1
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	daf5      	bge.n	8009ce4 <__kernel_rem_pio2f+0x450>
 8009cf8:	f1bb 0f00 	cmp.w	fp, #0
 8009cfc:	d017      	beq.n	8009d2e <__kernel_rem_pio2f+0x49a>
 8009cfe:	eef1 7a47 	vneg.f32	s15, s14
 8009d02:	edc5 7a00 	vstr	s15, [r5]
 8009d06:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8009d0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d0e:	a82f      	add	r0, sp, #188	; 0xbc
 8009d10:	2101      	movs	r1, #1
 8009d12:	428b      	cmp	r3, r1
 8009d14:	da0e      	bge.n	8009d34 <__kernel_rem_pio2f+0x4a0>
 8009d16:	f1bb 0f00 	cmp.w	fp, #0
 8009d1a:	d001      	beq.n	8009d20 <__kernel_rem_pio2f+0x48c>
 8009d1c:	eef1 7a67 	vneg.f32	s15, s15
 8009d20:	edc5 7a01 	vstr	s15, [r5, #4]
 8009d24:	e79e      	b.n	8009c64 <__kernel_rem_pio2f+0x3d0>
 8009d26:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8009ba4 <__kernel_rem_pio2f+0x310>
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	e7e2      	b.n	8009cf4 <__kernel_rem_pio2f+0x460>
 8009d2e:	eef0 7a47 	vmov.f32	s15, s14
 8009d32:	e7e6      	b.n	8009d02 <__kernel_rem_pio2f+0x46e>
 8009d34:	ecb0 7a01 	vldmia	r0!, {s14}
 8009d38:	3101      	adds	r1, #1
 8009d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d3e:	e7e8      	b.n	8009d12 <__kernel_rem_pio2f+0x47e>
 8009d40:	edd0 7a00 	vldr	s15, [r0]
 8009d44:	edd0 6a01 	vldr	s13, [r0, #4]
 8009d48:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009d4c:	3c01      	subs	r4, #1
 8009d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d52:	ed80 7a00 	vstr	s14, [r0]
 8009d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5a:	edc0 7a01 	vstr	s15, [r0, #4]
 8009d5e:	e791      	b.n	8009c84 <__kernel_rem_pio2f+0x3f0>
 8009d60:	edd1 7a00 	vldr	s15, [r1]
 8009d64:	edd1 6a01 	vldr	s13, [r1, #4]
 8009d68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009d6c:	3801      	subs	r0, #1
 8009d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d72:	ed81 7a00 	vstr	s14, [r1]
 8009d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7a:	edc1 7a01 	vstr	s15, [r1, #4]
 8009d7e:	e786      	b.n	8009c8e <__kernel_rem_pio2f+0x3fa>
 8009d80:	aa2e      	add	r2, sp, #184	; 0xb8
 8009d82:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009d86:	ed91 7a00 	vldr	s14, [r1]
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d90:	e783      	b.n	8009c9a <__kernel_rem_pio2f+0x406>
 8009d92:	eef1 6a66 	vneg.f32	s13, s13
 8009d96:	eeb1 7a47 	vneg.f32	s14, s14
 8009d9a:	edc5 6a00 	vstr	s13, [r5]
 8009d9e:	ed85 7a01 	vstr	s14, [r5, #4]
 8009da2:	eef1 7a67 	vneg.f32	s15, s15
 8009da6:	e785      	b.n	8009cb4 <__kernel_rem_pio2f+0x420>

08009da8 <__kernel_sinf>:
 8009da8:	ee10 3a10 	vmov	r3, s0
 8009dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009db0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009db4:	da04      	bge.n	8009dc0 <__kernel_sinf+0x18>
 8009db6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009dba:	ee17 3a90 	vmov	r3, s15
 8009dbe:	b35b      	cbz	r3, 8009e18 <__kernel_sinf+0x70>
 8009dc0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009dc4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009e1c <__kernel_sinf+0x74>
 8009dc8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009e20 <__kernel_sinf+0x78>
 8009dcc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009dd0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009e24 <__kernel_sinf+0x7c>
 8009dd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009dd8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009e28 <__kernel_sinf+0x80>
 8009ddc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009de0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009e2c <__kernel_sinf+0x84>
 8009de4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009de8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009dec:	b930      	cbnz	r0, 8009dfc <__kernel_sinf+0x54>
 8009dee:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009e30 <__kernel_sinf+0x88>
 8009df2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009df6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009dfa:	4770      	bx	lr
 8009dfc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009e00:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009e04:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009e08:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009e0c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009e34 <__kernel_sinf+0x8c>
 8009e10:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009e14:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009e20:	b2d72f34 	.word	0xb2d72f34
 8009e24:	3638ef1b 	.word	0x3638ef1b
 8009e28:	b9500d01 	.word	0xb9500d01
 8009e2c:	3c088889 	.word	0x3c088889
 8009e30:	be2aaaab 	.word	0xbe2aaaab
 8009e34:	3e2aaaab 	.word	0x3e2aaaab

08009e38 <fabsf>:
 8009e38:	ee10 3a10 	vmov	r3, s0
 8009e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e40:	ee00 3a10 	vmov	s0, r3
 8009e44:	4770      	bx	lr
	...

08009e48 <floorf>:
 8009e48:	ee10 3a10 	vmov	r3, s0
 8009e4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009e50:	3a7f      	subs	r2, #127	; 0x7f
 8009e52:	2a16      	cmp	r2, #22
 8009e54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e58:	dc2a      	bgt.n	8009eb0 <floorf+0x68>
 8009e5a:	2a00      	cmp	r2, #0
 8009e5c:	da11      	bge.n	8009e82 <floorf+0x3a>
 8009e5e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009ec0 <floorf+0x78>
 8009e62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6e:	dd05      	ble.n	8009e7c <floorf+0x34>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	da23      	bge.n	8009ebc <floorf+0x74>
 8009e74:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <floorf+0x7c>)
 8009e76:	2900      	cmp	r1, #0
 8009e78:	bf18      	it	ne
 8009e7a:	4613      	movne	r3, r2
 8009e7c:	ee00 3a10 	vmov	s0, r3
 8009e80:	4770      	bx	lr
 8009e82:	4911      	ldr	r1, [pc, #68]	; (8009ec8 <floorf+0x80>)
 8009e84:	4111      	asrs	r1, r2
 8009e86:	420b      	tst	r3, r1
 8009e88:	d0fa      	beq.n	8009e80 <floorf+0x38>
 8009e8a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009ec0 <floorf+0x78>
 8009e8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	ddef      	ble.n	8009e7c <floorf+0x34>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bfbe      	ittt	lt
 8009ea0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009ea4:	fa40 f202 	asrlt.w	r2, r0, r2
 8009ea8:	189b      	addlt	r3, r3, r2
 8009eaa:	ea23 0301 	bic.w	r3, r3, r1
 8009eae:	e7e5      	b.n	8009e7c <floorf+0x34>
 8009eb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009eb4:	d3e4      	bcc.n	8009e80 <floorf+0x38>
 8009eb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009eba:	4770      	bx	lr
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e7dd      	b.n	8009e7c <floorf+0x34>
 8009ec0:	7149f2ca 	.word	0x7149f2ca
 8009ec4:	bf800000 	.word	0xbf800000
 8009ec8:	007fffff 	.word	0x007fffff

08009ecc <scalbnf>:
 8009ecc:	ee10 3a10 	vmov	r3, s0
 8009ed0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009ed4:	d025      	beq.n	8009f22 <scalbnf+0x56>
 8009ed6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009eda:	d302      	bcc.n	8009ee2 <scalbnf+0x16>
 8009edc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ee0:	4770      	bx	lr
 8009ee2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009ee6:	d122      	bne.n	8009f2e <scalbnf+0x62>
 8009ee8:	4b2a      	ldr	r3, [pc, #168]	; (8009f94 <scalbnf+0xc8>)
 8009eea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009f98 <scalbnf+0xcc>
 8009eee:	4298      	cmp	r0, r3
 8009ef0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ef4:	db16      	blt.n	8009f24 <scalbnf+0x58>
 8009ef6:	ee10 3a10 	vmov	r3, s0
 8009efa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009efe:	3a19      	subs	r2, #25
 8009f00:	4402      	add	r2, r0
 8009f02:	2afe      	cmp	r2, #254	; 0xfe
 8009f04:	dd15      	ble.n	8009f32 <scalbnf+0x66>
 8009f06:	ee10 3a10 	vmov	r3, s0
 8009f0a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009f9c <scalbnf+0xd0>
 8009f0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009fa0 <scalbnf+0xd4>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	eeb0 7a67 	vmov.f32	s14, s15
 8009f18:	bfb8      	it	lt
 8009f1a:	eef0 7a66 	vmovlt.f32	s15, s13
 8009f1e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009f22:	4770      	bx	lr
 8009f24:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009fa4 <scalbnf+0xd8>
 8009f28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f2c:	4770      	bx	lr
 8009f2e:	0dd2      	lsrs	r2, r2, #23
 8009f30:	e7e6      	b.n	8009f00 <scalbnf+0x34>
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	dd06      	ble.n	8009f44 <scalbnf+0x78>
 8009f36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009f3e:	ee00 3a10 	vmov	s0, r3
 8009f42:	4770      	bx	lr
 8009f44:	f112 0f16 	cmn.w	r2, #22
 8009f48:	da1a      	bge.n	8009f80 <scalbnf+0xb4>
 8009f4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f4e:	4298      	cmp	r0, r3
 8009f50:	ee10 3a10 	vmov	r3, s0
 8009f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f58:	dd0a      	ble.n	8009f70 <scalbnf+0xa4>
 8009f5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009f9c <scalbnf+0xd0>
 8009f5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009fa0 <scalbnf+0xd4>
 8009f62:	eef0 7a40 	vmov.f32	s15, s0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bf18      	it	ne
 8009f6a:	eeb0 0a47 	vmovne.f32	s0, s14
 8009f6e:	e7db      	b.n	8009f28 <scalbnf+0x5c>
 8009f70:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009fa4 <scalbnf+0xd8>
 8009f74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009fa8 <scalbnf+0xdc>
 8009f78:	eef0 7a40 	vmov.f32	s15, s0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	e7f3      	b.n	8009f68 <scalbnf+0x9c>
 8009f80:	3219      	adds	r2, #25
 8009f82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f86:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009f8a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009fac <scalbnf+0xe0>
 8009f8e:	ee07 3a10 	vmov	s14, r3
 8009f92:	e7c4      	b.n	8009f1e <scalbnf+0x52>
 8009f94:	ffff3cb0 	.word	0xffff3cb0
 8009f98:	4c000000 	.word	0x4c000000
 8009f9c:	7149f2ca 	.word	0x7149f2ca
 8009fa0:	f149f2ca 	.word	0xf149f2ca
 8009fa4:	0da24260 	.word	0x0da24260
 8009fa8:	8da24260 	.word	0x8da24260
 8009fac:	33000000 	.word	0x33000000

08009fb0 <__errno>:
 8009fb0:	4b01      	ldr	r3, [pc, #4]	; (8009fb8 <__errno+0x8>)
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	2000002c 	.word	0x2000002c

08009fbc <__libc_init_array>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	4d0d      	ldr	r5, [pc, #52]	; (8009ff4 <__libc_init_array+0x38>)
 8009fc0:	4c0d      	ldr	r4, [pc, #52]	; (8009ff8 <__libc_init_array+0x3c>)
 8009fc2:	1b64      	subs	r4, r4, r5
 8009fc4:	10a4      	asrs	r4, r4, #2
 8009fc6:	2600      	movs	r6, #0
 8009fc8:	42a6      	cmp	r6, r4
 8009fca:	d109      	bne.n	8009fe0 <__libc_init_array+0x24>
 8009fcc:	4d0b      	ldr	r5, [pc, #44]	; (8009ffc <__libc_init_array+0x40>)
 8009fce:	4c0c      	ldr	r4, [pc, #48]	; (800a000 <__libc_init_array+0x44>)
 8009fd0:	f000 f906 	bl	800a1e0 <_init>
 8009fd4:	1b64      	subs	r4, r4, r5
 8009fd6:	10a4      	asrs	r4, r4, #2
 8009fd8:	2600      	movs	r6, #0
 8009fda:	42a6      	cmp	r6, r4
 8009fdc:	d105      	bne.n	8009fea <__libc_init_array+0x2e>
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe4:	4798      	blx	r3
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7ee      	b.n	8009fc8 <__libc_init_array+0xc>
 8009fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fee:	4798      	blx	r3
 8009ff0:	3601      	adds	r6, #1
 8009ff2:	e7f2      	b.n	8009fda <__libc_init_array+0x1e>
 8009ff4:	0800a5f4 	.word	0x0800a5f4
 8009ff8:	0800a5f4 	.word	0x0800a5f4
 8009ffc:	0800a5f4 	.word	0x0800a5f4
 800a000:	0800a5f8 	.word	0x0800a5f8

0800a004 <malloc>:
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <malloc+0xc>)
 800a006:	4601      	mov	r1, r0
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	f000 b871 	b.w	800a0f0 <_malloc_r>
 800a00e:	bf00      	nop
 800a010:	2000002c 	.word	0x2000002c

0800a014 <free>:
 800a014:	4b02      	ldr	r3, [pc, #8]	; (800a020 <free+0xc>)
 800a016:	4601      	mov	r1, r0
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f000 b819 	b.w	800a050 <_free_r>
 800a01e:	bf00      	nop
 800a020:	2000002c 	.word	0x2000002c

0800a024 <memcpy>:
 800a024:	440a      	add	r2, r1
 800a026:	4291      	cmp	r1, r2
 800a028:	f100 33ff 	add.w	r3, r0, #4294967295
 800a02c:	d100      	bne.n	800a030 <memcpy+0xc>
 800a02e:	4770      	bx	lr
 800a030:	b510      	push	{r4, lr}
 800a032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a03a:	4291      	cmp	r1, r2
 800a03c:	d1f9      	bne.n	800a032 <memcpy+0xe>
 800a03e:	bd10      	pop	{r4, pc}

0800a040 <memset>:
 800a040:	4402      	add	r2, r0
 800a042:	4603      	mov	r3, r0
 800a044:	4293      	cmp	r3, r2
 800a046:	d100      	bne.n	800a04a <memset+0xa>
 800a048:	4770      	bx	lr
 800a04a:	f803 1b01 	strb.w	r1, [r3], #1
 800a04e:	e7f9      	b.n	800a044 <memset+0x4>

0800a050 <_free_r>:
 800a050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a052:	2900      	cmp	r1, #0
 800a054:	d048      	beq.n	800a0e8 <_free_r+0x98>
 800a056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a05a:	9001      	str	r0, [sp, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f1a1 0404 	sub.w	r4, r1, #4
 800a062:	bfb8      	it	lt
 800a064:	18e4      	addlt	r4, r4, r3
 800a066:	f000 f8ad 	bl	800a1c4 <__malloc_lock>
 800a06a:	4a20      	ldr	r2, [pc, #128]	; (800a0ec <_free_r+0x9c>)
 800a06c:	9801      	ldr	r0, [sp, #4]
 800a06e:	6813      	ldr	r3, [r2, #0]
 800a070:	4615      	mov	r5, r2
 800a072:	b933      	cbnz	r3, 800a082 <_free_r+0x32>
 800a074:	6063      	str	r3, [r4, #4]
 800a076:	6014      	str	r4, [r2, #0]
 800a078:	b003      	add	sp, #12
 800a07a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a07e:	f000 b8a7 	b.w	800a1d0 <__malloc_unlock>
 800a082:	42a3      	cmp	r3, r4
 800a084:	d90b      	bls.n	800a09e <_free_r+0x4e>
 800a086:	6821      	ldr	r1, [r4, #0]
 800a088:	1862      	adds	r2, r4, r1
 800a08a:	4293      	cmp	r3, r2
 800a08c:	bf04      	itt	eq
 800a08e:	681a      	ldreq	r2, [r3, #0]
 800a090:	685b      	ldreq	r3, [r3, #4]
 800a092:	6063      	str	r3, [r4, #4]
 800a094:	bf04      	itt	eq
 800a096:	1852      	addeq	r2, r2, r1
 800a098:	6022      	streq	r2, [r4, #0]
 800a09a:	602c      	str	r4, [r5, #0]
 800a09c:	e7ec      	b.n	800a078 <_free_r+0x28>
 800a09e:	461a      	mov	r2, r3
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	b10b      	cbz	r3, 800a0a8 <_free_r+0x58>
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	d9fa      	bls.n	800a09e <_free_r+0x4e>
 800a0a8:	6811      	ldr	r1, [r2, #0]
 800a0aa:	1855      	adds	r5, r2, r1
 800a0ac:	42a5      	cmp	r5, r4
 800a0ae:	d10b      	bne.n	800a0c8 <_free_r+0x78>
 800a0b0:	6824      	ldr	r4, [r4, #0]
 800a0b2:	4421      	add	r1, r4
 800a0b4:	1854      	adds	r4, r2, r1
 800a0b6:	42a3      	cmp	r3, r4
 800a0b8:	6011      	str	r1, [r2, #0]
 800a0ba:	d1dd      	bne.n	800a078 <_free_r+0x28>
 800a0bc:	681c      	ldr	r4, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	6053      	str	r3, [r2, #4]
 800a0c2:	4421      	add	r1, r4
 800a0c4:	6011      	str	r1, [r2, #0]
 800a0c6:	e7d7      	b.n	800a078 <_free_r+0x28>
 800a0c8:	d902      	bls.n	800a0d0 <_free_r+0x80>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	6003      	str	r3, [r0, #0]
 800a0ce:	e7d3      	b.n	800a078 <_free_r+0x28>
 800a0d0:	6825      	ldr	r5, [r4, #0]
 800a0d2:	1961      	adds	r1, r4, r5
 800a0d4:	428b      	cmp	r3, r1
 800a0d6:	bf04      	itt	eq
 800a0d8:	6819      	ldreq	r1, [r3, #0]
 800a0da:	685b      	ldreq	r3, [r3, #4]
 800a0dc:	6063      	str	r3, [r4, #4]
 800a0de:	bf04      	itt	eq
 800a0e0:	1949      	addeq	r1, r1, r5
 800a0e2:	6021      	streq	r1, [r4, #0]
 800a0e4:	6054      	str	r4, [r2, #4]
 800a0e6:	e7c7      	b.n	800a078 <_free_r+0x28>
 800a0e8:	b003      	add	sp, #12
 800a0ea:	bd30      	pop	{r4, r5, pc}
 800a0ec:	2000010c 	.word	0x2000010c

0800a0f0 <_malloc_r>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	1ccd      	adds	r5, r1, #3
 800a0f4:	f025 0503 	bic.w	r5, r5, #3
 800a0f8:	3508      	adds	r5, #8
 800a0fa:	2d0c      	cmp	r5, #12
 800a0fc:	bf38      	it	cc
 800a0fe:	250c      	movcc	r5, #12
 800a100:	2d00      	cmp	r5, #0
 800a102:	4606      	mov	r6, r0
 800a104:	db01      	blt.n	800a10a <_malloc_r+0x1a>
 800a106:	42a9      	cmp	r1, r5
 800a108:	d903      	bls.n	800a112 <_malloc_r+0x22>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	2000      	movs	r0, #0
 800a110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a112:	f000 f857 	bl	800a1c4 <__malloc_lock>
 800a116:	4921      	ldr	r1, [pc, #132]	; (800a19c <_malloc_r+0xac>)
 800a118:	680a      	ldr	r2, [r1, #0]
 800a11a:	4614      	mov	r4, r2
 800a11c:	b99c      	cbnz	r4, 800a146 <_malloc_r+0x56>
 800a11e:	4f20      	ldr	r7, [pc, #128]	; (800a1a0 <_malloc_r+0xb0>)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	b923      	cbnz	r3, 800a12e <_malloc_r+0x3e>
 800a124:	4621      	mov	r1, r4
 800a126:	4630      	mov	r0, r6
 800a128:	f000 f83c 	bl	800a1a4 <_sbrk_r>
 800a12c:	6038      	str	r0, [r7, #0]
 800a12e:	4629      	mov	r1, r5
 800a130:	4630      	mov	r0, r6
 800a132:	f000 f837 	bl	800a1a4 <_sbrk_r>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	d123      	bne.n	800a182 <_malloc_r+0x92>
 800a13a:	230c      	movs	r3, #12
 800a13c:	6033      	str	r3, [r6, #0]
 800a13e:	4630      	mov	r0, r6
 800a140:	f000 f846 	bl	800a1d0 <__malloc_unlock>
 800a144:	e7e3      	b.n	800a10e <_malloc_r+0x1e>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	1b5b      	subs	r3, r3, r5
 800a14a:	d417      	bmi.n	800a17c <_malloc_r+0x8c>
 800a14c:	2b0b      	cmp	r3, #11
 800a14e:	d903      	bls.n	800a158 <_malloc_r+0x68>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	441c      	add	r4, r3
 800a154:	6025      	str	r5, [r4, #0]
 800a156:	e004      	b.n	800a162 <_malloc_r+0x72>
 800a158:	6863      	ldr	r3, [r4, #4]
 800a15a:	42a2      	cmp	r2, r4
 800a15c:	bf0c      	ite	eq
 800a15e:	600b      	streq	r3, [r1, #0]
 800a160:	6053      	strne	r3, [r2, #4]
 800a162:	4630      	mov	r0, r6
 800a164:	f000 f834 	bl	800a1d0 <__malloc_unlock>
 800a168:	f104 000b 	add.w	r0, r4, #11
 800a16c:	1d23      	adds	r3, r4, #4
 800a16e:	f020 0007 	bic.w	r0, r0, #7
 800a172:	1ac2      	subs	r2, r0, r3
 800a174:	d0cc      	beq.n	800a110 <_malloc_r+0x20>
 800a176:	1a1b      	subs	r3, r3, r0
 800a178:	50a3      	str	r3, [r4, r2]
 800a17a:	e7c9      	b.n	800a110 <_malloc_r+0x20>
 800a17c:	4622      	mov	r2, r4
 800a17e:	6864      	ldr	r4, [r4, #4]
 800a180:	e7cc      	b.n	800a11c <_malloc_r+0x2c>
 800a182:	1cc4      	adds	r4, r0, #3
 800a184:	f024 0403 	bic.w	r4, r4, #3
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d0e3      	beq.n	800a154 <_malloc_r+0x64>
 800a18c:	1a21      	subs	r1, r4, r0
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f808 	bl	800a1a4 <_sbrk_r>
 800a194:	3001      	adds	r0, #1
 800a196:	d1dd      	bne.n	800a154 <_malloc_r+0x64>
 800a198:	e7cf      	b.n	800a13a <_malloc_r+0x4a>
 800a19a:	bf00      	nop
 800a19c:	2000010c 	.word	0x2000010c
 800a1a0:	20000110 	.word	0x20000110

0800a1a4 <_sbrk_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d06      	ldr	r5, [pc, #24]	; (800a1c0 <_sbrk_r+0x1c>)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	f7f7 f822 	bl	80011f8 <_sbrk>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d102      	bne.n	800a1be <_sbrk_r+0x1a>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	b103      	cbz	r3, 800a1be <_sbrk_r+0x1a>
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	20000a24 	.word	0x20000a24

0800a1c4 <__malloc_lock>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	; (800a1cc <__malloc_lock+0x8>)
 800a1c6:	f000 b809 	b.w	800a1dc <__retarget_lock_acquire_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	20000a2c 	.word	0x20000a2c

0800a1d0 <__malloc_unlock>:
 800a1d0:	4801      	ldr	r0, [pc, #4]	; (800a1d8 <__malloc_unlock+0x8>)
 800a1d2:	f000 b804 	b.w	800a1de <__retarget_lock_release_recursive>
 800a1d6:	bf00      	nop
 800a1d8:	20000a2c 	.word	0x20000a2c

0800a1dc <__retarget_lock_acquire_recursive>:
 800a1dc:	4770      	bx	lr

0800a1de <__retarget_lock_release_recursive>:
 800a1de:	4770      	bx	lr

0800a1e0 <_init>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	bf00      	nop
 800a1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e6:	bc08      	pop	{r3}
 800a1e8:	469e      	mov	lr, r3
 800a1ea:	4770      	bx	lr

0800a1ec <_fini>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr
