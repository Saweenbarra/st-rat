
st-rat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a494  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800a61c  0800a61c  0001a61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa10  0800aa10  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa10  0800aa10  0001aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa18  0800aa18  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800aa20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000090  0800aab0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  0800aab0  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c8b8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3e  00000000  00000000  0003c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  000408b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00041ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024436  00000000  00000000  00042b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a21  00000000  00000000  00066f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfcf  00000000  00000000  0007f9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b98e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e1c  00000000  00000000  0014b9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a604 	.word	0x0800a604

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a604 	.word	0x0800a604

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f003 fd41 	bl	8003f6c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000ac 	.word	0x200000ac
 80004f8:	200000b0 	.word	0x200000b0

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f003 fd27 	bl	8003f6c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f003 fe1d 	bl	8004168 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000b0 	.word	0x200000b0

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b80      	ldr	r3, [pc, #512]	; (8000750 <CS43_Init+0x210>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7e      	ldr	r3, [pc, #504]	; (8000750 <CS43_Init+0x210>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7c      	ldr	r3, [pc, #496]	; (8000750 <CS43_Init+0x210>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487a      	ldr	r0, [pc, #488]	; (8000754 <CS43_Init+0x214>)
 800056c:	f001 fe3c 	bl	80021e8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b79      	ldr	r3, [pc, #484]	; (8000758 <CS43_Init+0x218>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f009 ff64 	bl	800a448 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b76      	ldr	r3, [pc, #472]	; (800075c <CS43_Init+0x21c>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4975      	ldr	r1, [pc, #468]	; (800075c <CS43_Init+0x21c>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b73      	ldr	r3, [pc, #460]	; (800075c <CS43_Init+0x21c>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b71      	ldr	r3, [pc, #452]	; (800075c <CS43_Init+0x21c>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b6f      	ldr	r3, [pc, #444]	; (800075c <CS43_Init+0x21c>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6e      	ldr	r3, [pc, #440]	; (800075c <CS43_Init+0x21c>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6b      	ldr	r3, [pc, #428]	; (800075c <CS43_Init+0x21c>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6a      	ldr	r3, [pc, #424]	; (800075c <CS43_Init+0x21c>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b68      	ldr	r3, [pc, #416]	; (800075c <CS43_Init+0x21c>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4968      	ldr	r1, [pc, #416]	; (8000760 <CS43_Init+0x220>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b65      	ldr	r3, [pc, #404]	; (800075c <CS43_Init+0x21c>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4964      	ldr	r1, [pc, #400]	; (8000760 <CS43_Init+0x220>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4961      	ldr	r1, [pc, #388]	; (800075c <CS43_Init+0x21c>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b5f      	ldr	r3, [pc, #380]	; (800075c <CS43_Init+0x21c>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5d      	ldr	r3, [pc, #372]	; (800075c <CS43_Init+0x21c>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5c      	ldr	r3, [pc, #368]	; (800075c <CS43_Init+0x21c>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b59      	ldr	r3, [pc, #356]	; (800075c <CS43_Init+0x21c>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b58      	ldr	r3, [pc, #352]	; (800075c <CS43_Init+0x21c>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b56      	ldr	r3, [pc, #344]	; (800075c <CS43_Init+0x21c>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <CS43_Init+0x21c>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b52      	ldr	r3, [pc, #328]	; (800075c <CS43_Init+0x21c>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b51      	ldr	r3, [pc, #324]	; (800075c <CS43_Init+0x21c>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b4f      	ldr	r3, [pc, #316]	; (800075c <CS43_Init+0x21c>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <CS43_Init+0x21c>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4b      	ldr	r3, [pc, #300]	; (800075c <CS43_Init+0x21c>)
 800062e:	705a      	strb	r2, [r3, #1]
	
	//iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
	iData[1] |=  (0 << 0);  // 24-bit audio word length for I2S interface
 8000630:	4b4a      	ldr	r3, [pc, #296]	; (800075c <CS43_Init+0x21c>)
 8000632:	785a      	ldrb	r2, [r3, #1]
 8000634:	4b49      	ldr	r3, [pc, #292]	; (800075c <CS43_Init+0x21c>)
 8000636:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000638:	4949      	ldr	r1, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063a:	2006      	movs	r0, #6
 800063c:	f7ff ff40 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000640:	4947      	ldr	r1, [pc, #284]	; (8000760 <CS43_Init+0x220>)
 8000642:	2008      	movs	r0, #8
 8000644:	f7ff ff5a 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000648:	4b44      	ldr	r3, [pc, #272]	; (800075c <CS43_Init+0x21c>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f023 030f 	bic.w	r3, r3, #15
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b42      	ldr	r3, [pc, #264]	; (800075c <CS43_Init+0x21c>)
 8000654:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000656:	4b41      	ldr	r3, [pc, #260]	; (800075c <CS43_Init+0x21c>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <CS43_Init+0x21c>)
 8000662:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000664:	493e      	ldr	r1, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000666:	2008      	movs	r0, #8
 8000668:	f7ff ff2a 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800066c:	493c      	ldr	r1, [pc, #240]	; (8000760 <CS43_Init+0x220>)
 800066e:	2009      	movs	r0, #9
 8000670:	f7ff ff44 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000674:	4b39      	ldr	r3, [pc, #228]	; (800075c <CS43_Init+0x21c>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <CS43_Init+0x21c>)
 8000680:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000682:	4b36      	ldr	r3, [pc, #216]	; (800075c <CS43_Init+0x21c>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <CS43_Init+0x21c>)
 800068e:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000690:	4933      	ldr	r1, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000692:	2009      	movs	r0, #9
 8000694:	f7ff ff14 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000698:	4931      	ldr	r1, [pc, #196]	; (8000760 <CS43_Init+0x220>)
 800069a:	200e      	movs	r0, #14
 800069c:	f7ff ff2e 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d123      	bne.n	80006f0 <CS43_Init+0x1b0>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <CS43_Init+0x21c>)
 80006aa:	785b      	ldrb	r3, [r3, #1]
 80006ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <CS43_Init+0x21c>)
 80006b4:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <CS43_Init+0x21c>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <CS43_Init+0x21c>)
 80006c2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <CS43_Init+0x21c>)
 80006c6:	785b      	ldrb	r3, [r3, #1]
 80006c8:	f023 0320 	bic.w	r3, r3, #32
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <CS43_Init+0x21c>)
 80006d0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <CS43_Init+0x21c>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	f023 0310 	bic.w	r3, r3, #16
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <CS43_Init+0x21c>)
 80006de:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <CS43_Init+0x21c>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	f023 0308 	bic.w	r3, r3, #8
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <CS43_Init+0x21c>)
 80006ec:	705a      	strb	r2, [r3, #1]
 80006ee:	e006      	b.n	80006fe <CS43_Init+0x1be>
	}
	else if(outputMode == MODE_I2S)
 80006f0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <CS43_Init+0x1be>
	{
		iData[1] = 0x02;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <CS43_Init+0x21c>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006fe:	4918      	ldr	r1, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	200e      	movs	r0, #14
 8000702:	f7ff fedd 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000706:	4916      	ldr	r1, [pc, #88]	; (8000760 <CS43_Init+0x220>)
 8000708:	200f      	movs	r0, #15
 800070a:	f7ff fef7 	bl	80004fc <read_register>
	iData[1] = 0x00;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <CS43_Init+0x21c>)
 8000710:	2200      	movs	r2, #0
 8000712:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000714:	4912      	ldr	r1, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff fed2 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <CS43_Init+0x21c>)
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000722:	490f      	ldr	r1, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2014      	movs	r0, #20
 8000726:	f7ff fecb 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <CS43_Init+0x220>)
 800072c:	2015      	movs	r0, #21
 800072e:	f7ff fec7 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000732:	490b      	ldr	r1, [pc, #44]	; (8000760 <CS43_Init+0x220>)
 8000734:	201a      	movs	r0, #26
 8000736:	f7ff fec3 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800073a:	4909      	ldr	r1, [pc, #36]	; (8000760 <CS43_Init+0x220>)
 800073c:	201b      	movs	r0, #27
 800073e:	f7ff febf 	bl	80004c0 <write_register>
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074a:	b004      	add	sp, #16
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200002ac 	.word	0x200002ac
 8000754:	40020c00 	.word	0x40020c00
 8000758:	200000b0 	.word	0x200000b0
 800075c:	200000ac 	.word	0x200000ac
 8000760:	200000ad 	.word	0x200000ad

08000764 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d837      	bhi.n	80007e4 <CS43_Enable_RightLeft+0x80>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <CS43_Enable_RightLeft+0x18>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	0800078d 	.word	0x0800078d
 8000780:	080007a3 	.word	0x080007a3
 8000784:	080007b9 	.word	0x080007b9
 8000788:	080007cf 	.word	0x080007cf
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 800078e:	22c0      	movs	r2, #192	; 0xc0
 8000790:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 800079e:	705a      	strb	r2, [r3, #1]
			break;
 80007a0:	e021      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007aa:	785b      	ldrb	r3, [r3, #1]
 80007ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007b4:	705a      	strb	r2, [r3, #1]
			break;
 80007b6:	e016      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007ba:	22c0      	movs	r2, #192	; 0xc0
 80007bc:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	f043 0320 	orr.w	r3, r3, #32
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007ca:	705a      	strb	r2, [r3, #1]
			break;
 80007cc:	e00b      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007e0:	705a      	strb	r2, [r3, #1]
			break;
 80007e2:	e000      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007e8:	785b      	ldrb	r3, [r3, #1]
 80007ea:	f043 030c 	orr.w	r3, r3, #12
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007f2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	f043 0303 	orr.w	r3, r3, #3
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 8000800:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000802:	4905      	ldr	r1, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb4>)
 8000804:	2004      	movs	r0, #4
 8000806:	f7ff fe5b 	bl	80004c0 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000ac 	.word	0x200000ac
 8000818:	200000ad 	.word	0x200000ad

0800081c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	3b32      	subs	r3, #50	; 0x32
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <CS43_SetVolume+0x78>)
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000840:	4915      	ldr	r1, [pc, #84]	; (8000898 <CS43_SetVolume+0x7c>)
 8000842:	2014      	movs	r0, #20
 8000844:	f7ff fe3c 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000848:	4913      	ldr	r1, [pc, #76]	; (8000898 <CS43_SetVolume+0x7c>)
 800084a:	2015      	movs	r0, #21
 800084c:	f7ff fe38 	bl	80004c0 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b64      	cmp	r3, #100	; 0x64
 8000854:	d80e      	bhi.n	8000874 <CS43_SetVolume+0x58>
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <CS43_SetVolume+0x80>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1152      	asrs	r2, r2, #5
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3b18      	subs	r3, #24
 8000870:	b2db      	uxtb	r3, r3
 8000872:	e000      	b.n	8000876 <CS43_SetVolume+0x5a>
 8000874:	2318      	movs	r3, #24
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <CS43_SetVolume+0x78>)
 8000878:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087a:	4907      	ldr	r1, [pc, #28]	; (8000898 <CS43_SetVolume+0x7c>)
 800087c:	2020      	movs	r0, #32
 800087e:	f7ff fe1f 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000882:	4905      	ldr	r1, [pc, #20]	; (8000898 <CS43_SetVolume+0x7c>)
 8000884:	2021      	movs	r0, #33	; 0x21
 8000886:	f7ff fe1b 	bl	80004c0 <write_register>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000ac 	.word	0x200000ac
 8000898:	200000ad 	.word	0x200000ad
 800089c:	51eb851f 	.word	0x51eb851f

080008a0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <CS43_Start+0x7c>)
 80008a6:	2299      	movs	r2, #153	; 0x99
 80008a8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008aa:	491d      	ldr	r1, [pc, #116]	; (8000920 <CS43_Start+0x80>)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fe07 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <CS43_Start+0x7c>)
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008b8:	4919      	ldr	r1, [pc, #100]	; (8000920 <CS43_Start+0x80>)
 80008ba:	2047      	movs	r0, #71	; 0x47
 80008bc:	f7ff fe00 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c0:	4917      	ldr	r1, [pc, #92]	; (8000920 <CS43_Start+0x80>)
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <CS43_Start+0x7c>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <CS43_Start+0x7c>)
 80008d4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008d6:	4912      	ldr	r1, [pc, #72]	; (8000920 <CS43_Start+0x80>)
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf1 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	4910      	ldr	r1, [pc, #64]	; (8000920 <CS43_Start+0x80>)
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f7ff fe0b 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <CS43_Start+0x7c>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <CS43_Start+0x7c>)
 80008f2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	490a      	ldr	r1, [pc, #40]	; (8000920 <CS43_Start+0x80>)
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f7ff fde2 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <CS43_Start+0x7c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000902:	4907      	ldr	r1, [pc, #28]	; (8000920 <CS43_Start+0x80>)
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fddb 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <CS43_Start+0x7c>)
 800090c:	229e      	movs	r2, #158	; 0x9e
 800090e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000910:	4903      	ldr	r1, [pc, #12]	; (8000920 <CS43_Start+0x80>)
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fdd4 	bl	80004c0 <write_register>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000ac 	.word	0x200000ac
 8000920:	200000ad 	.word	0x200000ad

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b095      	sub	sp, #84	; 0x54
 8000928:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  sample_dt = F_OUT/F_SAMPLE;
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <main+0xfc>)
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <main+0x100>)
 800092e:	601a      	str	r2, [r3, #0]
  sample_N = F_SAMPLE/F_OUT;
 8000930:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <main+0x104>)
 8000932:	2264      	movs	r2, #100	; 0x64
 8000934:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fda3 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f887 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f9c3 	bl	8000cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000942:	f000 f999 	bl	8000c78 <MX_DMA_Init>
  MX_I2C1_Init();
 8000946:	f000 f903 	bl	8000b50 <MX_I2C1_Init>
  MX_I2S3_Init();
 800094a:	f000 f92f 	bl	8000bac <MX_I2S3_Init>
  MX_SPI1_Init();
 800094e:	f000 f95d 	bl	8000c0c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000952:	f008 fccb 	bl	80092ec <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000956:	4c35      	ldr	r4, [pc, #212]	; (8000a2c <main+0x108>)
 8000958:	2300      	movs	r3, #0
 800095a:	9311      	str	r3, [sp, #68]	; 0x44
 800095c:	4668      	mov	r0, sp
 800095e:	f104 0310 	add.w	r3, r4, #16
 8000962:	2244      	movs	r2, #68	; 0x44
 8000964:	4619      	mov	r1, r3
 8000966:	f009 fd6f 	bl	800a448 <memcpy>
 800096a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800096e:	f7ff fde7 	bl	8000540 <CS43_Init>
  CS43_SetVolume(25);
 8000972:	2019      	movs	r0, #25
 8000974:	f7ff ff52 	bl	800081c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000978:	2003      	movs	r0, #3
 800097a:	f7ff fef3 	bl	8000764 <CS43_Enable_RightLeft>
  CS43_Start();
 800097e:	f7ff ff8f 	bl	80008a0 <CS43_Start>

  //Build Sine wave
  	for(uint16_t i=0; i<sample_N; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	e03d      	b.n	8000a04 <main+0xe0>
  	{
  		mySinVal = sinf(i*2*PI*sample_dt);
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a30 <main+0x10c>
 8000998:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <main+0xfc>)
 800099e:	edd3 7a00 	vldr	s15, [r3]
 80009a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a6:	eeb0 0a67 	vmov.f32	s0, s15
 80009aa:	f008 ffa7 	bl	80098fc <sinf>
 80009ae:	eef0 7a40 	vmov.f32	s15, s0
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <main+0x110>)
 80009b4:	edc3 7a00 	vstr	s15, [r3]
  		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <main+0x110>)
 80009ba:	edd3 7a00 	vldr	s15, [r3]
 80009be:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000a38 <main+0x114>
 80009c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ce:	ee17 2a90 	vmov	r2, s15
 80009d2:	b211      	sxth	r1, r2
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <main+0x118>)
 80009d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <main+0x110>)
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000a38 <main+0x114>
 80009e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3301      	adds	r3, #1
 80009ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f2:	ee17 2a90 	vmov	r2, s15
 80009f6:	b211      	sxth	r1, r2
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <main+0x118>)
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	for(uint16_t i=0; i<sample_N; i++)
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	3301      	adds	r3, #1
 8000a02:	80fb      	strh	r3, [r7, #6]
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <main+0x104>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3bc      	bcc.n	8000988 <main+0x64>
  	}

  HAL_I2SEx_TransmitReceive_DMA(&hi2s3, txBuf, rxBuf, 4);
 8000a0e:	2304      	movs	r3, #4
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <main+0x11c>)
 8000a12:	490c      	ldr	r1, [pc, #48]	; (8000a44 <main+0x120>)
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <main+0x124>)
 8000a16:	f004 fb4d 	bl	80050b4 <HAL_I2SEx_TransmitReceive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a1a:	f008 fc8d 	bl	8009338 <MX_USB_HOST_Process>
 8000a1e:	e7fc      	b.n	8000a1a <main+0xf6>
 8000a20:	200002a8 	.word	0x200002a8
 8000a24:	3c23d70a 	.word	0x3c23d70a
 8000a28:	20000114 	.word	0x20000114
 8000a2c:	2000011c 	.word	0x2000011c
 8000a30:	40490fd0 	.word	0x40490fd0
 8000a34:	20000118 	.word	0x20000118
 8000a38:	45fa0000 	.word	0x45fa0000
 8000a3c:	200002f4 	.word	0x200002f4
 8000a40:	200001e0 	.word	0x200001e0
 8000a44:	20000170 	.word	0x20000170
 8000a48:	200002ac 	.word	0x200002ac

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b098      	sub	sp, #96	; 0x60
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a56:	2230      	movs	r2, #48	; 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f009 fd02 	bl	800a464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <SystemClock_Config+0xfc>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a30      	ldr	r2, [pc, #192]	; (8000b48 <SystemClock_Config+0xfc>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <SystemClock_Config+0xfc>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <SystemClock_Config+0x100>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <SystemClock_Config+0x100>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <SystemClock_Config+0x100>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aca:	2308      	movs	r3, #8
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ace:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 ff7b 	bl	80059dc <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000aec:	f000 fa5e 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 f9dc 	bl	8005ecc <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b1a:	f000 fa47 	bl	8000fac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b22:	23c0      	movs	r3, #192	; 0xc0
 8000b24:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f005 fbb4 	bl	800629c <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b3a:	f000 fa37 	bl	8000fac <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3760      	adds	r7, #96	; 0x60
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b8e:	f003 f8a9 	bl	8003ce4 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 fa08 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000011c 	.word	0x2000011c
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bb2:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <MX_I2S3_Init+0x58>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bbc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <MX_I2S3_Init+0x5c>)
 8000bd6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bec:	f004 f810 	bl	8004c10 <HAL_I2S_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000bf6:	f000 f9d9 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200002ac 	.word	0x200002ac
 8000c04:	40003c00 	.word	0x40003c00
 8000c08:	00017700 	.word	0x00017700

08000c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_SPI1_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c5e:	f005 fc5d 	bl	800651c <HAL_SPI_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c68:	f000 f9a0 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200001f0 	.word	0x200001f0
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_DMA_Init+0x4c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <MX_DMA_Init+0x4c>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <MX_DMA_Init+0x4c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	200b      	movs	r0, #11
 8000ca0:	f000 fd5f 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca4:	200b      	movs	r0, #11
 8000ca6:	f000 fd78 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2010      	movs	r0, #16
 8000cb0:	f000 fd57 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cb4:	2010      	movs	r0, #16
 8000cb6:	f000 fd70 	bl	800179a <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	4b71      	ldr	r3, [pc, #452]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a70      	ldr	r2, [pc, #448]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b6e      	ldr	r3, [pc, #440]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a69      	ldr	r2, [pc, #420]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a62      	ldr	r2, [pc, #392]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b60      	ldr	r3, [pc, #384]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b5c      	ldr	r3, [pc, #368]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a5b      	ldr	r2, [pc, #364]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b55      	ldr	r3, [pc, #340]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a54      	ldr	r2, [pc, #336]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4848      	ldr	r0, [pc, #288]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d8c:	f001 fa2c 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2101      	movs	r1, #1
 8000d94:	4846      	ldr	r0, [pc, #280]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000d96:	f001 fa27 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000da0:	4844      	ldr	r0, [pc, #272]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000da2:	f001 fa21 	bl	80021e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000da6:	2308      	movs	r3, #8
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	483b      	ldr	r0, [pc, #236]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000dbe:	f001 f877 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4835      	ldr	r0, [pc, #212]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000dda:	f001 f869 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dde:	2308      	movs	r3, #8
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dee:	2305      	movs	r3, #5
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	482d      	ldr	r0, [pc, #180]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000dfa:	f001 f859 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <MX_GPIO_Init+0x1f0>)
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	482a      	ldr	r0, [pc, #168]	; (8000ebc <MX_GPIO_Init+0x1f4>)
 8000e12:	f001 f84d 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e16:	2304      	movs	r3, #4
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <MX_GPIO_Init+0x1f8>)
 8000e2a:	f001 f841 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e40:	2305      	movs	r3, #5
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <MX_GPIO_Init+0x1f8>)
 8000e4c:	f001 f830 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e50:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e54:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000e6a:	f001 f821 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000e82:	f001 f815 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0x1f0>)
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000e9a:	f001 f809 	bl	8001eb0 <HAL_GPIO_Init>

}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	; 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	10120000 	.word	0x10120000
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000ed4:	8852      	ldrh	r2, [r2, #2]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000edc:	889b      	ldrh	r3, [r3, #4]
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000ee2:	88d2      	ldrh	r2, [r2, #6]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample>>1;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	105b      	asrs	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	105b      	asrs	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60bb      	str	r3, [r7, #8]
	//run HP on left channel and LP on right channel
	/*lSample = Calc_IIR_Left(lSample);
	rSample = Calc_IIR_Right(rSample);*/

	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	0c1b      	lsrs	r3, r3, #16
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f08:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f10:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f1a:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f22:	80da      	strh	r2, [r3, #6]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	200001e0 	.word	0x200001e0
 8000f34:	20000170 	.word	0x20000170

08000f38 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f42:	891b      	ldrh	r3, [r3, #8]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f48:	8952      	ldrh	r2, [r2, #10]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f50:	899b      	ldrh	r3, [r3, #12]
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f56:	89d2      	ldrh	r2, [r2, #14]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample>>1;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	105b      	asrs	r3, r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	105b      	asrs	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	60bb      	str	r3, [r7, #8]
	//run HP on left channel and LP on right channel
	/*lSample = Calc_IIR_Left(lSample);
	rSample = Calc_IIR_Right(rSample);*/

	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f7c:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f84:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f8e:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f96:	81da      	strh	r2, [r3, #14]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001e0 	.word	0x200001e0
 8000fa8:	20000170 	.word	0x20000170

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f000 fba8 	bl	800174c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <HAL_I2C_MspInit+0x84>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d12c      	bne.n	8001084 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_I2C_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <HAL_I2C_MspInit+0x88>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_I2C_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001046:	f44f 7310 	mov.w	r3, #576	; 0x240
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001058:	2304      	movs	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <HAL_I2C_MspInit+0x8c>)
 8001064:	f000 ff24 	bl	8001eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_I2C_MspInit+0x88>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_I2C_MspInit+0x88>)
 8001072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_I2C_MspInit+0x88>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40005400 	.word	0x40005400
 8001090:	40023800 	.word	0x40023800
 8001094:	40020400 	.word	0x40020400

08001098 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a64      	ldr	r2, [pc, #400]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f040 80c2 	bne.w	8001240 <HAL_I2S_MspInit+0x1a8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a61      	ldr	r2, [pc, #388]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a5a      	ldr	r2, [pc, #360]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b58      	ldr	r3, [pc, #352]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a53      	ldr	r2, [pc, #332]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001110:	2310      	movs	r3, #16
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001120:	2306      	movs	r3, #6
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4849      	ldr	r0, [pc, #292]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 800112c:	f000 fec0 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001130:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001142:	2306      	movs	r3, #6
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4841      	ldr	r0, [pc, #260]	; (8001254 <HAL_I2S_MspInit+0x1bc>)
 800114e:	f000 feaf 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001164:	2305      	movs	r3, #5
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4839      	ldr	r0, [pc, #228]	; (8001254 <HAL_I2S_MspInit+0x1bc>)
 8001170:	f000 fe9e 	bl	8001eb0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 8001176:	4a39      	ldr	r2, [pc, #228]	; (800125c <HAL_I2S_MspInit+0x1c4>)
 8001178:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 800117c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001180:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 80011a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a8:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 80011ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b0:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 80011b8:	4827      	ldr	r0, [pc, #156]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 80011ba:	f000 fb09 	bl	80017d0 <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 80011c4:	f7ff fef2 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ce:	4a22      	ldr	r2, [pc, #136]	; (8001258 <HAL_I2S_MspInit+0x1c0>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_I2S_MspInit+0x1cc>)
 80011d8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 80011ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 8001202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001206:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 8001216:	f000 fadb 	bl	80017d0 <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2S_MspInit+0x18c>
    {
      Error_Handler();
 8001220:	f7ff fec4 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_I2S_MspInit+0x1c8>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2033      	movs	r0, #51	; 0x33
 8001236:	f000 fa94 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800123a:	2033      	movs	r0, #51	; 0x33
 800123c:	f000 faad 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40003c00 	.word	0x40003c00
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020800 	.word	0x40020800
 8001258:	20000248 	.word	0x20000248
 800125c:	40026010 	.word	0x40026010
 8001260:	20000180 	.word	0x20000180
 8001264:	40026088 	.word	0x40026088

08001268 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_SPI_MspInit+0x84>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12b      	bne.n	80012e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_SPI_MspInit+0x88>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x88>)
 8001294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_SPI_MspInit+0x88>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_SPI_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_SPI_MspInit+0x88>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_SPI_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012c2:	23e0      	movs	r3, #224	; 0xe0
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d2:	2305      	movs	r3, #5
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <HAL_SPI_MspInit+0x8c>)
 80012de:	f000 fde7 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40013000 	.word	0x40013000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f8ee 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <DMA1_Stream0_IRQHandler+0x10>)
 8001352:	f000 fb43 	bl	80019dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000248 	.word	0x20000248

08001360 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <DMA1_Stream5_IRQHandler+0x10>)
 8001366:	f000 fb39 	bl	80019dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000180 	.word	0x20000180

08001374 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <SPI3_IRQHandler+0x10>)
 800137a:	f003 fd89 	bl	8004e90 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002ac 	.word	0x200002ac

08001388 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <OTG_FS_IRQHandler+0x10>)
 800138e:	f001 f9af 	bl	80026f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000798 	.word	0x20000798

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f009 f802 	bl	800a3d4 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20020000 	.word	0x20020000
 80013fc:	00000400 	.word	0x00000400
 8001400:	20000104 	.word	0x20000104
 8001404:	20000ab0 	.word	0x20000ab0

08001408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001448:	4c0b      	ldr	r4, [pc, #44]	; (8001478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001456:	f7ff ffd7 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f008 ffc1 	bl	800a3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff fa61 	bl	8000924 <main>
  bx  lr    
 8001462:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001470:	0800aa20 	.word	0x0800aa20
  ldr r2, =_sbss
 8001474:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001478:	20000aac 	.word	0x20000aac

0800147c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <HAL_Init+0x40>)
 800148a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_Init+0x40>)
 8001496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x40>)
 80014a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f94f 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fd80 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023c00 	.word	0x40023c00

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f967 	bl	80017b6 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 f92f 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	20000008 	.word	0x20000008
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	200003bc 	.word	0x200003bc

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200003bc 	.word	0x200003bc

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff ffee 	bl	800154c <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffde 	bl	800154c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db0b      	blt.n	800163a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <__NVIC_EnableIRQ+0x38>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	2001      	movs	r0, #1
 8001632:	fa00 f202 	lsl.w	r2, r0, r2
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff29 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff3e 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff8e 	bl	80016a0 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5d 	bl	800164c <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff31 	bl	8001610 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa2 	bl	8001708 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff feb6 	bl	800154c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e099      	b.n	8001920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800180c:	e00f      	b.n	800182e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800180e:	f7ff fe9d 	bl	800154c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b05      	cmp	r3, #5
 800181a:	d908      	bls.n	800182e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2220      	movs	r2, #32
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e078      	b.n	8001920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e8      	bne.n	800180e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4b38      	ldr	r3, [pc, #224]	; (8001928 <HAL_DMA_Init+0x158>)
 8001848:	4013      	ands	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	2b04      	cmp	r3, #4
 8001886:	d107      	bne.n	8001898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4313      	orrs	r3, r2
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f023 0307 	bic.w	r3, r3, #7
 80018ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d117      	bne.n	80018f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fa6f 	bl	8001db8 <DMA_CheckFifoParam>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2240      	movs	r2, #64	; 0x40
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018ee:	2301      	movs	r3, #1
 80018f0:	e016      	b.n	8001920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fa26 	bl	8001d4c <DMA_CalcBaseAndBitshift>
 8001900:	4603      	mov	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	223f      	movs	r2, #63	; 0x3f
 800190a:	409a      	lsls	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	f010803f 	.word	0xf010803f

0800192c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_DMA_Start_IT+0x26>
 800194e:	2302      	movs	r3, #2
 8001950:	e040      	b.n	80019d4 <HAL_DMA_Start_IT+0xa8>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d12f      	bne.n	80019c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2202      	movs	r2, #2
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f9b8 	bl	8001cf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	223f      	movs	r2, #63	; 0x3f
 8001986:	409a      	lsls	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0216 	orr.w	r2, r2, #22
 800199a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0208 	orr.w	r2, r2, #8
 80019b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e005      	b.n	80019d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
 80019d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019e8:	4b92      	ldr	r3, [pc, #584]	; (8001c34 <HAL_DMA_IRQHandler+0x258>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a92      	ldr	r2, [pc, #584]	; (8001c38 <HAL_DMA_IRQHandler+0x25c>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0a9b      	lsrs	r3, r3, #10
 80019f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	2208      	movs	r2, #8
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01a      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0204 	bic.w	r2, r2, #4
 8001a2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	2208      	movs	r2, #8
 8001a36:	409a      	lsls	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d012      	beq.n	8001a7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	f043 0202 	orr.w	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2204      	movs	r2, #4
 8001a84:	409a      	lsls	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00b      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	f043 0204 	orr.w	r2, r3, #4
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	2210      	movs	r2, #16
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d03c      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d018      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d108      	bne.n	8001b0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d024      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
 8001b0a:	e01f      	b.n	8001b4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01b      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
 8001b1c:	e016      	b.n	8001b4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0208 	bic.w	r2, r2, #8
 8001b3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2220      	movs	r2, #32
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 808e 	beq.w	8001c7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8086 	beq.w	8001c7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2220      	movs	r2, #32
 8001b74:	409a      	lsls	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d136      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0216 	bic.w	r2, r2, #22
 8001b94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695a      	ldr	r2, [r3, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ba4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <HAL_DMA_IRQHandler+0x1da>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0208 	bic.w	r2, r2, #8
 8001bc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bca:	223f      	movs	r2, #63	; 0x3f
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d07d      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
        }
        return;
 8001bf2:	e078      	b.n	8001ce6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01c      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d030      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
 8001c20:	e02b      	b.n	8001c7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d027      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
 8001c32:	e022      	b.n	8001c7a <HAL_DMA_IRQHandler+0x29e>
 8001c34:	20000000 	.word	0x20000000
 8001c38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10f      	bne.n	8001c6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0210 	bic.w	r2, r2, #16
 8001c58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d032      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d022      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d307      	bcc.n	8001cc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f2      	bne.n	8001ca6 <HAL_DMA_IRQHandler+0x2ca>
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e000      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ce6:	bf00      	nop
    }
  }
}
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop

08001cf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	d108      	bne.n	8001d30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d2e:	e007      	b.n	8001d40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	3b10      	subs	r3, #16
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <DMA_CalcBaseAndBitshift+0x64>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <DMA_CalcBaseAndBitshift+0x68>)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d909      	bls.n	8001d8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	1d1a      	adds	r2, r3, #4
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d8c:	e007      	b.n	8001d9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d96:	f023 0303 	bic.w	r3, r3, #3
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	aaaaaaab 	.word	0xaaaaaaab
 8001db4:	0800a638 	.word	0x0800a638

08001db8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d11f      	bne.n	8001e12 <DMA_CheckFifoParam+0x5a>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d856      	bhi.n	8001e86 <DMA_CheckFifoParam+0xce>
 8001dd8:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <DMA_CheckFifoParam+0x28>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001df1 	.word	0x08001df1
 8001de4:	08001e03 	.word	0x08001e03
 8001de8:	08001df1 	.word	0x08001df1
 8001dec:	08001e87 	.word	0x08001e87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d046      	beq.n	8001e8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e00:	e043      	b.n	8001e8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e0a:	d140      	bne.n	8001e8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e10:	e03d      	b.n	8001e8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e1a:	d121      	bne.n	8001e60 <DMA_CheckFifoParam+0xa8>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d837      	bhi.n	8001e92 <DMA_CheckFifoParam+0xda>
 8001e22:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <DMA_CheckFifoParam+0x70>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e3f 	.word	0x08001e3f
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001e51 	.word	0x08001e51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e3c:	e030      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d025      	beq.n	8001e96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4e:	e022      	b.n	8001e96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e58:	d11f      	bne.n	8001e9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e5e:	e01c      	b.n	8001e9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d903      	bls.n	8001e6e <DMA_CheckFifoParam+0xb6>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d003      	beq.n	8001e74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e6c:	e018      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
      break;
 8001e72:	e015      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00e      	beq.n	8001e9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
      break;
 8001e84:	e00b      	b.n	8001e9e <DMA_CheckFifoParam+0xe6>
      break;
 8001e86:	bf00      	nop
 8001e88:	e00a      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
 8001e8c:	e008      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e006      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
 8001e94:	e004      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e96:	bf00      	nop
 8001e98:	e002      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e9a:	bf00      	nop
 8001e9c:	e000      	b.n	8001ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e16b      	b.n	80021a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 815a 	bne.w	800219e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d005      	beq.n	8001f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d130      	bne.n	8001f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d017      	beq.n	8001fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80b4 	beq.w	800219e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b60      	ldr	r3, [pc, #384]	; (80021bc <HAL_GPIO_Init+0x30c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a5f      	ldr	r2, [pc, #380]	; (80021bc <HAL_GPIO_Init+0x30c>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_GPIO_Init+0x30c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002052:	4a5b      	ldr	r2, [pc, #364]	; (80021c0 <HAL_GPIO_Init+0x310>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_GPIO_Init+0x314>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_Init+0x226>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_GPIO_Init+0x318>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x222>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_GPIO_Init+0x31c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x21e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_GPIO_Init+0x320>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x21a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4e      	ldr	r2, [pc, #312]	; (80021d4 <HAL_GPIO_Init+0x324>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x216>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <HAL_GPIO_Init+0x328>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x212>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <HAL_GPIO_Init+0x32c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x20e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4b      	ldr	r2, [pc, #300]	; (80021e0 <HAL_GPIO_Init+0x330>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x20a>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e00e      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e00c      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00a      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020c2:	2305      	movs	r3, #5
 80020c4:	e008      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020c6:	2304      	movs	r3, #4
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020d6:	2300      	movs	r3, #0
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e8:	4935      	ldr	r1, [pc, #212]	; (80021c0 <HAL_GPIO_Init+0x310>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_GPIO_Init+0x334>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211a:	4a32      	ldr	r2, [pc, #200]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800216e:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	f67f ae90 	bls.w	8001ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40021400 	.word	0x40021400
 80021dc:	40021800 	.word	0x40021800
 80021e0:	40021c00 	.word	0x40021c00
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	b08f      	sub	sp, #60	; 0x3c
 800221e:	af0a      	add	r7, sp, #40	; 0x28
 8002220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e054      	b.n	80022d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f007 f8ae 	bl	80093a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fa51 	bl	8006712 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	687e      	ldr	r6, [r7, #4]
 8002278:	466d      	mov	r5, sp
 800227a:	f106 0410 	add.w	r4, r6, #16
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228a:	e885 0003 	stmia.w	r5, {r0, r1}
 800228e:	1d33      	adds	r3, r6, #4
 8002290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f004 f9cb 	bl	800662e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fa48 	bl	8006734 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	687e      	ldr	r6, [r7, #4]
 80022ac:	466d      	mov	r5, sp
 80022ae:	f106 0410 	add.w	r4, r6, #16
 80022b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022be:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c2:	1d33      	adds	r3, r6, #4
 80022c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c6:	6838      	ldr	r0, [r7, #0]
 80022c8:	f004 fb5a 	bl	8006980 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022de:	b590      	push	{r4, r7, lr}
 80022e0:	b089      	sub	sp, #36	; 0x24
 80022e2:	af04      	add	r7, sp, #16
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	4608      	mov	r0, r1
 80022e8:	4611      	mov	r1, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	70fb      	strb	r3, [r7, #3]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70bb      	strb	r3, [r7, #2]
 80022f4:	4613      	mov	r3, r2
 80022f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_HCD_HC_Init+0x28>
 8002302:	2302      	movs	r3, #2
 8002304:	e076      	b.n	80023f4 <HAL_HCD_HC_Init+0x116>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	333d      	adds	r3, #61	; 0x3d
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3338      	adds	r3, #56	; 0x38
 800232e:	787a      	ldrb	r2, [r7, #1]
 8002330:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	3340      	adds	r3, #64	; 0x40
 8002340:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002342:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3339      	adds	r3, #57	; 0x39
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	333f      	adds	r3, #63	; 0x3f
 8002364:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002368:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	78ba      	ldrb	r2, [r7, #2]
 800236e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002372:	b2d0      	uxtb	r0, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	333a      	adds	r3, #58	; 0x3a
 8002380:	4602      	mov	r2, r0
 8002382:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002384:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da09      	bge.n	80023a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333b      	adds	r3, #59	; 0x3b
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e008      	b.n	80023b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	333b      	adds	r3, #59	; 0x3b
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	333c      	adds	r3, #60	; 0x3c
 80023c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	787c      	ldrb	r4, [r7, #1]
 80023cc:	78ba      	ldrb	r2, [r7, #2]
 80023ce:	78f9      	ldrb	r1, [r7, #3]
 80023d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	4623      	mov	r3, r4
 80023e2:	f004 fc4f 	bl	8006c84 <USB_HC_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}

080023fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_HCD_HC_Halt+0x1e>
 8002416:	2302      	movs	r3, #2
 8002418:	e00f      	b.n	800243a <HAL_HCD_HC_Halt+0x3e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f004 fe8b 	bl	8007146 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4603      	mov	r3, r0
 8002454:	70fb      	strb	r3, [r7, #3]
 8002456:	460b      	mov	r3, r1
 8002458:	70bb      	strb	r3, [r7, #2]
 800245a:	4613      	mov	r3, r2
 800245c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	333b      	adds	r3, #59	; 0x3b
 800246c:	78ba      	ldrb	r2, [r7, #2]
 800246e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	333f      	adds	r3, #63	; 0x3f
 800247e:	787a      	ldrb	r2, [r7, #1]
 8002480:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002482:	7c3b      	ldrb	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3342      	adds	r3, #66	; 0x42
 8002496:	2203      	movs	r2, #3
 8002498:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	333d      	adds	r3, #61	; 0x3d
 80024a8:	7f3a      	ldrb	r2, [r7, #28]
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e008      	b.n	80024c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3342      	adds	r3, #66	; 0x42
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	f200 80c6 	bhi.w	8002654 <HAL_HCD_HC_SubmitRequest+0x210>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	08002641 	.word	0x08002641
 80024d8:	08002545 	.word	0x08002545
 80024dc:	080025c3 	.word	0x080025c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024e0:	7c3b      	ldrb	r3, [r7, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	f040 80b8 	bne.w	8002658 <HAL_HCD_HC_SubmitRequest+0x214>
 80024e8:	78bb      	ldrb	r3, [r7, #2]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80b4 	bne.w	8002658 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80024f0:	8b3b      	ldrh	r3, [r7, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d108      	bne.n	8002508 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3355      	adds	r3, #85	; 0x55
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3355      	adds	r3, #85	; 0x55
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3342      	adds	r3, #66	; 0x42
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800252e:	e093      	b.n	8002658 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3342      	adds	r3, #66	; 0x42
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
      break;
 8002542:	e089      	b.n	8002658 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002544:	78bb      	ldrb	r3, [r7, #2]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d11d      	bne.n	8002586 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3355      	adds	r3, #85	; 0x55
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3342      	adds	r3, #66	; 0x42
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002570:	e073      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3342      	adds	r3, #66	; 0x42
 8002580:	2202      	movs	r2, #2
 8002582:	701a      	strb	r2, [r3, #0]
      break;
 8002584:	e069      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3354      	adds	r3, #84	; 0x54
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3342      	adds	r3, #66	; 0x42
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	e055      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3342      	adds	r3, #66	; 0x42
 80025bc:	2202      	movs	r2, #2
 80025be:	701a      	strb	r2, [r3, #0]
      break;
 80025c0:	e04b      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025c2:	78bb      	ldrb	r3, [r7, #2]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11d      	bne.n	8002604 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3355      	adds	r3, #85	; 0x55
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3342      	adds	r3, #66	; 0x42
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025ee:	e034      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3342      	adds	r3, #66	; 0x42
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
      break;
 8002602:	e02a      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3354      	adds	r3, #84	; 0x54
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3342      	adds	r3, #66	; 0x42
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	e016      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3342      	adds	r3, #66	; 0x42
 800263a:	2202      	movs	r2, #2
 800263c:	701a      	strb	r2, [r3, #0]
      break;
 800263e:	e00c      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3342      	adds	r3, #66	; 0x42
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
      break;
 8002652:	e002      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002654:	bf00      	nop
 8002656:	e000      	b.n	800265a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002658:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3344      	adds	r3, #68	; 0x44
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	8b3a      	ldrh	r2, [r7, #24]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	202c      	movs	r0, #44	; 0x2c
 8002674:	fb00 f303 	mul.w	r3, r0, r3
 8002678:	440b      	add	r3, r1
 800267a:	334c      	adds	r3, #76	; 0x4c
 800267c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3360      	adds	r3, #96	; 0x60
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3350      	adds	r3, #80	; 0x50
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3339      	adds	r3, #57	; 0x39
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3361      	adds	r3, #97	; 0x61
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	222c      	movs	r2, #44	; 0x2c
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	3338      	adds	r3, #56	; 0x38
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	18d1      	adds	r1, r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	f004 fbde 	bl	8006ea0 <USB_HC_StartXfer>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop

080026f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 f8f7 	bl	80068fa <USB_GetMode>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	f040 80ef 	bne.w	80028f2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f004 f8db 	bl	80068d4 <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80e5 	beq.w	80028f0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 f8d2 	bl	80068d4 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800273a:	d104      	bne.n	8002746 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002744:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f004 f8c2 	bl	80068d4 <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800275a:	d104      	bne.n	8002766 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002764:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 f8b2 	bl	80068d4 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800277a:	d104      	bne.n	8002786 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002784:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f004 f8a2 	bl	80068d4 <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d103      	bne.n	80027a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2202      	movs	r2, #2
 80027a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 f894 	bl	80068d4 <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b6:	d115      	bne.n	80027e4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f006 fe66 	bl	80094a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 f98a 	bl	8006af8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 f873 	bl	80068d4 <USB_ReadInterrupts>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f8:	d102      	bne.n	8002800 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f001 f9ff 	bl	8003bfe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 f865 	bl	80068d4 <USB_ReadInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b08      	cmp	r3, #8
 8002812:	d106      	bne.n	8002822 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f006 fe29 	bl	800946c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2208      	movs	r2, #8
 8002820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f004 f854 	bl	80068d4 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	d101      	bne.n	800283a <HAL_HCD_IRQHandler+0x14a>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_HCD_IRQHandler+0x14c>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0210 	bic.w	r2, r2, #16
 800284e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f001 f902 	bl	8003a5a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0210 	orr.w	r2, r2, #16
 8002864:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f004 f832 	bl	80068d4 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800287a:	d13a      	bne.n	80028f2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f004 fc4f 	bl	8007124 <USB_HC_ReadInterrupt>
 8002886:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e025      	b.n	80028da <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	d106      	bne.n	80028c8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8ab 	bl	8002a1c <HCD_HC_IN_IRQHandler>
 80028c6:	e005      	b.n	80028d4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fcc6 	bl	8003260 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3d4      	bcc.n	800288e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ec:	615a      	str	r2, [r3, #20]
 80028ee:	e000      	b.n	80028f2 <HAL_HCD_IRQHandler+0x202>
      return;
 80028f0:	bf00      	nop
    }
  }
}
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_HCD_Start+0x16>
 800290a:	2302      	movs	r3, #2
 800290c:	e013      	b.n	8002936 <HAL_HCD_Start+0x3e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fee8 	bl	80066f0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f004 f94a 	bl	8006bc0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_HCD_Stop+0x16>
 8002950:	2302      	movs	r3, #2
 8002952:	e00d      	b.n	8002970 <HAL_HCD_Stop+0x32>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f004 fd49 	bl	80073f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f004 f8f1 	bl	8006b6c <USB_ResetPort>
 800298a:	4603      	mov	r3, r0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	781b      	ldrb	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3350      	adds	r3, #80	; 0x50
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 f935 	bl	8006c60 <USB_GetCurrentFrame>
 80029f6:	4603      	mov	r3, r0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 f910 	bl	8006c32 <USB_GetHostSpeed>
 8002a12:	4603      	mov	r3, r0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d119      	bne.n	8002a80 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	0151      	lsls	r1, r2, #5
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	440a      	add	r2, r1
 8002a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	60d3      	str	r3, [r2, #12]
 8002a7e:	e101      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a96:	d12b      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3361      	adds	r3, #97	; 0x61
 8002aba:	2207      	movs	r2, #7
 8002abc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	0151      	lsls	r1, r2, #5
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fb2c 	bl	8007146 <USB_HC_Halt>
 8002aee:	e0c9      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d109      	bne.n	8002b1a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	2320      	movs	r3, #32
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	e0b4      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d133      	bne.n	8002b98 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	0151      	lsls	r1, r2, #5
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	440a      	add	r2, r1
 8002b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3361      	adds	r3, #97	; 0x61
 8002b5e:	2205      	movs	r2, #5
 8002b60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2310      	movs	r3, #16
 8002b72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	2308      	movs	r3, #8
 8002b84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 fad8 	bl	8007146 <USB_HC_Halt>
 8002b96:	e075      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d134      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	0151      	lsls	r1, r2, #5
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	440a      	add	r2, r1
 8002bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3361      	adds	r3, #97	; 0x61
 8002bde:	2208      	movs	r2, #8
 8002be0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c06:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 fa97 	bl	8007146 <USB_HC_Halt>
 8002c18:	e034      	b.n	8002c84 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d129      	bne.n	8002c84 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	0151      	lsls	r1, r2, #5
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	440a      	add	r2, r1
 8002c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3361      	adds	r3, #97	; 0x61
 8002c5e:	2206      	movs	r2, #6
 8002c60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fa6a 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9a:	d122      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	0151      	lsls	r1, r2, #5
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	440a      	add	r2, r1
 8002cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 fa3d 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cde:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ce0:	e2ba      	b.n	8003258 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	f040 811b 	bne.w	8002f30 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d019      	beq.n	8002d36 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3348      	adds	r3, #72	; 0x48
 8002d10:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0159      	lsls	r1, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d24:	1ad2      	subs	r2, r2, r3
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	202c      	movs	r0, #44	; 0x2c
 8002d2c:	fb00 f303 	mul.w	r3, r0, r3
 8002d30:	440b      	add	r3, r1
 8002d32:	3350      	adds	r3, #80	; 0x50
 8002d34:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3361      	adds	r3, #97	; 0x61
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	335c      	adds	r3, #92	; 0x5c
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	461a      	mov	r2, r3
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	333f      	adds	r3, #63	; 0x3f
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	333f      	adds	r3, #63	; 0x3f
 8002d8e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d121      	bne.n	8002dd8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	0151      	lsls	r1, r2, #5
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	440a      	add	r2, r1
 8002daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 f9c1 	bl	8007146 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2310      	movs	r3, #16
 8002dd4:	6093      	str	r3, [r2, #8]
 8002dd6:	e066      	b.n	8002ea6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	333f      	adds	r3, #63	; 0x3f
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d127      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	0151      	lsls	r1, r2, #5
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	440a      	add	r2, r1
 8002e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b2d9      	uxtb	r1, r3
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	202c      	movs	r0, #44	; 0x2c
 8002e28:	fb00 f303 	mul.w	r3, r0, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	; 0x60
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f006 fb43 	bl	80094c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e3a:	e034      	b.n	8002ea6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	333f      	adds	r3, #63	; 0x3f
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d12a      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3360      	adds	r3, #96	; 0x60
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3354      	adds	r3, #84	; 0x54
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	f083 0301 	eor.w	r3, r3, #1
 8002e76:	b2d8      	uxtb	r0, r3
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3354      	adds	r3, #84	; 0x54
 8002e86:	4602      	mov	r2, r0
 8002e88:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	b2d9      	uxtb	r1, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	202c      	movs	r0, #44	; 0x2c
 8002e94:	fb00 f303 	mul.w	r3, r0, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f006 fb0d 	bl	80094c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d12b      	bne.n	8002f06 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3348      	adds	r3, #72	; 0x48
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	202c      	movs	r0, #44	; 0x2c
 8002ec4:	fb00 f202 	mul.w	r2, r0, r2
 8002ec8:	440a      	add	r2, r1
 8002eca:	3240      	adds	r2, #64	; 0x40
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 81be 	beq.w	8003258 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3354      	adds	r3, #84	; 0x54
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f083 0301 	eor.w	r3, r3, #1
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3354      	adds	r3, #84	; 0x54
 8002f00:	4602      	mov	r2, r0
 8002f02:	701a      	strb	r2, [r3, #0]
}
 8002f04:	e1a8      	b.n	8003258 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3354      	adds	r3, #84	; 0x54
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	f083 0301 	eor.w	r3, r3, #1
 8002f1a:	b2d8      	uxtb	r0, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3354      	adds	r3, #84	; 0x54
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	701a      	strb	r2, [r3, #0]
}
 8002f2e:	e193      	b.n	8003258 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	f040 8106 	bne.w	8003154 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	0151      	lsls	r1, r2, #5
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	440a      	add	r2, r1
 8002f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f62:	f023 0302 	bic.w	r3, r3, #2
 8002f66:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3361      	adds	r3, #97	; 0x61
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d109      	bne.n	8002f90 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3360      	adds	r3, #96	; 0x60
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e0c9      	b.n	8003124 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3361      	adds	r3, #97	; 0x61
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d109      	bne.n	8002fb8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3360      	adds	r3, #96	; 0x60
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e0b5      	b.n	8003124 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3361      	adds	r3, #97	; 0x61
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d009      	beq.n	8002fe0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3361      	adds	r3, #97	; 0x61
 8002fda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d150      	bne.n	8003082 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	335c      	adds	r3, #92	; 0x5c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	202c      	movs	r0, #44	; 0x2c
 8002ff8:	fb00 f303 	mul.w	r3, r0, r3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	335c      	adds	r3, #92	; 0x5c
 8003000:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	335c      	adds	r3, #92	; 0x5c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d912      	bls.n	800303c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3360      	adds	r3, #96	; 0x60
 8003036:	2204      	movs	r2, #4
 8003038:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800303a:	e073      	b.n	8003124 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3360      	adds	r3, #96	; 0x60
 800304a:	2202      	movs	r2, #2
 800304c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003064:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800306c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003080:	e050      	b.n	8003124 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3361      	adds	r3, #97	; 0x61
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d122      	bne.n	80030dc <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3360      	adds	r3, #96	; 0x60
 80030a4:	2202      	movs	r2, #2
 80030a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e023      	b.n	8003124 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3361      	adds	r3, #97	; 0x61
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b07      	cmp	r3, #7
 80030ee:	d119      	bne.n	8003124 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	335c      	adds	r3, #92	; 0x5c
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	202c      	movs	r0, #44	; 0x2c
 8003108:	fb00 f303 	mul.w	r3, r0, r3
 800310c:	440b      	add	r3, r1
 800310e:	335c      	adds	r3, #92	; 0x5c
 8003110:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3360      	adds	r3, #96	; 0x60
 8003120:	2204      	movs	r2, #4
 8003122:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	2302      	movs	r3, #2
 8003134:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	b2d9      	uxtb	r1, r3
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	202c      	movs	r0, #44	; 0x2c
 8003140:	fb00 f303 	mul.w	r3, r0, r3
 8003144:	4413      	add	r3, r2
 8003146:	3360      	adds	r3, #96	; 0x60
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f006 f9b7 	bl	80094c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003152:	e081      	b.n	8003258 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b10      	cmp	r3, #16
 8003168:	d176      	bne.n	8003258 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	333f      	adds	r3, #63	; 0x3f
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d121      	bne.n	80031c2 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	335c      	adds	r3, #92	; 0x5c
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	0151      	lsls	r1, r2, #5
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	440a      	add	r2, r1
 80031a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 ffc3 	bl	8007146 <USB_HC_Halt>
 80031c0:	e041      	b.n	8003246 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	333f      	adds	r3, #63	; 0x3f
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	333f      	adds	r3, #63	; 0x3f
 80031e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d12d      	bne.n	8003246 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d120      	bne.n	8003246 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3361      	adds	r3, #97	; 0x61
 8003212:	2203      	movs	r2, #3
 8003214:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	0151      	lsls	r1, r2, #5
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	440a      	add	r2, r1
 800322c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f003 ff80 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4413      	add	r3, r2
 800324e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003252:	461a      	mov	r2, r3
 8003254:	2310      	movs	r3, #16
 8003256:	6093      	str	r3, [r2, #8]
}
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b04      	cmp	r3, #4
 800328e:	d119      	bne.n	80032c4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	2304      	movs	r3, #4
 80032a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	0151      	lsls	r1, r2, #5
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	440a      	add	r2, r1
 80032b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80032c2:	e3c6      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d13e      	bne.n	8003358 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	461a      	mov	r2, r3
 80032e8:	2320      	movs	r3, #32
 80032ea:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	333d      	adds	r3, #61	; 0x3d
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 83a8 	bne.w	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	333d      	adds	r3, #61	; 0x3d
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3360      	adds	r3, #96	; 0x60
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	0151      	lsls	r1, r2, #5
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	440a      	add	r2, r1
 800333c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f003 fef8 	bl	8007146 <USB_HC_Halt>
}
 8003356:	e37c      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336e:	d122      	bne.n	80033b6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	0151      	lsls	r1, r2, #5
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	440a      	add	r2, r1
 8003386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f003 fed3 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033b2:	6093      	str	r3, [r2, #8]
}
 80033b4:	e34d      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d150      	bne.n	800346e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	335c      	adds	r3, #92	; 0x5c
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d111      	bne.n	8003418 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	212c      	movs	r1, #44	; 0x2c
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	4413      	add	r3, r2
 8003400:	333d      	adds	r3, #61	; 0x3d
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4413      	add	r3, r2
 800340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003412:	461a      	mov	r2, r3
 8003414:	2340      	movs	r3, #64	; 0x40
 8003416:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	0151      	lsls	r1, r2, #5
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	440a      	add	r2, r1
 800342e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003432:	f043 0302 	orr.w	r3, r3, #2
 8003436:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f003 fe7f 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003454:	461a      	mov	r2, r3
 8003456:	2301      	movs	r3, #1
 8003458:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	3361      	adds	r3, #97	; 0x61
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
}
 800346c:	e2f1      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d13c      	bne.n	80034fe <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3361      	adds	r3, #97	; 0x61
 8003492:	2204      	movs	r2, #4
 8003494:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	333d      	adds	r3, #61	; 0x3d
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	335c      	adds	r3, #92	; 0x5c
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fe2e 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2340      	movs	r3, #64	; 0x40
 80034fa:	6093      	str	r3, [r2, #8]
}
 80034fc:	e2a9      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d12a      	bne.n	800356a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	461a      	mov	r2, r3
 8003522:	2308      	movs	r3, #8
 8003524:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	0151      	lsls	r1, r2, #5
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	440a      	add	r2, r1
 800353c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f003 fdf8 	bl	8007146 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3361      	adds	r3, #97	; 0x61
 8003564:	2205      	movs	r2, #5
 8003566:	701a      	strb	r2, [r3, #0]
}
 8003568:	e273      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d150      	bne.n	8003622 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	335c      	adds	r3, #92	; 0x5c
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3361      	adds	r3, #97	; 0x61
 80035a0:	2203      	movs	r2, #3
 80035a2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	333d      	adds	r3, #61	; 0x3d
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d112      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	333c      	adds	r3, #60	; 0x3c
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d108      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	333d      	adds	r3, #61	; 0x3d
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f003 fd9c 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	461a      	mov	r2, r3
 800361c:	2310      	movs	r3, #16
 800361e:	6093      	str	r3, [r2, #8]
}
 8003620:	e217      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d174      	bne.n	8003722 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d121      	bne.n	8003684 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	212c      	movs	r1, #44	; 0x2c
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3361      	adds	r3, #97	; 0x61
 800364e:	2206      	movs	r2, #6
 8003650:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	440a      	add	r2, r1
 8003668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f003 fd62 	bl	8007146 <USB_HC_Halt>
 8003682:	e044      	b.n	800370e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	335c      	adds	r3, #92	; 0x5c
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	202c      	movs	r0, #44	; 0x2c
 800369c:	fb00 f303 	mul.w	r3, r0, r3
 80036a0:	440b      	add	r3, r1
 80036a2:	335c      	adds	r3, #92	; 0x5c
 80036a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	335c      	adds	r3, #92	; 0x5c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d920      	bls.n	80036fc <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	335c      	adds	r3, #92	; 0x5c
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3360      	adds	r3, #96	; 0x60
 80036da:	2204      	movs	r2, #4
 80036dc:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	b2d9      	uxtb	r1, r3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	202c      	movs	r0, #44	; 0x2c
 80036e8:	fb00 f303 	mul.w	r3, r0, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3360      	adds	r3, #96	; 0x60
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f005 fee3 	bl	80094c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036fa:	e008      	b.n	800370e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3360      	adds	r3, #96	; 0x60
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	6093      	str	r3, [r2, #8]
}
 8003720:	e197      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d134      	bne.n	80037a4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	0151      	lsls	r1, r2, #5
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	440a      	add	r2, r1
 8003750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f003 fcee 	bl	8007146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	2310      	movs	r3, #16
 800377a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	461a      	mov	r2, r3
 800378a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800378e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3361      	adds	r3, #97	; 0x61
 800379e:	2208      	movs	r2, #8
 80037a0:	701a      	strb	r2, [r3, #0]
}
 80037a2:	e156      	b.n	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	f040 814b 	bne.w	8003a52 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	0151      	lsls	r1, r2, #5
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	440a      	add	r2, r1
 80037d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037d6:	f023 0302 	bic.w	r3, r3, #2
 80037da:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3361      	adds	r3, #97	; 0x61
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d179      	bne.n	80038e4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3360      	adds	r3, #96	; 0x60
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	333f      	adds	r3, #63	; 0x3f
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d00a      	beq.n	800382c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	333f      	adds	r3, #63	; 0x3f
 8003824:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003826:	2b03      	cmp	r3, #3
 8003828:	f040 80fc 	bne.w	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d142      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	334c      	adds	r3, #76	; 0x4c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80ed 	beq.w	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	334c      	adds	r3, #76	; 0x4c
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	202c      	movs	r0, #44	; 0x2c
 8003860:	fb00 f202 	mul.w	r2, r0, r2
 8003864:	440a      	add	r2, r1
 8003866:	3240      	adds	r2, #64	; 0x40
 8003868:	8812      	ldrh	r2, [r2, #0]
 800386a:	4413      	add	r3, r2
 800386c:	3b01      	subs	r3, #1
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	202c      	movs	r0, #44	; 0x2c
 8003874:	fb00 f202 	mul.w	r2, r0, r2
 8003878:	440a      	add	r2, r1
 800387a:	3240      	adds	r2, #64	; 0x40
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80ca 	beq.w	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	3355      	adds	r3, #85	; 0x55
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	f083 0301 	eor.w	r3, r3, #1
 80038a4:	b2d8      	uxtb	r0, r3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3355      	adds	r3, #85	; 0x55
 80038b4:	4602      	mov	r2, r0
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e0b4      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3355      	adds	r3, #85	; 0x55
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	f083 0301 	eor.w	r3, r3, #1
 80038ce:	b2d8      	uxtb	r0, r3
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	3355      	adds	r3, #85	; 0x55
 80038de:	4602      	mov	r2, r0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e09f      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3361      	adds	r3, #97	; 0x61
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d109      	bne.n	800390c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	3360      	adds	r3, #96	; 0x60
 8003906:	2202      	movs	r2, #2
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e08b      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3361      	adds	r3, #97	; 0x61
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d109      	bne.n	8003934 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3360      	adds	r3, #96	; 0x60
 800392e:	2202      	movs	r2, #2
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e077      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3361      	adds	r3, #97	; 0x61
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b05      	cmp	r3, #5
 8003946:	d109      	bne.n	800395c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3360      	adds	r3, #96	; 0x60
 8003956:	2205      	movs	r2, #5
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e063      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b06      	cmp	r3, #6
 800396e:	d009      	beq.n	8003984 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3361      	adds	r3, #97	; 0x61
 800397e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003980:	2b08      	cmp	r3, #8
 8003982:	d14f      	bne.n	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	335c      	adds	r3, #92	; 0x5c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	202c      	movs	r0, #44	; 0x2c
 800399c:	fb00 f303 	mul.w	r3, r0, r3
 80039a0:	440b      	add	r3, r1
 80039a2:	335c      	adds	r3, #92	; 0x5c
 80039a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	335c      	adds	r3, #92	; 0x5c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d912      	bls.n	80039e0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	335c      	adds	r3, #92	; 0x5c
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3360      	adds	r3, #96	; 0x60
 80039da:	2204      	movs	r2, #4
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e021      	b.n	8003a24 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3360      	adds	r3, #96	; 0x60
 80039ee:	2202      	movs	r2, #2
 80039f0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a08:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a10:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	2302      	movs	r3, #2
 8003a34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	b2d9      	uxtb	r1, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	202c      	movs	r0, #44	; 0x2c
 8003a40:	fb00 f303 	mul.w	r3, r0, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	3360      	adds	r3, #96	; 0x60
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f005 fd37 	bl	80094c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a52:	bf00      	nop
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08a      	sub	sp, #40	; 0x28
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	0c5b      	lsrs	r3, r3, #17
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a8e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d004      	beq.n	8003aa0 <HCD_RXQLVL_IRQHandler+0x46>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	f000 80a9 	beq.w	8003bf0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a9e:	e0aa      	b.n	8003bf6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80a6 	beq.w	8003bf4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3344      	adds	r3, #68	; 0x44
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 809b 	beq.w	8003bf4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	3350      	adds	r3, #80	; 0x50
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	202c      	movs	r0, #44	; 0x2c
 8003ad8:	fb00 f303 	mul.w	r3, r0, r3
 8003adc:	440b      	add	r3, r1
 8003ade:	334c      	adds	r3, #76	; 0x4c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d87a      	bhi.n	8003bdc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3344      	adds	r3, #68	; 0x44
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	b292      	uxth	r2, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	f002 febf 	bl	8006882 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3344      	adds	r3, #68	; 0x44
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	441a      	add	r2, r3
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	202c      	movs	r0, #44	; 0x2c
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	440b      	add	r3, r1
 8003b24:	3344      	adds	r3, #68	; 0x44
 8003b26:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3350      	adds	r3, #80	; 0x50
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	202c      	movs	r0, #44	; 0x2c
 8003b42:	fb00 f303 	mul.w	r3, r0, r3
 8003b46:	440b      	add	r3, r1
 8003b48:	3350      	adds	r3, #80	; 0x50
 8003b4a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	0cdb      	lsrs	r3, r3, #19
 8003b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b60:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3340      	adds	r3, #64	; 0x40
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d13c      	bne.n	8003bf4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d039      	beq.n	8003bf4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b96:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b9e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3354      	adds	r3, #84	; 0x54
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	f083 0301 	eor.w	r3, r3, #1
 8003bc6:	b2d8      	uxtb	r0, r3
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3354      	adds	r3, #84	; 0x54
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	701a      	strb	r2, [r3, #0]
      break;
 8003bda:	e00b      	b.n	8003bf4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3360      	adds	r3, #96	; 0x60
 8003bea:	2204      	movs	r2, #4
 8003bec:	701a      	strb	r2, [r3, #0]
      break;
 8003bee:	e001      	b.n	8003bf4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003bf4:	bf00      	nop
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3728      	adds	r7, #40	; 0x28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c2a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d10b      	bne.n	8003c4e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d102      	bne.n	8003c46 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f005 fc21 	bl	8009488 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d132      	bne.n	8003cbe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f043 0308 	orr.w	r3, r3, #8
 8003c5e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d126      	bne.n	8003cb8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d113      	bne.n	8003c9a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7c:	d106      	bne.n	8003c8c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2102      	movs	r1, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 ff37 	bl	8006af8 <USB_InitFSLSPClkSel>
 8003c8a:	e011      	b.n	8003cb0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f002 ff30 	bl	8006af8 <USB_InitFSLSPClkSel>
 8003c98:	e00a      	b.n	8003cb0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d106      	bne.n	8003cb0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f005 fc13 	bl	80094dc <HAL_HCD_PortEnabled_Callback>
 8003cb6:	e002      	b.n	8003cbe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f005 fc1d 	bl	80094f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d103      	bne.n	8003cd0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f043 0320 	orr.w	r3, r3, #32
 8003cce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e12b      	b.n	8003f4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f97c 	bl	8001008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d48:	f002 fa94 	bl	8006274 <HAL_RCC_GetPCLK1Freq>
 8003d4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4a81      	ldr	r2, [pc, #516]	; (8003f58 <HAL_I2C_Init+0x274>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d807      	bhi.n	8003d68 <HAL_I2C_Init+0x84>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a80      	ldr	r2, [pc, #512]	; (8003f5c <HAL_I2C_Init+0x278>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	bf94      	ite	ls
 8003d60:	2301      	movls	r3, #1
 8003d62:	2300      	movhi	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e006      	b.n	8003d76 <HAL_I2C_Init+0x92>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a7d      	ldr	r2, [pc, #500]	; (8003f60 <HAL_I2C_Init+0x27c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	bf94      	ite	ls
 8003d70:	2301      	movls	r3, #1
 8003d72:	2300      	movhi	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e0e7      	b.n	8003f4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a78      	ldr	r2, [pc, #480]	; (8003f64 <HAL_I2C_Init+0x280>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	0c9b      	lsrs	r3, r3, #18
 8003d88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a6a      	ldr	r2, [pc, #424]	; (8003f58 <HAL_I2C_Init+0x274>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d802      	bhi.n	8003db8 <HAL_I2C_Init+0xd4>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3301      	adds	r3, #1
 8003db6:	e009      	b.n	8003dcc <HAL_I2C_Init+0xe8>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	4a69      	ldr	r2, [pc, #420]	; (8003f68 <HAL_I2C_Init+0x284>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	099b      	lsrs	r3, r3, #6
 8003dca:	3301      	adds	r3, #1
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	495c      	ldr	r1, [pc, #368]	; (8003f58 <HAL_I2C_Init+0x274>)
 8003de8:	428b      	cmp	r3, r1
 8003dea:	d819      	bhi.n	8003e20 <HAL_I2C_Init+0x13c>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	1e59      	subs	r1, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dfa:	1c59      	adds	r1, r3, #1
 8003dfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e00:	400b      	ands	r3, r1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_I2C_Init+0x138>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1e59      	subs	r1, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1a:	e051      	b.n	8003ec0 <HAL_I2C_Init+0x1dc>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	e04f      	b.n	8003ec0 <HAL_I2C_Init+0x1dc>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d111      	bne.n	8003e4c <HAL_I2C_Init+0x168>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e58      	subs	r0, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	440b      	add	r3, r1
 8003e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e012      	b.n	8003e72 <HAL_I2C_Init+0x18e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1e58      	subs	r0, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	0099      	lsls	r1, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e62:	3301      	adds	r3, #1
 8003e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Init+0x196>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e022      	b.n	8003ec0 <HAL_I2C_Init+0x1dc>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10e      	bne.n	8003ea0 <HAL_I2C_Init+0x1bc>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1e58      	subs	r0, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	440b      	add	r3, r1
 8003e90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9e:	e00f      	b.n	8003ec0 <HAL_I2C_Init+0x1dc>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1e58      	subs	r0, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	0099      	lsls	r1, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	6809      	ldr	r1, [r1, #0]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6911      	ldr	r1, [r2, #16]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	4311      	orrs	r1, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	000186a0 	.word	0x000186a0
 8003f5c:	001e847f 	.word	0x001e847f
 8003f60:	003d08ff 	.word	0x003d08ff
 8003f64:	431bde83 	.word	0x431bde83
 8003f68:	10624dd3 	.word	0x10624dd3

08003f6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	461a      	mov	r2, r3
 8003f78:	460b      	mov	r3, r1
 8003f7a:	817b      	strh	r3, [r7, #10]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f80:	f7fd fae4 	bl	800154c <HAL_GetTick>
 8003f84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	f040 80e0 	bne.w	8004154 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2319      	movs	r3, #25
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4970      	ldr	r1, [pc, #448]	; (8004160 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fc58 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
 8003fac:	e0d3      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x50>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0cc      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d007      	beq.n	8003fe2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2221      	movs	r2, #33	; 0x21
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	893a      	ldrh	r2, [r7, #8]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a50      	ldr	r2, [pc, #320]	; (8004164 <HAL_I2C_Master_Transmit+0x1f8>)
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fac2 	bl	80045b4 <I2C_MasterRequestWrite>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e08d      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004050:	e066      	b.n	8004120 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	6a39      	ldr	r1, [r7, #32]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fcd2 	bl	8004a00 <I2C_WaitOnTXEFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b04      	cmp	r3, #4
 8004068:	d107      	bne.n	800407a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e06b      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	781a      	ldrb	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d11b      	bne.n	80040f4 <HAL_I2C_Master_Transmit+0x188>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	6a39      	ldr	r1, [r7, #32]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fcc2 	bl	8004a82 <I2C_WaitOnBTFFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2b04      	cmp	r3, #4
 800410a:	d107      	bne.n	800411c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e01a      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d194      	bne.n	8004052 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	00100002 	.word	0x00100002
 8004164:	ffff0000 	.word	0xffff0000

08004168 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	461a      	mov	r2, r3
 8004174:	460b      	mov	r3, r1
 8004176:	817b      	strh	r3, [r7, #10]
 8004178:	4613      	mov	r3, r2
 800417a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7fd f9e6 	bl	800154c <HAL_GetTick>
 8004180:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	f040 820b 	bne.w	80045a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2319      	movs	r3, #25
 8004196:	2201      	movs	r2, #1
 8004198:	497c      	ldr	r1, [pc, #496]	; (800438c <HAL_I2C_Master_Receive+0x224>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fb5a 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
 80041a8:	e1fe      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_I2C_Master_Receive+0x50>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e1f7      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d007      	beq.n	80041de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2222      	movs	r2, #34	; 0x22
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2210      	movs	r2, #16
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	893a      	ldrh	r2, [r7, #8]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a5c      	ldr	r2, [pc, #368]	; (8004390 <HAL_I2C_Master_Receive+0x228>)
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004220:	8979      	ldrh	r1, [r7, #10]
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fa46 	bl	80046b8 <I2C_MasterRequestRead>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e1b8      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423e:	2300      	movs	r3, #0
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	623b      	str	r3, [r7, #32]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	623b      	str	r3, [r7, #32]
 8004252:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e18c      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	2b01      	cmp	r3, #1
 800426c:	d11b      	bne.n	80042a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e16c      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d11b      	bne.n	80042e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	e14c      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800430c:	e138      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	2b03      	cmp	r3, #3
 8004314:	f200 80f1 	bhi.w	80044fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	2b01      	cmp	r3, #1
 800431e:	d123      	bne.n	8004368 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fbed 	bl	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e139      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004366:	e10b      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	2b02      	cmp	r3, #2
 800436e:	d14e      	bne.n	800440e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	2200      	movs	r2, #0
 8004378:	4906      	ldr	r1, [pc, #24]	; (8004394 <HAL_I2C_Master_Receive+0x22c>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fa6a 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e10e      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
 800438a:	bf00      	nop
 800438c:	00100002 	.word	0x00100002
 8004390:	ffff0000 	.word	0xffff0000
 8004394:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800440c:	e0b8      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2200      	movs	r2, #0
 8004416:	4966      	ldr	r1, [pc, #408]	; (80045b0 <HAL_I2C_Master_Receive+0x448>)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fa1b 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0bf      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	494f      	ldr	r1, [pc, #316]	; (80045b0 <HAL_I2C_Master_Receive+0x448>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f9ed 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e091      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044f8:	e042      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 fb00 	bl	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e04c      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d118      	bne.n	8004580 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	f47f aec2 	bne.w	800430e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	; 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	00010004 	.word	0x00010004

080045b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	460b      	mov	r3, r1
 80045c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d006      	beq.n	80045de <I2C_MasterRequestWrite+0x2a>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d003      	beq.n	80045de <I2C_MasterRequestWrite+0x2a>
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045dc:	d108      	bne.n	80045f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e00b      	b.n	8004608 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	2b12      	cmp	r3, #18
 80045f6:	d107      	bne.n	8004608 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f91d 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462e:	d103      	bne.n	8004638 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e035      	b.n	80046a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004644:	d108      	bne.n	8004658 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004646:	897b      	ldrh	r3, [r7, #10]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	e01b      	b.n	8004690 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	11db      	asrs	r3, r3, #7
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f063 030f 	orn	r3, r3, #15
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	490e      	ldr	r1, [pc, #56]	; (80046b0 <I2C_MasterRequestWrite+0xfc>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f943 	bl	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e010      	b.n	80046a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004686:	897b      	ldrh	r3, [r7, #10]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4907      	ldr	r1, [pc, #28]	; (80046b4 <I2C_MasterRequestWrite+0x100>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f933 	bl	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	00010008 	.word	0x00010008
 80046b4:	00010002 	.word	0x00010002

080046b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	460b      	mov	r3, r1
 80046c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d006      	beq.n	80046f2 <I2C_MasterRequestRead+0x3a>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d003      	beq.n	80046f2 <I2C_MasterRequestRead+0x3a>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046f0:	d108      	bne.n	8004704 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e00b      	b.n	800471c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	2b11      	cmp	r3, #17
 800470a:	d107      	bne.n	800471c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f893 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004742:	d103      	bne.n	800474c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e079      	b.n	8004844 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004758:	d108      	bne.n	800476c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800475a:	897b      	ldrh	r3, [r7, #10]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	611a      	str	r2, [r3, #16]
 800476a:	e05f      	b.n	800482c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800476c:	897b      	ldrh	r3, [r7, #10]
 800476e:	11db      	asrs	r3, r3, #7
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0306 	and.w	r3, r3, #6
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f063 030f 	orn	r3, r3, #15
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4930      	ldr	r1, [pc, #192]	; (800484c <I2C_MasterRequestRead+0x194>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f8b9 	bl	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e054      	b.n	8004844 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800479a:	897b      	ldrh	r3, [r7, #10]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4929      	ldr	r1, [pc, #164]	; (8004850 <I2C_MasterRequestRead+0x198>)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f8a9 	bl	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e044      	b.n	8004844 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f831 	bl	8004854 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d103      	bne.n	8004810 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e017      	b.n	8004844 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004814:	897b      	ldrh	r3, [r7, #10]
 8004816:	11db      	asrs	r3, r3, #7
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 0306 	and.w	r3, r3, #6
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f063 030e 	orn	r3, r3, #14
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4907      	ldr	r1, [pc, #28]	; (8004850 <I2C_MasterRequestRead+0x198>)
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f865 	bl	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	00010008 	.word	0x00010008
 8004850:	00010002 	.word	0x00010002

08004854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004864:	e025      	b.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d021      	beq.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486e:	f7fc fe6d 	bl	800154c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <I2C_WaitOnFlagUntilTimeout+0x30>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d116      	bne.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f043 0220 	orr.w	r2, r3, #32
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e023      	b.n	80048fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0c1b      	lsrs	r3, r3, #16
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10d      	bne.n	80048d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	43da      	mvns	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	e00c      	b.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	43da      	mvns	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d0b6      	beq.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004910:	e051      	b.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004920:	d123      	bne.n	800496a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004930:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800493a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0204 	orr.w	r2, r3, #4
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e046      	b.n	80049f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d021      	beq.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004972:	f7fc fdeb 	bl	800154c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e020      	b.n	80049f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10c      	bne.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	43da      	mvns	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4013      	ands	r3, r2
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e00b      	b.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	43da      	mvns	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d18d      	bne.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a0c:	e02d      	b.n	8004a6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f8ce 	bl	8004bb0 <I2C_IsAcknowledgeFailed>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e02d      	b.n	8004a7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d021      	beq.n	8004a6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fc fd91 	bl	800154c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e007      	b.n	8004a7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d1ca      	bne.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a8e:	e02d      	b.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f88d 	bl	8004bb0 <I2C_IsAcknowledgeFailed>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e02d      	b.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d021      	beq.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa8:	f7fc fd50 	bl	800154c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d302      	bcc.n	8004abe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e007      	b.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d1ca      	bne.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b10:	e042      	b.n	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d119      	bne.n	8004b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0210 	mvn.w	r2, #16
 8004b28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e029      	b.n	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b54:	f7fc fcfa 	bl	800154c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d302      	bcc.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d116      	bne.n	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	f043 0220 	orr.w	r2, r3, #32
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e007      	b.n	8004ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d1b5      	bne.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d11b      	bne.n	8004c00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f043 0204 	orr.w	r2, r3, #4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e128      	b.n	8004e74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a90      	ldr	r2, [pc, #576]	; (8004e7c <HAL_I2S_Init+0x26c>)
 8004c3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fc fa2b 	bl	8001098 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c58:	f023 030f 	bic.w	r3, r3, #15
 8004c5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2202      	movs	r2, #2
 8004c64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d060      	beq.n	8004d30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c76:	2310      	movs	r3, #16
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	e001      	b.n	8004c80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d802      	bhi.n	8004c8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c8e:	2001      	movs	r0, #1
 8004c90:	f001 fbe6 	bl	8006460 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c94:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9e:	d125      	bne.n	8004cec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d010      	beq.n	8004cca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	461a      	mov	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	3305      	adds	r3, #5
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	e01f      	b.n	8004d0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	3305      	adds	r3, #5
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	e00e      	b.n	8004d0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	3305      	adds	r3, #5
 8004d08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4a5c      	ldr	r2, [pc, #368]	; (8004e80 <HAL_I2S_Init+0x270>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	08db      	lsrs	r3, r3, #3
 8004d14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e003      	b.n	8004d38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d30:	2302      	movs	r3, #2
 8004d32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d902      	bls.n	8004d44 <HAL_I2S_Init+0x134>
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2bff      	cmp	r3, #255	; 0xff
 8004d42:	d907      	bls.n	8004d54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	f043 0210 	orr.w	r2, r3, #16
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e08f      	b.n	8004e74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	ea42 0103 	orr.w	r1, r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d72:	f023 030f 	bic.w	r3, r3, #15
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6851      	ldr	r1, [r2, #4]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6892      	ldr	r2, [r2, #8]
 8004d7e:	4311      	orrs	r1, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68d2      	ldr	r2, [r2, #12]
 8004d84:	4311      	orrs	r1, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6992      	ldr	r2, [r2, #24]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d161      	bne.n	8004e64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <HAL_I2S_Init+0x274>)
 8004da4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <HAL_I2S_Init+0x278>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_I2S_Init+0x1a4>
 8004db0:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_I2S_Init+0x27c>)
 8004db2:	e001      	b.n	8004db8 <HAL_I2S_Init+0x1a8>
 8004db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	4932      	ldr	r1, [pc, #200]	; (8004e88 <HAL_I2S_Init+0x278>)
 8004dc0:	428a      	cmp	r2, r1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_I2S_Init+0x1b8>
 8004dc4:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <HAL_I2S_Init+0x27c>)
 8004dc6:	e001      	b.n	8004dcc <HAL_I2S_Init+0x1bc>
 8004dc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004dcc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <HAL_I2S_Init+0x278>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_I2S_Init+0x1d4>
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_I2S_Init+0x27c>)
 8004de2:	e001      	b.n	8004de8 <HAL_I2S_Init+0x1d8>
 8004de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de8:	2202      	movs	r2, #2
 8004dea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a25      	ldr	r2, [pc, #148]	; (8004e88 <HAL_I2S_Init+0x278>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <HAL_I2S_Init+0x1ea>
 8004df6:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_I2S_Init+0x27c>)
 8004df8:	e001      	b.n	8004dfe <HAL_I2S_Init+0x1ee>
 8004dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0a:	d003      	beq.n	8004e14 <HAL_I2S_Init+0x204>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d103      	bne.n	8004e1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	e001      	b.n	8004e20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	897b      	ldrh	r3, [r7, #10]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <HAL_I2S_Init+0x278>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_I2S_Init+0x24c>
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <HAL_I2S_Init+0x27c>)
 8004e5a:	e001      	b.n	8004e60 <HAL_I2S_Init+0x250>
 8004e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e60:	897a      	ldrh	r2, [r7, #10]
 8004e62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	08004f9f 	.word	0x08004f9f
 8004e80:	cccccccd 	.word	0xcccccccd
 8004e84:	080053c9 	.word	0x080053c9
 8004e88:	40003800 	.word	0x40003800
 8004e8c:	40003400 	.word	0x40003400

08004e90 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10e      	bne.n	8004f38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ffb8 	bl	8004ea8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	b292      	uxth	r2, r2
 8004f54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10e      	bne.n	8004f96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ff93 	bl	8004ebc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d13a      	bne.n	8005030 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d109      	bne.n	8004fd8 <I2S_IRQHandler+0x3a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d102      	bne.n	8004fd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ffb4 	bl	8004f40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d126      	bne.n	8005030 <I2S_IRQHandler+0x92>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d11f      	bne.n	8005030 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ffe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff50 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b03      	cmp	r3, #3
 800503a:	d136      	bne.n	80050aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d109      	bne.n	800505a <I2S_IRQHandler+0xbc>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d102      	bne.n	800505a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ff45 	bl	8004ee4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d122      	bne.n	80050aa <I2S_IRQHandler+0x10c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b20      	cmp	r3, #32
 8005070:	d11b      	bne.n	80050aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005080:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	f043 0204 	orr.w	r2, r3, #4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ff13 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d002      	beq.n	80050e0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050de:	e160      	b.n	80053a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80050ec:	887b      	ldrh	r3, [r7, #2]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e15a      	b.n	80053ac <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8005102:	2302      	movs	r3, #2
 8005104:	e152      	b.n	80053ac <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d002      	beq.n	8005132 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d114      	bne.n	800515c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8005132:	887b      	ldrh	r3, [r7, #2]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	865a      	strh	r2, [r3, #50]	; 0x32
 800515a:	e00b      	b.n	8005174 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	887a      	ldrh	r2, [r7, #2]
 8005160:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	887a      	ldrh	r2, [r7, #2]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	887a      	ldrh	r2, [r7, #2]
 800516c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	887a      	ldrh	r2, [r7, #2]
 8005172:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2205      	movs	r2, #5
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	4a8b      	ldr	r2, [pc, #556]	; (80053b4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8005188:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	4a8a      	ldr	r2, [pc, #552]	; (80053b8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	4a89      	ldr	r2, [pc, #548]	; (80053bc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8005198:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	2200      	movs	r2, #0
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	2200      	movs	r2, #0
 80051a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	4a83      	ldr	r2, [pc, #524]	; (80053bc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80051b0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051bc:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c4:	d002      	beq.n	80051cc <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d16b      	bne.n	80052a4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80051cc:	1d3b      	adds	r3, r7, #4
 80051ce:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a79      	ldr	r2, [pc, #484]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80051de:	4b79      	ldr	r3, [pc, #484]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80051e0:	e001      	b.n	80051e6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80051e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e6:	330c      	adds	r3, #12
 80051e8:	4619      	mov	r1, r3
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f7fc fb9a 	bl	800192c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a70      	ldr	r2, [pc, #448]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8005202:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005204:	e001      	b.n	800520a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8005206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	496b      	ldr	r1, [pc, #428]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005212:	428b      	cmp	r3, r1
 8005214:	d101      	bne.n	800521a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8005216:	4b6b      	ldr	r3, [pc, #428]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005218:	e001      	b.n	800521e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800521a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	461a      	mov	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	b29b      	uxth	r3, r3
 8005240:	f7fc fb74 	bl	800192c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0202 	orr.w	r2, r2, #2
 8005252:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005262:	f000 809e 	beq.w	80053a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a55      	ldr	r2, [pc, #340]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d101      	bne.n	8005274 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8005270:	4b54      	ldr	r3, [pc, #336]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005272:	e001      	b.n	8005278 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8005274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4950      	ldr	r1, [pc, #320]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005280:	428b      	cmp	r3, r1
 8005282:	d101      	bne.n	8005288 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8005284:	4b4f      	ldr	r3, [pc, #316]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005286:	e001      	b.n	800528c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8005288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800528c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005290:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052a0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80052a2:	e07e      	b.n	80053a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b2:	d10a      	bne.n	80052ca <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a38      	ldr	r2, [pc, #224]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80052e2:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80052e4:	e001      	b.n	80052ea <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80052e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ea:	330c      	adds	r3, #12
 80052ec:	461a      	mov	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f7fc fb1a 	bl	800192c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a30      	ldr	r2, [pc, #192]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8005302:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005304:	e001      	b.n	800530a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8005306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	492b      	ldr	r1, [pc, #172]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005312:	428b      	cmp	r3, r1
 8005314:	d101      	bne.n	800531a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8005316:	4b2b      	ldr	r3, [pc, #172]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005318:	e001      	b.n	800531e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800531a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800531e:	f042 0202 	orr.w	r2, r2, #2
 8005322:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	4619      	mov	r1, r3
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800533c:	b29b      	uxth	r3, r3
 800533e:	f7fc faf5 	bl	800192c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d01e      	beq.n	80053a0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d101      	bne.n	8005370 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800536e:	e001      	b.n	8005374 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8005370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4911      	ldr	r1, [pc, #68]	; (80053c0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800537c:	428b      	cmp	r3, r1
 800537e:	d101      	bne.n	8005384 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8005380:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005382:	e001      	b.n	8005388 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8005384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800538c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800539c:	61da      	str	r2, [r3, #28]
 800539e:	e000      	b.n	80053a2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80053a0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	08005671 	.word	0x08005671
 80053b8:	0800568d 	.word	0x0800568d
 80053bc:	08005765 	.word	0x08005765
 80053c0:	40003800 	.word	0x40003800
 80053c4:	40003400 	.word	0x40003400

080053c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4aa2      	ldr	r2, [pc, #648]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d101      	bne.n	80053e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80053e2:	4ba2      	ldr	r3, [pc, #648]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053e4:	e001      	b.n	80053ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80053e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a9b      	ldr	r2, [pc, #620]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005400:	4b9a      	ldr	r3, [pc, #616]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005402:	e001      	b.n	8005408 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d004      	beq.n	8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 8099 	bne.w	8005552 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b02      	cmp	r3, #2
 8005428:	d107      	bne.n	800543a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9d5 	bl	80057e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa78 	bl	8005944 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d13a      	bne.n	80054d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d035      	beq.n	80054d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a7e      	ldr	r2, [pc, #504]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d101      	bne.n	8005476 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005472:	4b7e      	ldr	r3, [pc, #504]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005474:	e001      	b.n	800547a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4979      	ldr	r1, [pc, #484]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005482:	428b      	cmp	r3, r1
 8005484:	d101      	bne.n	800548a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005486:	4b79      	ldr	r3, [pc, #484]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005488:	e001      	b.n	800548e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800548a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800548e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005492:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	f043 0202 	orr.w	r2, r3, #2
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fcfe 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b08      	cmp	r3, #8
 80054dc:	f040 80be 	bne.w	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80b8 	beq.w	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a59      	ldr	r2, [pc, #356]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005506:	4b59      	ldr	r3, [pc, #356]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005508:	e001      	b.n	800550e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800550a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4954      	ldr	r1, [pc, #336]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005516:	428b      	cmp	r3, r1
 8005518:	d101      	bne.n	800551e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800551a:	4b54      	ldr	r3, [pc, #336]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800551c:	e001      	b.n	8005522 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800551e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005526:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	f043 0204 	orr.w	r2, r3, #4
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff fcc0 	bl	8004ed0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005550:	e084      	b.n	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b02      	cmp	r3, #2
 800555a:	d107      	bne.n	800556c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f96e 	bl	8005848 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f9ad 	bl	80058e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d12f      	bne.n	80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02a      	beq.n	80055f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2e      	ldr	r2, [pc, #184]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d101      	bne.n	80055b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80055b4:	4b2d      	ldr	r3, [pc, #180]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055b6:	e001      	b.n	80055bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80055b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4929      	ldr	r1, [pc, #164]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055c4:	428b      	cmp	r3, r1
 80055c6:	d101      	bne.n	80055cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80055c8:	4b28      	ldr	r3, [pc, #160]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055ca:	e001      	b.n	80055d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80055cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	f043 0202 	orr.w	r2, r3, #2
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fc70 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d131      	bne.n	800565e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02c      	beq.n	800565e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800560e:	4b17      	ldr	r3, [pc, #92]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005610:	e001      	b.n	8005616 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4912      	ldr	r1, [pc, #72]	; (8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800561e:	428b      	cmp	r3, r1
 8005620:	d101      	bne.n	8005626 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005624:	e001      	b.n	800562a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800562a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800562e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800563e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564c:	f043 0204 	orr.w	r2, r3, #4
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff fc3b 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800565a:	e000      	b.n	800565e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800565c:	bf00      	nop
}
 800565e:	bf00      	nop
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40003800 	.word	0x40003800
 800566c:	40003400 	.word	0x40003400

08005670 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7fb fc20 	bl	8000ec4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d155      	bne.n	800574e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b0:	d006      	beq.n	80056c0 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11e      	bne.n	80056fe <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a25      	ldr	r2, [pc, #148]	; (800575c <I2SEx_TxRxDMACplt+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d101      	bne.n	80056ce <I2SEx_TxRxDMACplt+0x42>
 80056ca:	4b25      	ldr	r3, [pc, #148]	; (8005760 <I2SEx_TxRxDMACplt+0xd4>)
 80056cc:	e001      	b.n	80056d2 <I2SEx_TxRxDMACplt+0x46>
 80056ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4920      	ldr	r1, [pc, #128]	; (800575c <I2SEx_TxRxDMACplt+0xd0>)
 80056da:	428b      	cmp	r3, r1
 80056dc:	d101      	bne.n	80056e2 <I2SEx_TxRxDMACplt+0x56>
 80056de:	4b20      	ldr	r3, [pc, #128]	; (8005760 <I2SEx_TxRxDMACplt+0xd4>)
 80056e0:	e001      	b.n	80056e6 <I2SEx_TxRxDMACplt+0x5a>
 80056e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0202 	bic.w	r2, r2, #2
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	e01d      	b.n	800573a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <I2SEx_TxRxDMACplt+0xd0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d101      	bne.n	800571c <I2SEx_TxRxDMACplt+0x90>
 8005718:	4b11      	ldr	r3, [pc, #68]	; (8005760 <I2SEx_TxRxDMACplt+0xd4>)
 800571a:	e001      	b.n	8005720 <I2SEx_TxRxDMACplt+0x94>
 800571c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	490d      	ldr	r1, [pc, #52]	; (800575c <I2SEx_TxRxDMACplt+0xd0>)
 8005728:	428b      	cmp	r3, r1
 800572a:	d101      	bne.n	8005730 <I2SEx_TxRxDMACplt+0xa4>
 800572c:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <I2SEx_TxRxDMACplt+0xd4>)
 800572e:	e001      	b.n	8005734 <I2SEx_TxRxDMACplt+0xa8>
 8005730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005734:	f022 0202 	bic.w	r2, r2, #2
 8005738:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7fb fbf2 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40003800 	.word	0x40003800
 8005760:	40003400 	.word	0x40003400

08005764 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0203 	bic.w	r2, r2, #3
 8005780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a15      	ldr	r2, [pc, #84]	; (80057dc <I2SEx_TxRxDMAError+0x78>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d101      	bne.n	8005790 <I2SEx_TxRxDMAError+0x2c>
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <I2SEx_TxRxDMAError+0x7c>)
 800578e:	e001      	b.n	8005794 <I2SEx_TxRxDMAError+0x30>
 8005790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4910      	ldr	r1, [pc, #64]	; (80057dc <I2SEx_TxRxDMAError+0x78>)
 800579c:	428b      	cmp	r3, r1
 800579e:	d101      	bne.n	80057a4 <I2SEx_TxRxDMAError+0x40>
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <I2SEx_TxRxDMAError+0x7c>)
 80057a2:	e001      	b.n	80057a8 <I2SEx_TxRxDMAError+0x44>
 80057a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a8:	f022 0203 	bic.w	r2, r2, #3
 80057ac:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	f043 0208 	orr.w	r2, r3, #8
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff fb7e 	bl	8004ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40003800 	.word	0x40003800
 80057e0:	40003400 	.word	0x40003400

080057e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	1c99      	adds	r1, r3, #2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6251      	str	r1, [r2, #36]	; 0x24
 80057f6:	881a      	ldrh	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d113      	bne.n	800583e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005824:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb fb7d 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	1c99      	adds	r1, r3, #2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6251      	str	r1, [r2, #36]	; 0x24
 800585a:	8819      	ldrh	r1, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1d      	ldr	r2, [pc, #116]	; (80058d8 <I2SEx_TxISR_I2SExt+0x90>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <I2SEx_TxISR_I2SExt+0x22>
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <I2SEx_TxISR_I2SExt+0x94>)
 8005868:	e001      	b.n	800586e <I2SEx_TxISR_I2SExt+0x26>
 800586a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800586e:	460a      	mov	r2, r1
 8005870:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d121      	bne.n	80058ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <I2SEx_TxISR_I2SExt+0x90>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d101      	bne.n	8005898 <I2SEx_TxISR_I2SExt+0x50>
 8005894:	4b11      	ldr	r3, [pc, #68]	; (80058dc <I2SEx_TxISR_I2SExt+0x94>)
 8005896:	e001      	b.n	800589c <I2SEx_TxISR_I2SExt+0x54>
 8005898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	490d      	ldr	r1, [pc, #52]	; (80058d8 <I2SEx_TxISR_I2SExt+0x90>)
 80058a4:	428b      	cmp	r3, r1
 80058a6:	d101      	bne.n	80058ac <I2SEx_TxISR_I2SExt+0x64>
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <I2SEx_TxISR_I2SExt+0x94>)
 80058aa:	e001      	b.n	80058b0 <I2SEx_TxISR_I2SExt+0x68>
 80058ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fb fb35 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40003800 	.word	0x40003800
 80058dc:	40003400 	.word	0x40003400

080058e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68d8      	ldr	r0, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	1c99      	adds	r1, r3, #2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80058f8:	b282      	uxth	r2, r0
 80058fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d113      	bne.n	800593c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005922:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb fafe 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <I2SEx_RxISR_I2SExt+0x90>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <I2SEx_RxISR_I2SExt+0x16>
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <I2SEx_RxISR_I2SExt+0x94>)
 8005958:	e001      	b.n	800595e <I2SEx_RxISR_I2SExt+0x1a>
 800595a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800595e:	68d8      	ldr	r0, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	1c99      	adds	r1, r3, #2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	62d1      	str	r1, [r2, #44]	; 0x2c
 800596a:	b282      	uxth	r2, r0
 800596c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d121      	bne.n	80059ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a12      	ldr	r2, [pc, #72]	; (80059d4 <I2SEx_RxISR_I2SExt+0x90>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <I2SEx_RxISR_I2SExt+0x50>
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <I2SEx_RxISR_I2SExt+0x94>)
 8005992:	e001      	b.n	8005998 <I2SEx_RxISR_I2SExt+0x54>
 8005994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	490d      	ldr	r1, [pc, #52]	; (80059d4 <I2SEx_RxISR_I2SExt+0x90>)
 80059a0:	428b      	cmp	r3, r1
 80059a2:	d101      	bne.n	80059a8 <I2SEx_RxISR_I2SExt+0x64>
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <I2SEx_RxISR_I2SExt+0x94>)
 80059a6:	e001      	b.n	80059ac <I2SEx_RxISR_I2SExt+0x68>
 80059a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fab7 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40003800 	.word	0x40003800
 80059d8:	40003400 	.word	0x40003400

080059dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e264      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d075      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059fa:	4ba3      	ldr	r3, [pc, #652]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d00c      	beq.n	8005a20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a06:	4ba0      	ldr	r3, [pc, #640]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d112      	bne.n	8005a38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a12:	4b9d      	ldr	r3, [pc, #628]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a1e:	d10b      	bne.n	8005a38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	4b99      	ldr	r3, [pc, #612]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d05b      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x108>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d157      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e23f      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d106      	bne.n	8005a50 <HAL_RCC_OscConfig+0x74>
 8005a42:	4b91      	ldr	r3, [pc, #580]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a90      	ldr	r2, [pc, #576]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e01d      	b.n	8005a8c <HAL_RCC_OscConfig+0xb0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x98>
 8005a5a:	4b8b      	ldr	r3, [pc, #556]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a8a      	ldr	r2, [pc, #552]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b88      	ldr	r3, [pc, #544]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a87      	ldr	r2, [pc, #540]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e00b      	b.n	8005a8c <HAL_RCC_OscConfig+0xb0>
 8005a74:	4b84      	ldr	r3, [pc, #528]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a83      	ldr	r2, [pc, #524]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	4b81      	ldr	r3, [pc, #516]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a80      	ldr	r2, [pc, #512]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d013      	beq.n	8005abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a94:	f7fb fd5a 	bl	800154c <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a9c:	f7fb fd56 	bl	800154c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b64      	cmp	r3, #100	; 0x64
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e204      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aae:	4b76      	ldr	r3, [pc, #472]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0xc0>
 8005aba:	e014      	b.n	8005ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fb fd46 	bl	800154c <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fb fd42 	bl	800154c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	; 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e1f0      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad6:	4b6c      	ldr	r3, [pc, #432]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0xe8>
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d063      	beq.n	8005bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005af2:	4b65      	ldr	r3, [pc, #404]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afe:	4b62      	ldr	r3, [pc, #392]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d11c      	bne.n	8005b44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b0a:	4b5f      	ldr	r3, [pc, #380]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d116      	bne.n	8005b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b16:	4b5c      	ldr	r3, [pc, #368]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_RCC_OscConfig+0x152>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d001      	beq.n	8005b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e1c4      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2e:	4b56      	ldr	r3, [pc, #344]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4952      	ldr	r1, [pc, #328]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b42:	e03a      	b.n	8005bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d020      	beq.n	8005b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b4c:	4b4f      	ldr	r3, [pc, #316]	; (8005c8c <HAL_RCC_OscConfig+0x2b0>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b52:	f7fb fcfb 	bl	800154c <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b5a:	f7fb fcf7 	bl	800154c <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e1a5      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6c:	4b46      	ldr	r3, [pc, #280]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b78:	4b43      	ldr	r3, [pc, #268]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4940      	ldr	r1, [pc, #256]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]
 8005b8c:	e015      	b.n	8005bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8e:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <HAL_RCC_OscConfig+0x2b0>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fb fcda 	bl	800154c <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b9c:	f7fb fcd6 	bl	800154c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e184      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bae:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d030      	beq.n	8005c28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d016      	beq.n	8005bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bce:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <HAL_RCC_OscConfig+0x2b4>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd4:	f7fb fcba 	bl	800154c <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bdc:	f7fb fcb6 	bl	800154c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e164      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bee:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x200>
 8005bfa:	e015      	b.n	8005c28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <HAL_RCC_OscConfig+0x2b4>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c02:	f7fb fca3 	bl	800154c <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c0a:	f7fb fc9f 	bl	800154c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e14d      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f0      	bne.n	8005c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80a0 	beq.w	8005d76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6413      	str	r3, [r2, #64]	; 0x40
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c66:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <HAL_RCC_OscConfig+0x2b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d121      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <HAL_RCC_OscConfig+0x2b8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a07      	ldr	r2, [pc, #28]	; (8005c94 <HAL_RCC_OscConfig+0x2b8>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7e:	f7fb fc65 	bl	800154c <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	e011      	b.n	8005caa <HAL_RCC_OscConfig+0x2ce>
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	42470000 	.word	0x42470000
 8005c90:	42470e80 	.word	0x42470e80
 8005c94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c98:	f7fb fc58 	bl	800154c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e106      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005caa:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <HAL_RCC_OscConfig+0x4e4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d106      	bne.n	8005ccc <HAL_RCC_OscConfig+0x2f0>
 8005cbe:	4b81      	ldr	r3, [pc, #516]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	4a80      	ldr	r2, [pc, #512]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cca:	e01c      	b.n	8005d06 <HAL_RCC_OscConfig+0x32a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b05      	cmp	r3, #5
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCC_OscConfig+0x312>
 8005cd4:	4b7b      	ldr	r3, [pc, #492]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a7a      	ldr	r2, [pc, #488]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005cda:	f043 0304 	orr.w	r3, r3, #4
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	4b78      	ldr	r3, [pc, #480]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	4a77      	ldr	r2, [pc, #476]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	; 0x70
 8005cec:	e00b      	b.n	8005d06 <HAL_RCC_OscConfig+0x32a>
 8005cee:	4b75      	ldr	r3, [pc, #468]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	4a74      	ldr	r2, [pc, #464]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfa:	4b72      	ldr	r3, [pc, #456]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	4a71      	ldr	r2, [pc, #452]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d015      	beq.n	8005d3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0e:	f7fb fc1d 	bl	800154c <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d14:	e00a      	b.n	8005d2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d16:	f7fb fc19 	bl	800154c <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e0c5      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2c:	4b65      	ldr	r3, [pc, #404]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0ee      	beq.n	8005d16 <HAL_RCC_OscConfig+0x33a>
 8005d38:	e014      	b.n	8005d64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3a:	f7fb fc07 	bl	800154c <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d40:	e00a      	b.n	8005d58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d42:	f7fb fc03 	bl	800154c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e0af      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d58:	4b5a      	ldr	r3, [pc, #360]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ee      	bne.n	8005d42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d105      	bne.n	8005d76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d6a:	4b56      	ldr	r3, [pc, #344]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	4a55      	ldr	r2, [pc, #340]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 809b 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d80:	4b50      	ldr	r3, [pc, #320]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 030c 	and.w	r3, r3, #12
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d05c      	beq.n	8005e46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d141      	bne.n	8005e18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d94:	4b4c      	ldr	r3, [pc, #304]	; (8005ec8 <HAL_RCC_OscConfig+0x4ec>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9a:	f7fb fbd7 	bl	800154c <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da2:	f7fb fbd3 	bl	800154c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e081      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f0      	bne.n	8005da2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	019b      	lsls	r3, r3, #6
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	041b      	lsls	r3, r3, #16
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	061b      	lsls	r3, r3, #24
 8005de4:	4937      	ldr	r1, [pc, #220]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dea:	4b37      	ldr	r3, [pc, #220]	; (8005ec8 <HAL_RCC_OscConfig+0x4ec>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fb fbac 	bl	800154c <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fb fba8 	bl	800154c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e056      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0a:	4b2e      	ldr	r3, [pc, #184]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x41c>
 8005e16:	e04e      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e18:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <HAL_RCC_OscConfig+0x4ec>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fb fb95 	bl	800154c <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e26:	f7fb fb91 	bl	800154c <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e03f      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e38:	4b22      	ldr	r3, [pc, #136]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <HAL_RCC_OscConfig+0x44a>
 8005e44:	e037      	b.n	8005eb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e032      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e52:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <HAL_RCC_OscConfig+0x4e8>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d028      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d121      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d11a      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e82:	4013      	ands	r3, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d111      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40007000 	.word	0x40007000
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	42470060 	.word	0x42470060

08005ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0cc      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b68      	ldr	r3, [pc, #416]	; (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d90c      	bls.n	8005f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b65      	ldr	r3, [pc, #404]	; (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef6:	4b63      	ldr	r3, [pc, #396]	; (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0b8      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d020      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f20:	4b59      	ldr	r3, [pc, #356]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4a58      	ldr	r2, [pc, #352]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f38:	4b53      	ldr	r3, [pc, #332]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	4a52      	ldr	r2, [pc, #328]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f44:	4b50      	ldr	r3, [pc, #320]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	494d      	ldr	r1, [pc, #308]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d044      	beq.n	8005fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6a:	4b47      	ldr	r3, [pc, #284]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d119      	bne.n	8005faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e07f      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d003      	beq.n	8005f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d107      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8a:	4b3f      	ldr	r3, [pc, #252]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e06f      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9a:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e067      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005faa:	4b37      	ldr	r3, [pc, #220]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f023 0203 	bic.w	r2, r3, #3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4934      	ldr	r1, [pc, #208]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fbc:	f7fb fac6 	bl	800154c <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc4:	f7fb fac2 	bl	800154c <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e04f      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fda:	4b2b      	ldr	r3, [pc, #172]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 020c 	and.w	r2, r3, #12
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d1eb      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fec:	4b25      	ldr	r3, [pc, #148]	; (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d20c      	bcs.n	8006014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffa:	4b22      	ldr	r3, [pc, #136]	; (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d001      	beq.n	8006014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e032      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4916      	ldr	r1, [pc, #88]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	4313      	orrs	r3, r2
 8006030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	490e      	ldr	r1, [pc, #56]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006052:	f000 f821 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	490a      	ldr	r1, [pc, #40]	; (800608c <HAL_RCC_ClockConfig+0x1c0>)
 8006064:	5ccb      	ldrb	r3, [r1, r3]
 8006066:	fa22 f303 	lsr.w	r3, r2, r3
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f7fb fa26 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40023c00 	.word	0x40023c00
 8006088:	40023800 	.word	0x40023800
 800608c:	0800a620 	.word	0x0800a620
 8006090:	20000000 	.word	0x20000000
 8006094:	20000004 	.word	0x20000004

08006098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006098:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	2300      	movs	r3, #0
 80060aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b0:	4b67      	ldr	r3, [pc, #412]	; (8006250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 030c 	and.w	r3, r3, #12
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d00d      	beq.n	80060d8 <HAL_RCC_GetSysClockFreq+0x40>
 80060bc:	2b08      	cmp	r3, #8
 80060be:	f200 80bd 	bhi.w	800623c <HAL_RCC_GetSysClockFreq+0x1a4>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0x34>
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d003      	beq.n	80060d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ca:	e0b7      	b.n	800623c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060cc:	4b61      	ldr	r3, [pc, #388]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060ce:	60bb      	str	r3, [r7, #8]
       break;
 80060d0:	e0b7      	b.n	8006242 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060d2:	4b61      	ldr	r3, [pc, #388]	; (8006258 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80060d4:	60bb      	str	r3, [r7, #8]
      break;
 80060d6:	e0b4      	b.n	8006242 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060d8:	4b5d      	ldr	r3, [pc, #372]	; (8006250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060e2:	4b5b      	ldr	r3, [pc, #364]	; (8006250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04d      	beq.n	800618a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	4b58      	ldr	r3, [pc, #352]	; (8006250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	461a      	mov	r2, r3
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	ea02 0800 	and.w	r8, r2, r0
 8006106:	ea03 0901 	and.w	r9, r3, r1
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	014b      	lsls	r3, r1, #5
 8006118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800611c:	0142      	lsls	r2, r0, #5
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	ebb0 0008 	subs.w	r0, r0, r8
 8006126:	eb61 0109 	sbc.w	r1, r1, r9
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	018b      	lsls	r3, r1, #6
 8006134:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006138:	0182      	lsls	r2, r0, #6
 800613a:	1a12      	subs	r2, r2, r0
 800613c:	eb63 0301 	sbc.w	r3, r3, r1
 8006140:	f04f 0000 	mov.w	r0, #0
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	00d9      	lsls	r1, r3, #3
 800614a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800614e:	00d0      	lsls	r0, r2, #3
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	eb12 0208 	adds.w	r2, r2, r8
 8006158:	eb43 0309 	adc.w	r3, r3, r9
 800615c:	f04f 0000 	mov.w	r0, #0
 8006160:	f04f 0100 	mov.w	r1, #0
 8006164:	0259      	lsls	r1, r3, #9
 8006166:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800616a:	0250      	lsls	r0, r2, #9
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4610      	mov	r0, r2
 8006172:	4619      	mov	r1, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	461a      	mov	r2, r3
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	f7fa f824 	bl	80001c8 <__aeabi_uldivmod>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4613      	mov	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	e04a      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800618a:	4b31      	ldr	r3, [pc, #196]	; (8006250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	099b      	lsrs	r3, r3, #6
 8006190:	461a      	mov	r2, r3
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	f240 10ff 	movw	r0, #511	; 0x1ff
 800619a:	f04f 0100 	mov.w	r1, #0
 800619e:	ea02 0400 	and.w	r4, r2, r0
 80061a2:	ea03 0501 	and.w	r5, r3, r1
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	014b      	lsls	r3, r1, #5
 80061b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061b8:	0142      	lsls	r2, r0, #5
 80061ba:	4610      	mov	r0, r2
 80061bc:	4619      	mov	r1, r3
 80061be:	1b00      	subs	r0, r0, r4
 80061c0:	eb61 0105 	sbc.w	r1, r1, r5
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	018b      	lsls	r3, r1, #6
 80061ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061d2:	0182      	lsls	r2, r0, #6
 80061d4:	1a12      	subs	r2, r2, r0
 80061d6:	eb63 0301 	sbc.w	r3, r3, r1
 80061da:	f04f 0000 	mov.w	r0, #0
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	00d9      	lsls	r1, r3, #3
 80061e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061e8:	00d0      	lsls	r0, r2, #3
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	1912      	adds	r2, r2, r4
 80061f0:	eb45 0303 	adc.w	r3, r5, r3
 80061f4:	f04f 0000 	mov.w	r0, #0
 80061f8:	f04f 0100 	mov.w	r1, #0
 80061fc:	0299      	lsls	r1, r3, #10
 80061fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006202:	0290      	lsls	r0, r2, #10
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4610      	mov	r0, r2
 800620a:	4619      	mov	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	461a      	mov	r2, r3
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	f7f9 ffd8 	bl	80001c8 <__aeabi_uldivmod>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4613      	mov	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	3301      	adds	r3, #1
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
 8006238:	60bb      	str	r3, [r7, #8]
      break;
 800623a:	e002      	b.n	8006242 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800623e:	60bb      	str	r3, [r7, #8]
      break;
 8006240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006242:	68bb      	ldr	r3, [r7, #8]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800624e:	bf00      	nop
 8006250:	40023800 	.word	0x40023800
 8006254:	00f42400 	.word	0x00f42400
 8006258:	007a1200 	.word	0x007a1200

0800625c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006260:	4b03      	ldr	r3, [pc, #12]	; (8006270 <HAL_RCC_GetHCLKFreq+0x14>)
 8006262:	681b      	ldr	r3, [r3, #0]
}
 8006264:	4618      	mov	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20000000 	.word	0x20000000

08006274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006278:	f7ff fff0 	bl	800625c <HAL_RCC_GetHCLKFreq>
 800627c:	4602      	mov	r2, r0
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	0a9b      	lsrs	r3, r3, #10
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	4903      	ldr	r1, [pc, #12]	; (8006298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800628a:	5ccb      	ldrb	r3, [r1, r3]
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006290:	4618      	mov	r0, r3
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40023800 	.word	0x40023800
 8006298:	0800a630 	.word	0x0800a630

0800629c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d105      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d035      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062c4:	4b62      	ldr	r3, [pc, #392]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062ca:	f7fb f93f 	bl	800154c <HAL_GetTick>
 80062ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062d0:	e008      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062d2:	f7fb f93b 	bl	800154c <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0b0      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062e4:	4b5b      	ldr	r3, [pc, #364]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f0      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	019a      	lsls	r2, r3, #6
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	071b      	lsls	r3, r3, #28
 80062fc:	4955      	ldr	r1, [pc, #340]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006304:	4b52      	ldr	r3, [pc, #328]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800630a:	f7fb f91f 	bl	800154c <HAL_GetTick>
 800630e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006310:	e008      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006312:	f7fb f91b 	bl	800154c <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e090      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006324:	4b4b      	ldr	r3, [pc, #300]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0f0      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8083 	beq.w	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	4b44      	ldr	r3, [pc, #272]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	4a43      	ldr	r2, [pc, #268]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634c:	6413      	str	r3, [r2, #64]	; 0x40
 800634e:	4b41      	ldr	r3, [pc, #260]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800635a:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a3e      	ldr	r2, [pc, #248]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006364:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006366:	f7fb f8f1 	bl	800154c <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800636c:	e008      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800636e:	f7fb f8ed 	bl	800154c <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e062      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006380:	4b35      	ldr	r3, [pc, #212]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800638c:	4b31      	ldr	r3, [pc, #196]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006394:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d02f      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d028      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063aa:	4b2a      	ldr	r3, [pc, #168]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063b4:	4b29      	ldr	r3, [pc, #164]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ba:	4b28      	ldr	r3, [pc, #160]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063c0:	4a24      	ldr	r2, [pc, #144]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063c6:	4b23      	ldr	r3, [pc, #140]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d114      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063d2:	f7fb f8bb 	bl	800154c <HAL_GetTick>
 80063d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d8:	e00a      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063da:	f7fb f8b7 	bl	800154c <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e02a      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f0:	4b18      	ldr	r3, [pc, #96]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ee      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006408:	d10d      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800640a:	4b12      	ldr	r3, [pc, #72]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	490d      	ldr	r1, [pc, #52]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006420:	4313      	orrs	r3, r2
 8006422:	608b      	str	r3, [r1, #8]
 8006424:	e005      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800642c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006430:	6093      	str	r3, [r2, #8]
 8006432:	4b08      	ldr	r3, [pc, #32]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006434:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643e:	4905      	ldr	r1, [pc, #20]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006440:	4313      	orrs	r3, r2
 8006442:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	42470068 	.word	0x42470068
 8006454:	40023800 	.word	0x40023800
 8006458:	40007000 	.word	0x40007000
 800645c:	42470e40 	.word	0x42470e40

08006460 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d13e      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800647e:	4b23      	ldr	r3, [pc, #140]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d12f      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006494:	4b1e      	ldr	r3, [pc, #120]	; (8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006496:	617b      	str	r3, [r7, #20]
          break;
 8006498:	e02f      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800649a:	4b1c      	ldr	r3, [pc, #112]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a6:	d108      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064a8:	4b18      	ldr	r3, [pc, #96]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b0:	4a18      	ldr	r2, [pc, #96]	; (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	e007      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064ba:	4b14      	ldr	r3, [pc, #80]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d0:	099b      	lsrs	r3, r3, #6
 80064d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064de:	4b0b      	ldr	r3, [pc, #44]	; (800650c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e4:	0f1b      	lsrs	r3, r3, #28
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	617b      	str	r3, [r7, #20]
          break;
 80064f2:	e002      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
          break;
 80064f8:	bf00      	nop
        }
      }
      break;
 80064fa:	bf00      	nop
    }
  }
  return frequency;
 80064fc:	697b      	ldr	r3, [r7, #20]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40023800 	.word	0x40023800
 8006510:	00bb8000 	.word	0x00bb8000
 8006514:	007a1200 	.word	0x007a1200
 8006518:	00f42400 	.word	0x00f42400

0800651c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e07b      	b.n	8006626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d108      	bne.n	8006548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653e:	d009      	beq.n	8006554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
 8006546:	e005      	b.n	8006554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fa fe7a 	bl	8001268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	ea42 0103 	orr.w	r1, r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0104 	and.w	r1, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f003 0210 	and.w	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800662e:	b084      	sub	sp, #16
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	f107 001c 	add.w	r0, r7, #28
 800663c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b01      	cmp	r3, #1
 8006644:	d122      	bne.n	800668c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800665a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d105      	bne.n	8006680 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f949 	bl	8006918 <USB_CoreReset>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	e01a      	b.n	80066c2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f93d 	bl	8006918 <USB_CoreReset>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
 80066b4:	e005      	b.n	80066c2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d10b      	bne.n	80066e0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f043 0206 	orr.w	r2, r3, #6
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f043 0220 	orr.w	r2, r3, #32
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ec:	b004      	add	sp, #16
 80066ee:	4770      	bx	lr

080066f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f043 0201 	orr.w	r2, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d106      	bne.n	8006760 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60da      	str	r2, [r3, #12]
 800675e:	e00b      	b.n	8006778 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e001      	b.n	8006778 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e003      	b.n	8006780 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006778:	2032      	movs	r0, #50	; 0x32
 800677a:	f7fa fef3 	bl	8001564 <HAL_Delay>

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	019b      	lsls	r3, r3, #6
 800679a:	f043 0220 	orr.w	r2, r3, #32
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <USB_FlushTxFifo+0x48>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d901      	bls.n	80067b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e006      	b.n	80067c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d0f0      	beq.n	80067a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	00030d40 	.word	0x00030d40

080067d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2210      	movs	r2, #16
 80067e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a09      	ldr	r2, [pc, #36]	; (8006814 <USB_FlushRxFifo+0x40>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e006      	b.n	8006806 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b10      	cmp	r3, #16
 8006802:	d0f0      	beq.n	80067e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	00030d40 	.word	0x00030d40

08006818 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006818:	b480      	push	{r7}
 800681a:	b089      	sub	sp, #36	; 0x24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	460b      	mov	r3, r1
 8006828:	71fb      	strb	r3, [r7, #7]
 800682a:	4613      	mov	r3, r2
 800682c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006836:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d11a      	bne.n	8006874 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800683e:	88bb      	ldrh	r3, [r7, #4]
 8006840:	3303      	adds	r3, #3
 8006842:	089b      	lsrs	r3, r3, #2
 8006844:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006846:	2300      	movs	r3, #0
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	e00f      	b.n	800686c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	031a      	lsls	r2, r3, #12
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006858:	461a      	mov	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3304      	adds	r3, #4
 8006864:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	3301      	adds	r3, #1
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	429a      	cmp	r2, r3
 8006872:	d3eb      	bcc.n	800684c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3724      	adds	r7, #36	; 0x24
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006882:	b480      	push	{r7}
 8006884:	b089      	sub	sp, #36	; 0x24
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	4613      	mov	r3, r2
 800688e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	3303      	adds	r3, #3
 800689c:	089b      	lsrs	r3, r3, #2
 800689e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80068a0:	2300      	movs	r3, #0
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	e00b      	b.n	80068be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	3304      	adds	r3, #4
 80068b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d3ef      	bcc.n	80068a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80068c6:	69fb      	ldr	r3, [r7, #28]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3724      	adds	r7, #36	; 0x24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4013      	ands	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068ec:	68fb      	ldr	r3, [r7, #12]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0301 	and.w	r3, r3, #1
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
	...

08006918 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a13      	ldr	r2, [pc, #76]	; (800697c <USB_CoreReset+0x64>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e01b      	b.n	800696e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	daf2      	bge.n	8006924 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a09      	ldr	r2, [pc, #36]	; (800697c <USB_CoreReset+0x64>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e006      	b.n	800696e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d0f0      	beq.n	800694e <USB_CoreReset+0x36>

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	00030d40 	.word	0x00030d40

08006980 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006980:	b084      	sub	sp, #16
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	f107 001c 	add.w	r0, r7, #28
 800698e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800699c:	461a      	mov	r2, r3
 800699e:	2300      	movs	r3, #0
 80069a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10a      	bne.n	80069ee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e6:	f043 0304 	orr.w	r3, r3, #4
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e014      	b.n	8006a18 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e009      	b.n	8006a18 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a12:	f023 0304 	bic.w	r3, r3, #4
 8006a16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006a18:	2110      	movs	r1, #16
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff feb4 	bl	8006788 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fed7 	bl	80067d4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e015      	b.n	8006a58 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d3e5      	bcc.n	8006a2c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006a60:	2101      	movs	r1, #1
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f8ac 	bl	8006bc0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006a68:	20c8      	movs	r0, #200	; 0xc8
 8006a6a:	f7fa fd7b 	bl	8001564 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <USB_HostInit+0x164>)
 8006a94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <USB_HostInit+0x168>)
 8006a9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a9e:	e009      	b.n	8006ab4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2280      	movs	r2, #128	; 0x80
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a10      	ldr	r2, [pc, #64]	; (8006aec <USB_HostInit+0x16c>)
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <USB_HostInit+0x170>)
 8006ab0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f043 0210 	orr.w	r2, r3, #16
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <USB_HostInit+0x174>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ade:	b004      	add	sp, #16
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	01000200 	.word	0x01000200
 8006ae8:	00e00300 	.word	0x00e00300
 8006aec:	00600080 	.word	0x00600080
 8006af0:	004000e0 	.word	0x004000e0
 8006af4:	a3200008 	.word	0xa3200008

08006af8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b40:	461a      	mov	r2, r3
 8006b42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b46:	6053      	str	r3, [r2, #4]
 8006b48:	e009      	b.n	8006b5e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d106      	bne.n	8006b5e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b56:	461a      	mov	r2, r3
 8006b58:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b5c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b9c:	2064      	movs	r0, #100	; 0x64
 8006b9e:	f7fa fce1 	bl	8001564 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006bb0:	200a      	movs	r0, #10
 8006bb2:	f7fa fcd7 	bl	8001564 <HAL_Delay>

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006be4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <USB_DriveVbus+0x44>
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d106      	bne.n	8006c04 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c02:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	d109      	bne.n	8006c24 <USB_DriveVbus+0x64>
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c22:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	0c5b      	lsrs	r3, r3, #17
 8006c50:	f003 0303 	and.w	r3, r3, #3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	b29b      	uxth	r3, r3
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
	...

08006c84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	70fb      	strb	r3, [r7, #3]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70bb      	strb	r3, [r7, #2]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006cba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d87e      	bhi.n	8006dc0 <USB_HC_Init+0x13c>
 8006cc2:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <USB_HC_Init+0x44>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cd9 	.word	0x08006cd9
 8006ccc:	08006d83 	.word	0x08006d83
 8006cd0:	08006cd9 	.word	0x08006cd9
 8006cd4:	08006d45 	.word	0x08006d45
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f240 439d 	movw	r3, #1181	; 0x49d
 8006cea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006cec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da10      	bge.n	8006d16 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d12:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006d14:	e057      	b.n	8006dc6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d051      	beq.n	8006dc6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	0151      	lsls	r1, r2, #5
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	440a      	add	r2, r1
 8006d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d40:	60d3      	str	r3, [r2, #12]
      break;
 8006d42:	e040      	b.n	8006dc6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d50:	461a      	mov	r2, r3
 8006d52:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da34      	bge.n	8006dca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d80:	e023      	b.n	8006dca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f240 2325 	movw	r3, #549	; 0x225
 8006d94:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	da17      	bge.n	8006dce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	0151      	lsls	r1, r2, #5
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	440a      	add	r2, r1
 8006db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006dbc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006dbe:	e006      	b.n	8006dce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	77fb      	strb	r3, [r7, #31]
      break;
 8006dc4:	e004      	b.n	8006dd0 <USB_HC_Init+0x14c>
      break;
 8006dc6:	bf00      	nop
 8006dc8:	e002      	b.n	8006dd0 <USB_HC_Init+0x14c>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <USB_HC_Init+0x14c>
      break;
 8006dce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	2101      	movs	r1, #1
 8006de0:	fa01 f303 	lsl.w	r3, r1, r3
 8006de4:	6939      	ldr	r1, [r7, #16]
 8006de6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dea:	4313      	orrs	r3, r2
 8006dec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006dfa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	da03      	bge.n	8006e0a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	e001      	b.n	8006e0e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff ff0f 	bl	8006c32 <USB_GetHostSpeed>
 8006e14:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d106      	bne.n	8006e2c <USB_HC_Init+0x1a8>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d003      	beq.n	8006e2c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e001      	b.n	8006e30 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e30:	787b      	ldrb	r3, [r7, #1]
 8006e32:	059b      	lsls	r3, r3, #22
 8006e34:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e38:	78bb      	ldrb	r3, [r7, #2]
 8006e3a:	02db      	lsls	r3, r3, #11
 8006e3c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e40:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e46:	049b      	lsls	r3, r3, #18
 8006e48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	0159      	lsls	r1, r3, #5
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	440b      	add	r3, r1
 8006e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e66:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e6c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d10f      	bne.n	8006e96 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e94:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	; 0x30
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ebc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02d      	beq.n	8006f26 <USB_HC_StartXfer+0x86>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	791b      	ldrb	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d129      	bne.n	8006f26 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d117      	bne.n	8006f08 <USB_HC_StartXfer+0x68>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	79db      	ldrb	r3, [r3, #7]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <USB_HC_StartXfer+0x48>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	79db      	ldrb	r3, [r3, #7]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d10f      	bne.n	8006f08 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	6a3a      	ldr	r2, [r7, #32]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10b      	bne.n	8006f26 <USB_HC_StartXfer+0x86>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	795b      	ldrb	r3, [r3, #5]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d107      	bne.n	8006f26 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fa2f 	bl	8007380 <USB_DoPing>
      return HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e0f8      	b.n	8007118 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d018      	beq.n	8006f60 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	8912      	ldrh	r2, [r2, #8]
 8006f36:	4413      	add	r3, r2
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	8912      	ldrh	r2, [r2, #8]
 8006f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f42:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006f44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f46:	8b7b      	ldrh	r3, [r7, #26]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d90b      	bls.n	8006f64 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006f4c:	8b7b      	ldrh	r3, [r7, #26]
 8006f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	8912      	ldrh	r2, [r2, #8]
 8006f56:	fb02 f203 	mul.w	r2, r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	611a      	str	r2, [r3, #16]
 8006f5e:	e001      	b.n	8006f64 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006f60:	2301      	movs	r3, #1
 8006f62:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	78db      	ldrb	r3, [r3, #3]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	8912      	ldrh	r2, [r2, #8]
 8006f72:	fb02 f203 	mul.w	r2, r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	611a      	str	r2, [r3, #16]
 8006f7a:	e003      	b.n	8006f84 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	695a      	ldr	r2, [r3, #20]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f8e:	04d9      	lsls	r1, r3, #19
 8006f90:	4b63      	ldr	r3, [pc, #396]	; (8007120 <USB_HC_StartXfer+0x280>)
 8006f92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	7a9b      	ldrb	r3, [r3, #10]
 8006f9a:	075b      	lsls	r3, r3, #29
 8006f9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fa0:	69f9      	ldr	r1, [r7, #28]
 8006fa2:	0148      	lsls	r0, r1, #5
 8006fa4:	6a39      	ldr	r1, [r7, #32]
 8006fa6:	4401      	add	r1, r0
 8006fa8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	68d9      	ldr	r1, [r3, #12]
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ffc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007000:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	4413      	add	r3, r2
 800700a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	7e7b      	ldrb	r3, [r7, #25]
 8007012:	075b      	lsls	r3, r3, #29
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	0148      	lsls	r0, r1, #5
 8007018:	6a39      	ldr	r1, [r7, #32]
 800701a:	4401      	add	r1, r0
 800701c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800703a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	78db      	ldrb	r3, [r3, #3]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	e003      	b.n	8007056 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007054:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	461a      	mov	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e04e      	b.n	8007118 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	78db      	ldrb	r3, [r3, #3]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d149      	bne.n	8007116 <USB_HC_StartXfer+0x276>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d045      	beq.n	8007116 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	79db      	ldrb	r3, [r3, #7]
 800708e:	2b03      	cmp	r3, #3
 8007090:	d830      	bhi.n	80070f4 <USB_HC_StartXfer+0x254>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <USB_HC_StartXfer+0x1f8>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070cd 	.word	0x080070cd
 80070a0:	080070a9 	.word	0x080070a9
 80070a4:	080070cd 	.word	0x080070cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	3303      	adds	r3, #3
 80070ae:	089b      	lsrs	r3, r3, #2
 80070b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80070b2:	8afa      	ldrh	r2, [r7, #22]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d91c      	bls.n	80070f8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f043 0220 	orr.w	r2, r3, #32
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80070ca:	e015      	b.n	80070f8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	3303      	adds	r3, #3
 80070d2:	089b      	lsrs	r3, r3, #2
 80070d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80070d6:	8afa      	ldrh	r2, [r7, #22]
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d90a      	bls.n	80070fc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80070f2:	e003      	b.n	80070fc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80070f4:	bf00      	nop
 80070f6:	e002      	b.n	80070fe <USB_HC_StartXfer+0x25e>
        break;
 80070f8:	bf00      	nop
 80070fa:	e000      	b.n	80070fe <USB_HC_StartXfer+0x25e>
        break;
 80070fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	68d9      	ldr	r1, [r3, #12]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	785a      	ldrb	r2, [r3, #1]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	b29b      	uxth	r3, r3
 800710c:	2000      	movs	r0, #0
 800710e:	9000      	str	r0, [sp, #0]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fb81 	bl	8006818 <USB_WritePacket>
  }

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	1ff80000 	.word	0x1ff80000

08007124 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	b29b      	uxth	r3, r3
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007146:	b480      	push	{r7}
 8007148:	b089      	sub	sp, #36	; 0x24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	4413      	add	r3, r2
 8007166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	0c9b      	lsrs	r3, r3, #18
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	4413      	add	r3, r2
 800717c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	0fdb      	lsrs	r3, r3, #31
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d104      	bne.n	80071a0 <USB_HC_Halt+0x5a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e0e8      	b.n	8007372 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <USB_HC_Halt+0x66>
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d173      	bne.n	8007294 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 80cb 	bne.w	8007370 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d143      	bne.n	800726e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007204:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	4413      	add	r3, r2
 800720e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	440a      	add	r2, r1
 800721c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007224:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	440a      	add	r2, r1
 800723c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007244:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	3301      	adds	r3, #1
 800724a:	61fb      	str	r3, [r7, #28]
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007252:	d81d      	bhi.n	8007290 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	4413      	add	r3, r2
 800725c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800726a:	d0ec      	beq.n	8007246 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800726c:	e080      	b.n	8007370 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	440a      	add	r2, r1
 8007284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800728c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800728e:	e06f      	b.n	8007370 <USB_HC_Halt+0x22a>
            break;
 8007290:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007292:	e06d      	b.n	8007370 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	4413      	add	r3, r2
 800729c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d143      	bne.n	800734c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007302:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	4413      	add	r3, r2
 800730c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	440a      	add	r2, r1
 800731a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800731e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007322:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	3301      	adds	r3, #1
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007330:	d81d      	bhi.n	800736e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007348:	d0ec      	beq.n	8007324 <USB_HC_Halt+0x1de>
 800734a:	e011      	b.n	8007370 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	440a      	add	r2, r1
 8007362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	e000      	b.n	8007370 <USB_HC_Halt+0x22a>
          break;
 800736e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3724      	adds	r7, #36	; 0x24
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007394:	2301      	movs	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	04da      	lsls	r2, r3, #19
 800739c:	4b15      	ldr	r3, [pc, #84]	; (80073f4 <USB_DoPing+0x74>)
 800739e:	4013      	ands	r3, r2
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073de:	461a      	mov	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	1ff80000 	.word	0x1ff80000

080073f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff f982 	bl	8006712 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800740e:	2110      	movs	r1, #16
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff f9b9 	bl	8006788 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff f9dc 	bl	80067d4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	e01f      	b.n	8007462 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007438:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007440:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007448:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007456:	461a      	mov	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	3301      	adds	r3, #1
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b0f      	cmp	r3, #15
 8007466:	d9dc      	bls.n	8007422 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	e034      	b.n	80074d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007484:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800748c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007494:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a2:	461a      	mov	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	3301      	adds	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b4:	d80c      	bhi.n	80074d0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074cc:	d0ec      	beq.n	80074a8 <USB_StopHost+0xb0>
 80074ce:	e000      	b.n	80074d2 <USB_StopHost+0xda>
        break;
 80074d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3301      	adds	r3, #1
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d9c7      	bls.n	800746e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e4:	461a      	mov	r2, r3
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff f8fb 	bl	80066f0 <USB_EnableGlobalInt>

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af04      	add	r7, sp, #16
 800750a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800750c:	2301      	movs	r3, #1
 800750e:	2202      	movs	r2, #2
 8007510:	2102      	movs	r1, #2
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc66 	bl	8007de4 <USBH_FindInterface>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2bff      	cmp	r3, #255	; 0xff
 8007520:	d002      	beq.n	8007528 <USBH_CDC_InterfaceInit+0x24>
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d901      	bls.n	800752c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007528:	2302      	movs	r3, #2
 800752a:	e13d      	b.n	80077a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc3b 	bl	8007dac <USBH_SelectInterface>
 8007536:	4603      	mov	r3, r0
 8007538:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007540:	2302      	movs	r3, #2
 8007542:	e131      	b.n	80077a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800754a:	2050      	movs	r0, #80	; 0x50
 800754c:	f002 ff6c 	bl	800a428 <malloc>
 8007550:	4603      	mov	r3, r0
 8007552:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007564:	2302      	movs	r3, #2
 8007566:	e11f      	b.n	80077a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007568:	2250      	movs	r2, #80	; 0x50
 800756a:	2100      	movs	r1, #0
 800756c:	68b8      	ldr	r0, [r7, #8]
 800756e:	f002 ff79 	bl	800a464 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	211a      	movs	r1, #26
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	4413      	add	r3, r2
 800757e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b25b      	sxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	da15      	bge.n	80075b6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	211a      	movs	r1, #26
 8007590:	fb01 f303 	mul.w	r3, r1, r3
 8007594:	4413      	add	r3, r2
 8007596:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	211a      	movs	r1, #26
 80075a6:	fb01 f303 	mul.w	r3, r1, r3
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fe32 	bl	8009226 <USBH_AllocPipe>
 80075c2:	4603      	mov	r3, r0
 80075c4:	461a      	mov	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	7819      	ldrb	r1, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	7858      	ldrb	r0, [r3, #1]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	8952      	ldrh	r2, [r2, #10]
 80075e2:	9202      	str	r2, [sp, #8]
 80075e4:	2203      	movs	r2, #3
 80075e6:	9201      	str	r2, [sp, #4]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	4623      	mov	r3, r4
 80075ec:	4602      	mov	r2, r0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fdea 	bl	80091c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2200      	movs	r2, #0
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 f8f9 	bl	80097f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007602:	2300      	movs	r3, #0
 8007604:	2200      	movs	r2, #0
 8007606:	210a      	movs	r1, #10
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fbeb 	bl	8007de4 <USBH_FindInterface>
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	2bff      	cmp	r3, #255	; 0xff
 8007616:	d002      	beq.n	800761e <USBH_CDC_InterfaceInit+0x11a>
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d901      	bls.n	8007622 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800761e:	2302      	movs	r3, #2
 8007620:	e0c2      	b.n	80077a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	211a      	movs	r1, #26
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	4413      	add	r3, r2
 800762e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b25b      	sxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	da16      	bge.n	8007668 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	211a      	movs	r1, #26
 8007640:	fb01 f303 	mul.w	r3, r1, r3
 8007644:	4413      	add	r3, r2
 8007646:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	211a      	movs	r1, #26
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	4413      	add	r3, r2
 800765c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007660:	881a      	ldrh	r2, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	835a      	strh	r2, [r3, #26]
 8007666:	e015      	b.n	8007694 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	211a      	movs	r1, #26
 800766e:	fb01 f303 	mul.w	r3, r1, r3
 8007672:	4413      	add	r3, r2
 8007674:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	211a      	movs	r1, #26
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800768e:	881a      	ldrh	r2, [r3, #0]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	211a      	movs	r1, #26
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b25b      	sxtb	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da16      	bge.n	80076da <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	211a      	movs	r1, #26
 80076b2:	fb01 f303 	mul.w	r3, r1, r3
 80076b6:	4413      	add	r3, r2
 80076b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076bc:	781a      	ldrb	r2, [r3, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	211a      	movs	r1, #26
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076d2:	881a      	ldrh	r2, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	835a      	strh	r2, [r3, #26]
 80076d8:	e015      	b.n	8007706 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	211a      	movs	r1, #26
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	211a      	movs	r1, #26
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007700:	881a      	ldrh	r2, [r3, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	7b9b      	ldrb	r3, [r3, #14]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 fd8a 	bl	8009226 <USBH_AllocPipe>
 8007712:	4603      	mov	r3, r0
 8007714:	461a      	mov	r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	7bdb      	ldrb	r3, [r3, #15]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fd80 	bl	8009226 <USBH_AllocPipe>
 8007726:	4603      	mov	r3, r0
 8007728:	461a      	mov	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	7b59      	ldrb	r1, [r3, #13]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	7b98      	ldrb	r0, [r3, #14]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	8b12      	ldrh	r2, [r2, #24]
 8007746:	9202      	str	r2, [sp, #8]
 8007748:	2202      	movs	r2, #2
 800774a:	9201      	str	r2, [sp, #4]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	4623      	mov	r3, r4
 8007750:	4602      	mov	r2, r0
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fd38 	bl	80091c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	7b19      	ldrb	r1, [r3, #12]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	7bd8      	ldrb	r0, [r3, #15]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	8b52      	ldrh	r2, [r2, #26]
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	2202      	movs	r2, #2
 8007774:	9201      	str	r2, [sp, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4623      	mov	r3, r4
 800777a:	4602      	mov	r2, r0
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fd23 	bl	80091c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	7b5b      	ldrb	r3, [r3, #13]
 800778e:	2200      	movs	r2, #0
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f002 f82e 	bl	80097f4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f002 f827 	bl	80097f4 <USBH_LL_SetToggle>

  return USBH_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd90      	pop	{r4, r7, pc}

080077b0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00e      	beq.n	80077e8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 fd18 	bl	8009206 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 fd43 	bl	8009268 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	7b1b      	ldrb	r3, [r3, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00e      	beq.n	800780e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7b1b      	ldrb	r3, [r3, #12]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 fd05 	bl	8009206 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	7b1b      	ldrb	r3, [r3, #12]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fd30 	bl	8009268 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	7b5b      	ldrb	r3, [r3, #13]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00e      	beq.n	8007834 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	7b5b      	ldrb	r3, [r3, #13]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fcf2 	bl	8009206 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	7b5b      	ldrb	r3, [r3, #13]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fd1d 	bl	8009268 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	4618      	mov	r0, r3
 800784a:	f002 fdf5 	bl	800a438 <free>
    phost->pActiveClass->pData = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007854:	2200      	movs	r2, #0
 8007856:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3340      	adds	r3, #64	; 0x40
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8b1 	bl	80079e2 <GetLineCoding>
 8007880:	4603      	mov	r3, r0
 8007882:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007890:	2102      	movs	r1, #2
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007896:	7afb      	ldrb	r3, [r7, #11]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d877      	bhi.n	80079b4 <USBH_CDC_Process+0x114>
 80078c4:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <USBH_CDC_Process+0x2c>)
 80078c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ca:	bf00      	nop
 80078cc:	080078e1 	.word	0x080078e1
 80078d0:	080078e7 	.word	0x080078e7
 80078d4:	08007917 	.word	0x08007917
 80078d8:	0800798b 	.word	0x0800798b
 80078dc:	08007999 	.word	0x08007999
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
      break;
 80078e4:	e06d      	b.n	80079c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f897 	bl	8007a20 <SetLineCoding>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d104      	bne.n	8007906 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007904:	e058      	b.n	80079b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d055      	beq.n	80079b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2204      	movs	r2, #4
 8007910:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007914:	e050      	b.n	80079b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3340      	adds	r3, #64	; 0x40
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f860 	bl	80079e2 <GetLineCoding>
 8007922:	4603      	mov	r3, r0
 8007924:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d126      	bne.n	800797a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793e:	791b      	ldrb	r3, [r3, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d13b      	bne.n	80079bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007950:	429a      	cmp	r2, r3
 8007952:	d133      	bne.n	80079bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007960:	429a      	cmp	r2, r3
 8007962:	d12b      	bne.n	80079bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800796e:	429a      	cmp	r2, r3
 8007970:	d124      	bne.n	80079bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f958 	bl	8007c28 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007978:	e020      	b.n	80079bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d01d      	beq.n	80079bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2204      	movs	r2, #4
 8007984:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007988:	e018      	b.n	80079bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f867 	bl	8007a5e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f8da 	bl	8007b4a <CDC_ProcessReception>
      break;
 8007996:	e014      	b.n	80079c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 ffe3 	bl	8008966 <USBH_ClrFeature>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80079b2:	e005      	b.n	80079c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80079b4:	bf00      	nop
 80079b6:	e004      	b.n	80079c2 <USBH_CDC_Process+0x122>
      break;
 80079b8:	bf00      	nop
 80079ba:	e002      	b.n	80079c2 <USBH_CDC_Process+0x122>
      break;
 80079bc:	bf00      	nop
 80079be:	e000      	b.n	80079c2 <USBH_CDC_Process+0x122>
      break;
 80079c0:	bf00      	nop

  }

  return status;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	22a1      	movs	r2, #161	; 0xa1
 80079f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2221      	movs	r2, #33	; 0x21
 80079f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2207      	movs	r2, #7
 8007a08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f988 	bl	8008d26 <USBH_CtlReq>
 8007a16:	4603      	mov	r3, r0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2221      	movs	r2, #33	; 0x21
 8007a2e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2207      	movs	r2, #7
 8007a46:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2207      	movs	r2, #7
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f969 	bl	8008d26 <USBH_CtlReq>
 8007a54:	4603      	mov	r3, r0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af02      	add	r7, sp, #8
 8007a64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d002      	beq.n	8007a84 <CDC_ProcessTransmission+0x26>
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d023      	beq.n	8007aca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a82:	e05e      	b.n	8007b42 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	8b12      	ldrh	r2, [r2, #24]
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d90b      	bls.n	8007aa8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	69d9      	ldr	r1, [r3, #28]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8b1a      	ldrh	r2, [r3, #24]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	7b5b      	ldrb	r3, [r3, #13]
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	9000      	str	r0, [sp, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fb4e 	bl	8009142 <USBH_BulkSendData>
 8007aa6:	e00b      	b.n	8007ac0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	7b5b      	ldrb	r3, [r3, #13]
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	9000      	str	r0, [sp, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fb41 	bl	8009142 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ac8:	e03b      	b.n	8007b42 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	7b5b      	ldrb	r3, [r3, #13]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 fe65 	bl	80097a0 <USBH_LL_GetURBState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ada:	7afb      	ldrb	r3, [r7, #11]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d128      	bne.n	8007b32 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	8b12      	ldrh	r2, [r2, #24]
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d90e      	bls.n	8007b0a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	8b12      	ldrh	r2, [r2, #24]
 8007af4:	1a9a      	subs	r2, r3, r2
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	8b12      	ldrh	r2, [r2, #24]
 8007b02:	441a      	add	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	61da      	str	r2, [r3, #28]
 8007b08:	e002      	b.n	8007b10 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b20:	e00e      	b.n	8007b40 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f868 	bl	8007c00 <USBH_CDC_TransmitCallback>
      break;
 8007b30:	e006      	b.n	8007b40 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b32:	7afb      	ldrb	r3, [r7, #11]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d103      	bne.n	8007b40 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b40:	bf00      	nop
  }
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b086      	sub	sp, #24
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d002      	beq.n	8007b70 <CDC_ProcessReception+0x26>
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d00e      	beq.n	8007b8c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b6e:	e043      	b.n	8007bf8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	6a19      	ldr	r1, [r3, #32]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	8b5a      	ldrh	r2, [r3, #26]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	7b1b      	ldrb	r3, [r3, #12]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fb05 	bl	800918c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2204      	movs	r2, #4
 8007b86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b8a:	e035      	b.n	8007bf8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	7b1b      	ldrb	r3, [r3, #12]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fe04 	bl	80097a0 <USBH_LL_GetURBState>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b9c:	7cfb      	ldrb	r3, [r7, #19]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d129      	bne.n	8007bf6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	7b1b      	ldrb	r3, [r3, #12]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fd67 	bl	800967c <USBH_LL_GetLastXferSize>
 8007bae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d016      	beq.n	8007be8 <CDC_ProcessReception+0x9e>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	8b5b      	ldrh	r3, [r3, #26]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d910      	bls.n	8007be8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1ad2      	subs	r2, r2, r3
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	6a1a      	ldr	r2, [r3, #32]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	441a      	add	r2, r3
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2203      	movs	r2, #3
 8007be2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007be6:	e006      	b.n	8007bf6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f80f 	bl	8007c14 <USBH_CDC_ReceiveCallback>
      break;
 8007bf6:	bf00      	nop
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c50:	2302      	movs	r3, #2
 8007c52:	e029      	b.n	8007ca8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	79fa      	ldrb	r2, [r7, #7]
 8007c58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f81f 	bl	8007cb0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f001 fc37 	bl	8009514 <USBH_LL_Init>

  return USBH_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e009      	b.n	8007cd6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	33e0      	adds	r3, #224	; 0xe0
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	2200      	movs	r2, #0
 8007cce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b0e      	cmp	r3, #14
 8007cda:	d9f2      	bls.n	8007cc2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e009      	b.n	8007cf6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cfc:	d3f1      	bcc.n	8007ce2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2240      	movs	r2, #64	; 0x40
 8007d22:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d016      	beq.n	8007d9a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10e      	bne.n	8007d94 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d7c:	1c59      	adds	r1, r3, #1
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	33de      	adds	r3, #222	; 0xde
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
 8007d92:	e004      	b.n	8007d9e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d94:	2302      	movs	r3, #2
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e001      	b.n	8007d9e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d204      	bcs.n	8007dd2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007dd0:	e001      	b.n	8007dd6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	4608      	mov	r0, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	461a      	mov	r2, r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	70fb      	strb	r3, [r7, #3]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70bb      	strb	r3, [r7, #2]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e0c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e0e:	e025      	b.n	8007e5c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	221a      	movs	r2, #26
 8007e14:	fb02 f303 	mul.w	r3, r2, r3
 8007e18:	3308      	adds	r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3302      	adds	r3, #2
 8007e20:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	795b      	ldrb	r3, [r3, #5]
 8007e26:	78fa      	ldrb	r2, [r7, #3]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d002      	beq.n	8007e32 <USBH_FindInterface+0x4e>
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	2bff      	cmp	r3, #255	; 0xff
 8007e30:	d111      	bne.n	8007e56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e36:	78ba      	ldrb	r2, [r7, #2]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d002      	beq.n	8007e42 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e3c:	78bb      	ldrb	r3, [r7, #2]
 8007e3e:	2bff      	cmp	r3, #255	; 0xff
 8007e40:	d109      	bne.n	8007e56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e46:	787a      	ldrb	r2, [r7, #1]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d002      	beq.n	8007e52 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e4c:	787b      	ldrb	r3, [r7, #1]
 8007e4e:	2bff      	cmp	r3, #255	; 0xff
 8007e50:	d101      	bne.n	8007e56 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	e006      	b.n	8007e64 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d9d6      	bls.n	8007e10 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e62:	23ff      	movs	r3, #255	; 0xff
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	371c      	adds	r7, #28
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fb87 	bl	800958c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007e7e:	2101      	movs	r1, #1
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fca0 	bl	80097c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af04      	add	r7, sp, #16
 8007e96:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d102      	bne.n	8007eb2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2203      	movs	r2, #3
 8007eb0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b0b      	cmp	r3, #11
 8007eba:	f200 81b3 	bhi.w	8008224 <USBH_Process+0x394>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <USBH_Process+0x34>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007ef5 	.word	0x08007ef5
 8007ec8:	08007f27 	.word	0x08007f27
 8007ecc:	08007f8f 	.word	0x08007f8f
 8007ed0:	080081bf 	.word	0x080081bf
 8007ed4:	08008225 	.word	0x08008225
 8007ed8:	08008033 	.word	0x08008033
 8007edc:	08008165 	.word	0x08008165
 8007ee0:	08008069 	.word	0x08008069
 8007ee4:	08008089 	.word	0x08008089
 8007ee8:	080080a9 	.word	0x080080a9
 8007eec:	080080d7 	.word	0x080080d7
 8007ef0:	080081a7 	.word	0x080081a7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8193 	beq.w	8008228 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f08:	20c8      	movs	r0, #200	; 0xc8
 8007f0a:	f001 fca3 	bl	8009854 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fb99 	bl	8009646 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f24:	e180      	b.n	8008228 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d107      	bne.n	8007f40 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f3e:	e182      	b.n	8008246 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f4a:	d914      	bls.n	8007f76 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f52:	3301      	adds	r3, #1
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d903      	bls.n	8007f6e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	220d      	movs	r2, #13
 8007f6a:	701a      	strb	r2, [r3, #0]
      break;
 8007f6c:	e16b      	b.n	8008246 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	701a      	strb	r2, [r3, #0]
      break;
 8007f74:	e167      	b.n	8008246 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f7c:	f103 020a 	add.w	r2, r3, #10
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f86:	200a      	movs	r0, #10
 8007f88:	f001 fc64 	bl	8009854 <USBH_Delay>
      break;
 8007f8c:	e15b      	b.n	8008246 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f9e:	2104      	movs	r1, #4
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fa4:	2064      	movs	r0, #100	; 0x64
 8007fa6:	f001 fc55 	bl	8009854 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 fb24 	bl	80095f8 <USBH_LL_GetSpeed>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 f92f 	bl	8009226 <USBH_AllocPipe>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	461a      	mov	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007fd0:	2180      	movs	r1, #128	; 0x80
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 f927 	bl	8009226 <USBH_AllocPipe>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7919      	ldrb	r1, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ff4:	b292      	uxth	r2, r2
 8007ff6:	9202      	str	r2, [sp, #8]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	9201      	str	r2, [sp, #4]
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4603      	mov	r3, r0
 8008000:	2280      	movs	r2, #128	; 0x80
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f8e0 	bl	80091c8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7959      	ldrb	r1, [r3, #5]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800801c:	b292      	uxth	r2, r2
 800801e:	9202      	str	r2, [sp, #8]
 8008020:	2200      	movs	r2, #0
 8008022:	9201      	str	r2, [sp, #4]
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	4603      	mov	r3, r0
 8008028:	2200      	movs	r2, #0
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 f8cc 	bl	80091c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008030:	e109      	b.n	8008246 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f90c 	bl	8008250 <USBH_HandleEnum>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	f040 80f3 	bne.w	800822c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008054:	2b01      	cmp	r3, #1
 8008056:	d103      	bne.n	8008060 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2208      	movs	r2, #8
 800805c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800805e:	e0e5      	b.n	800822c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2207      	movs	r2, #7
 8008064:	701a      	strb	r2, [r3, #0]
      break;
 8008066:	e0e1      	b.n	800822c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 80de 	beq.w	8008230 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800807a:	2101      	movs	r1, #1
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2208      	movs	r2, #8
 8008084:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008086:	e0d3      	b.n	8008230 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800808e:	b29b      	uxth	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fc20 	bl	80088d8 <USBH_SetCfg>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	f040 80ca 	bne.w	8008234 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2209      	movs	r2, #9
 80080a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080a6:	e0c5      	b.n	8008234 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80080b6:	2101      	movs	r1, #1
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fc30 	bl	800891e <USBH_SetFeature>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 80b9 	bne.w	8008238 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	220a      	movs	r2, #10
 80080ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080cc:	e0b4      	b.n	8008238 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	220a      	movs	r2, #10
 80080d2:	701a      	strb	r2, [r3, #0]
      break;
 80080d4:	e0b0      	b.n	8008238 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80ad 	beq.w	800823c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
 80080ee:	e016      	b.n	800811e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80080f0:	7bfa      	ldrb	r2, [r7, #15]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32de      	adds	r2, #222	; 0xde
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	791a      	ldrb	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008102:	429a      	cmp	r2, r3
 8008104:	d108      	bne.n	8008118 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008106:	7bfa      	ldrb	r2, [r7, #15]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	32de      	adds	r2, #222	; 0xde
 800810c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008116:	e005      	b.n	8008124 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	3301      	adds	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0e5      	beq.n	80080f0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d016      	beq.n	800815c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2206      	movs	r2, #6
 8008144:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800814c:	2103      	movs	r1, #3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008152:	e073      	b.n	800823c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	220d      	movs	r2, #13
 8008158:	701a      	strb	r2, [r3, #0]
      break;
 800815a:	e06f      	b.n	800823c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	220d      	movs	r2, #13
 8008160:	701a      	strb	r2, [r3, #0]
      break;
 8008162:	e06b      	b.n	800823c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d017      	beq.n	800819e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
 800817a:	4603      	mov	r3, r0
 800817c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d103      	bne.n	800818e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	220b      	movs	r2, #11
 800818a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800818c:	e058      	b.n	8008240 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d154      	bne.n	8008240 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	220d      	movs	r2, #13
 800819a:	701a      	strb	r2, [r3, #0]
      break;
 800819c:	e050      	b.n	8008240 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	220d      	movs	r2, #13
 80081a2:	701a      	strb	r2, [r3, #0]
      break;
 80081a4:	e04c      	b.n	8008240 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d049      	beq.n	8008244 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
      }
      break;
 80081bc:	e042      	b.n	8008244 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff fd72 	bl	8007cb0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081fa:	2105      	movs	r1, #5
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	d107      	bne.n	800821c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff fe2b 	bl	8007e70 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800821a:	e014      	b.n	8008246 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f9b5 	bl	800958c <USBH_LL_Start>
      break;
 8008222:	e010      	b.n	8008246 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008224:	bf00      	nop
 8008226:	e00e      	b.n	8008246 <USBH_Process+0x3b6>
      break;
 8008228:	bf00      	nop
 800822a:	e00c      	b.n	8008246 <USBH_Process+0x3b6>
      break;
 800822c:	bf00      	nop
 800822e:	e00a      	b.n	8008246 <USBH_Process+0x3b6>
    break;
 8008230:	bf00      	nop
 8008232:	e008      	b.n	8008246 <USBH_Process+0x3b6>
      break;
 8008234:	bf00      	nop
 8008236:	e006      	b.n	8008246 <USBH_Process+0x3b6>
      break;
 8008238:	bf00      	nop
 800823a:	e004      	b.n	8008246 <USBH_Process+0x3b6>
      break;
 800823c:	bf00      	nop
 800823e:	e002      	b.n	8008246 <USBH_Process+0x3b6>
      break;
 8008240:	bf00      	nop
 8008242:	e000      	b.n	8008246 <USBH_Process+0x3b6>
      break;
 8008244:	bf00      	nop
  }
  return USBH_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af04      	add	r7, sp, #16
 8008256:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800825c:	2301      	movs	r3, #1
 800825e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	2b07      	cmp	r3, #7
 8008266:	f200 81c1 	bhi.w	80085ec <USBH_HandleEnum+0x39c>
 800826a:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <USBH_HandleEnum+0x20>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008291 	.word	0x08008291
 8008274:	0800834f 	.word	0x0800834f
 8008278:	080083b9 	.word	0x080083b9
 800827c:	08008447 	.word	0x08008447
 8008280:	080084b1 	.word	0x080084b1
 8008284:	08008521 	.word	0x08008521
 8008288:	08008567 	.word	0x08008567
 800828c:	080085ad 	.word	0x080085ad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008290:	2108      	movs	r1, #8
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa50 	bl	8008738 <USBH_Get_DevDesc>
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d130      	bne.n	8008304 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7919      	ldrb	r1, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082c6:	b292      	uxth	r2, r2
 80082c8:	9202      	str	r2, [sp, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	9201      	str	r2, [sp, #4]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	4603      	mov	r3, r0
 80082d2:	2280      	movs	r2, #128	; 0x80
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 ff77 	bl	80091c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	7959      	ldrb	r1, [r3, #5]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082ee:	b292      	uxth	r2, r2
 80082f0:	9202      	str	r2, [sp, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	9201      	str	r2, [sp, #4]
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	4603      	mov	r3, r0
 80082fa:	2200      	movs	r2, #0
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 ff63 	bl	80091c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008302:	e175      	b.n	80085f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b03      	cmp	r3, #3
 8008308:	f040 8172 	bne.w	80085f0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008312:	3301      	adds	r3, #1
 8008314:	b2da      	uxtb	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008322:	2b03      	cmp	r3, #3
 8008324:	d903      	bls.n	800832e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220d      	movs	r2, #13
 800832a:	701a      	strb	r2, [r3, #0]
      break;
 800832c:	e160      	b.n	80085f0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	795b      	ldrb	r3, [r3, #5]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 ff97 	bl	8009268 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	791b      	ldrb	r3, [r3, #4]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 ff91 	bl	8009268 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
      break;
 800834c:	e150      	b.n	80085f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800834e:	2112      	movs	r1, #18
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9f1 	bl	8008738 <USBH_Get_DevDesc>
 8008356:	4603      	mov	r3, r0
 8008358:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d103      	bne.n	8008368 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008366:	e145      	b.n	80085f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b03      	cmp	r3, #3
 800836c:	f040 8142 	bne.w	80085f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008376:	3301      	adds	r3, #1
 8008378:	b2da      	uxtb	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008386:	2b03      	cmp	r3, #3
 8008388:	d903      	bls.n	8008392 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	220d      	movs	r2, #13
 800838e:	701a      	strb	r2, [r3, #0]
      break;
 8008390:	e130      	b.n	80085f4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	795b      	ldrb	r3, [r3, #5]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 ff65 	bl	8009268 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	791b      	ldrb	r3, [r3, #4]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 ff5f 	bl	8009268 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]
      break;
 80083b6:	e11d      	b.n	80085f4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083b8:	2101      	movs	r1, #1
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa68 	bl	8008890 <USBH_SetAddress>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d132      	bne.n	8008430 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80083ca:	2002      	movs	r0, #2
 80083cc:	f001 fa42 	bl	8009854 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2203      	movs	r2, #3
 80083dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7919      	ldrb	r1, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083f2:	b292      	uxth	r2, r2
 80083f4:	9202      	str	r2, [sp, #8]
 80083f6:	2200      	movs	r2, #0
 80083f8:	9201      	str	r2, [sp, #4]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4603      	mov	r3, r0
 80083fe:	2280      	movs	r2, #128	; 0x80
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fee1 	bl	80091c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7959      	ldrb	r1, [r3, #5]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800841a:	b292      	uxth	r2, r2
 800841c:	9202      	str	r2, [sp, #8]
 800841e:	2200      	movs	r2, #0
 8008420:	9201      	str	r2, [sp, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	4603      	mov	r3, r0
 8008426:	2200      	movs	r2, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fecd 	bl	80091c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800842e:	e0e3      	b.n	80085f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b03      	cmp	r3, #3
 8008434:	f040 80e0 	bne.w	80085f8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	220d      	movs	r2, #13
 800843c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	705a      	strb	r2, [r3, #1]
      break;
 8008444:	e0d8      	b.n	80085f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008446:	2109      	movs	r1, #9
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f99d 	bl	8008788 <USBH_Get_CfgDesc>
 800844e:	4603      	mov	r3, r0
 8008450:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2204      	movs	r2, #4
 800845c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800845e:	e0cd      	b.n	80085fc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	2b03      	cmp	r3, #3
 8008464:	f040 80ca 	bne.w	80085fc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800846e:	3301      	adds	r3, #1
 8008470:	b2da      	uxtb	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800847e:	2b03      	cmp	r3, #3
 8008480:	d903      	bls.n	800848a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	220d      	movs	r2, #13
 8008486:	701a      	strb	r2, [r3, #0]
      break;
 8008488:	e0b8      	b.n	80085fc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	795b      	ldrb	r3, [r3, #5]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fee9 	bl	8009268 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	791b      	ldrb	r3, [r3, #4]
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fee3 	bl	8009268 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
      break;
 80084ae:	e0a5      	b.n	80085fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f965 	bl	8008788 <USBH_Get_CfgDesc>
 80084be:	4603      	mov	r3, r0
 80084c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d103      	bne.n	80084d0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2205      	movs	r2, #5
 80084cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ce:	e097      	b.n	8008600 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	f040 8094 	bne.w	8008600 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084de:	3301      	adds	r3, #1
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d903      	bls.n	80084fa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	220d      	movs	r2, #13
 80084f6:	701a      	strb	r2, [r3, #0]
      break;
 80084f8:	e082      	b.n	8008600 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	795b      	ldrb	r3, [r3, #5]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 feb1 	bl	8009268 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	791b      	ldrb	r3, [r3, #4]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 feab 	bl	8009268 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
      break;
 800851e:	e06f      	b.n	8008600 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008526:	2b00      	cmp	r3, #0
 8008528:	d019      	beq.n	800855e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008536:	23ff      	movs	r3, #255	; 0xff
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f949 	bl	80087d0 <USBH_Get_StringDesc>
 800853e:	4603      	mov	r3, r0
 8008540:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d103      	bne.n	8008550 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2206      	movs	r2, #6
 800854c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800854e:	e059      	b.n	8008604 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d156      	bne.n	8008604 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2206      	movs	r2, #6
 800855a:	705a      	strb	r2, [r3, #1]
      break;
 800855c:	e052      	b.n	8008604 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2206      	movs	r2, #6
 8008562:	705a      	strb	r2, [r3, #1]
      break;
 8008564:	e04e      	b.n	8008604 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800856c:	2b00      	cmp	r3, #0
 800856e:	d019      	beq.n	80085a4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800857c:	23ff      	movs	r3, #255	; 0xff
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f926 	bl	80087d0 <USBH_Get_StringDesc>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2207      	movs	r2, #7
 8008592:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008594:	e038      	b.n	8008608 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	2b03      	cmp	r3, #3
 800859a:	d135      	bne.n	8008608 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2207      	movs	r2, #7
 80085a0:	705a      	strb	r2, [r3, #1]
      break;
 80085a2:	e031      	b.n	8008608 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2207      	movs	r2, #7
 80085a8:	705a      	strb	r2, [r3, #1]
      break;
 80085aa:	e02d      	b.n	8008608 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d017      	beq.n	80085e6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085c2:	23ff      	movs	r3, #255	; 0xff
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f903 	bl	80087d0 <USBH_Get_StringDesc>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80085d8:	e018      	b.n	800860c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d115      	bne.n	800860c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
      break;
 80085e4:	e012      	b.n	800860c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ea:	e00f      	b.n	800860c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80085ec:	bf00      	nop
 80085ee:	e00e      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 80085f0:	bf00      	nop
 80085f2:	e00c      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 80085f4:	bf00      	nop
 80085f6:	e00a      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 80085f8:	bf00      	nop
 80085fa:	e008      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 80085fc:	bf00      	nop
 80085fe:	e006      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 8008600:	bf00      	nop
 8008602:	e004      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 8008604:	bf00      	nop
 8008606:	e002      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 8008608:	bf00      	nop
 800860a:	e000      	b.n	800860e <USBH_HandleEnum+0x3be>
      break;
 800860c:	bf00      	nop
  }
  return Status;
 800860e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f804 	bl	800865a <USBH_HandleSof>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b0b      	cmp	r3, #11
 800866a:	d10a      	bne.n	8008682 <USBH_HandleSof+0x28>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d005      	beq.n	8008682 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
  }
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800869a:	bf00      	nop
}
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80086b6:	bf00      	nop
}
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 ff56 	bl	80095c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fda3 	bl	8009268 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	795b      	ldrb	r3, [r3, #5]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fd9d 	bl	8009268 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af02      	add	r7, sp, #8
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	b29b      	uxth	r3, r3
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008756:	2100      	movs	r1, #0
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f864 	bl	8008826 <USBH_GetDescriptor>
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008774:	78fa      	ldrb	r2, [r7, #3]
 8008776:	b292      	uxth	r2, r2
 8008778:	4619      	mov	r1, r3
 800877a:	f000 f918 	bl	80089ae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af02      	add	r7, sp, #8
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	331c      	adds	r3, #28
 8008798:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800879a:	887b      	ldrh	r3, [r7, #2]
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f83d 	bl	8008826 <USBH_GetDescriptor>
 80087ac:	4603      	mov	r3, r0
 80087ae:	72fb      	strb	r3, [r7, #11]
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d107      	bne.n	80087c6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087bc:	887a      	ldrh	r2, [r7, #2]
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f964 	bl	8008a8e <USBH_ParseCfgDesc>
  }

  return status;
 80087c6:	7afb      	ldrb	r3, [r7, #11]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	461a      	mov	r2, r3
 80087dc:	460b      	mov	r3, r1
 80087de:	72fb      	strb	r3, [r7, #11]
 80087e0:	4613      	mov	r3, r2
 80087e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80087ec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80087f4:	893b      	ldrh	r3, [r7, #8]
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	460b      	mov	r3, r1
 80087fa:	2100      	movs	r1, #0
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f812 	bl	8008826 <USBH_GetDescriptor>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]
 8008806:	7dfb      	ldrb	r3, [r7, #23]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d107      	bne.n	800881c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008812:	893a      	ldrh	r2, [r7, #8]
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fa37 	bl	8008c8a <USBH_ParseStringDesc>
  }

  return status;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	607b      	str	r3, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	72fb      	strb	r3, [r7, #11]
 8008834:	4613      	mov	r3, r2
 8008836:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	789b      	ldrb	r3, [r3, #2]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d11c      	bne.n	800887a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008846:	b2da      	uxtb	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2206      	movs	r2, #6
 8008850:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	893a      	ldrh	r2, [r7, #8]
 8008856:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008858:	893b      	ldrh	r3, [r7, #8]
 800885a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800885e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008862:	d104      	bne.n	800886e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f240 4209 	movw	r2, #1033	; 0x409
 800886a:	829a      	strh	r2, [r3, #20]
 800886c:	e002      	b.n	8008874 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8b3a      	ldrh	r2, [r7, #24]
 8008878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800887a:	8b3b      	ldrh	r3, [r7, #24]
 800887c:	461a      	mov	r2, r3
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fa50 	bl	8008d26 <USBH_CtlReq>
 8008886:	4603      	mov	r3, r0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	789b      	ldrb	r3, [r3, #2]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10f      	bne.n	80088c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2205      	movs	r2, #5
 80088ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088c4:	2200      	movs	r2, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa2c 	bl	8008d26 <USBH_CtlReq>
 80088ce:	4603      	mov	r3, r0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	789b      	ldrb	r3, [r3, #2]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d10e      	bne.n	800890a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2209      	movs	r2, #9
 80088f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	887a      	ldrh	r2, [r7, #2]
 80088fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fa09 	bl	8008d26 <USBH_CtlReq>
 8008914:	4603      	mov	r3, r0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	789b      	ldrb	r3, [r3, #2]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d10f      	bne.n	8008952 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2203      	movs	r2, #3
 800893c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9e5 	bl	8008d26 <USBH_CtlReq>
 800895c:	4603      	mov	r3, r0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	789b      	ldrb	r3, [r3, #2]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d10f      	bne.n	800899a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2202      	movs	r2, #2
 800897e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800899a:	2200      	movs	r2, #0
 800899c:	2100      	movs	r1, #0
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f9c1 	bl	8008d26 <USBH_CtlReq>
 80089a4:	4603      	mov	r3, r0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	4613      	mov	r3, r2
 80089ba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	781a      	ldrb	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	785a      	ldrb	r2, [r3, #1]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3302      	adds	r3, #2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3303      	adds	r3, #3
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4313      	orrs	r3, r2
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	791a      	ldrb	r2, [r3, #4]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	795a      	ldrb	r2, [r3, #5]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	799a      	ldrb	r2, [r3, #6]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	79da      	ldrb	r2, [r3, #7]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008a08:	88fb      	ldrh	r3, [r7, #6]
 8008a0a:	2b08      	cmp	r3, #8
 8008a0c:	d939      	bls.n	8008a82 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	3308      	adds	r3, #8
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	3309      	adds	r3, #9
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4313      	orrs	r3, r2
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	330a      	adds	r3, #10
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	330b      	adds	r3, #11
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	330d      	adds	r3, #13
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	7b9a      	ldrb	r2, [r3, #14]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	7bda      	ldrb	r2, [r3, #15]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	7c1a      	ldrb	r2, [r3, #16]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	7c5a      	ldrb	r2, [r3, #17]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	745a      	strb	r2, [r3, #17]
  }
}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b08a      	sub	sp, #40	; 0x28
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	785a      	ldrb	r2, [r3, #1]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3302      	adds	r3, #2
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	3303      	adds	r3, #3
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	791a      	ldrb	r2, [r3, #4]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	795a      	ldrb	r2, [r3, #5]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	799a      	ldrb	r2, [r3, #6]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	79da      	ldrb	r2, [r3, #7]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	7a1a      	ldrb	r2, [r3, #8]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	2b09      	cmp	r3, #9
 8008b08:	d95f      	bls.n	8008bca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b0a:	2309      	movs	r3, #9
 8008b0c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b12:	e051      	b.n	8008bb8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b14:	f107 0316 	add.w	r3, r7, #22
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b1c:	f000 f8e8 	bl	8008cf0 <USBH_GetNextDesc>
 8008b20:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	785b      	ldrb	r3, [r3, #1]
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d146      	bne.n	8008bb8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b2e:	221a      	movs	r2, #26
 8008b30:	fb02 f303 	mul.w	r3, r2, r3
 8008b34:	3308      	adds	r3, #8
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4413      	add	r3, r2
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b40:	69f8      	ldr	r0, [r7, #28]
 8008b42:	f000 f846 	bl	8008bd2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b50:	e022      	b.n	8008b98 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b52:	f107 0316 	add.w	r3, r7, #22
 8008b56:	4619      	mov	r1, r3
 8008b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b5a:	f000 f8c9 	bl	8008cf0 <USBH_GetNextDesc>
 8008b5e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	2b05      	cmp	r3, #5
 8008b66:	d117      	bne.n	8008b98 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b70:	3201      	adds	r2, #1
 8008b72:	00d2      	lsls	r2, r2, #3
 8008b74:	211a      	movs	r1, #26
 8008b76:	fb01 f303 	mul.w	r3, r1, r3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4413      	add	r3, r2
 8008b82:	3304      	adds	r3, #4
 8008b84:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b88:	69b8      	ldr	r0, [r7, #24]
 8008b8a:	f000 f851 	bl	8008c30 <USBH_ParseEPDesc>
            ep_ix++;
 8008b8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008b92:	3301      	adds	r3, #1
 8008b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	791b      	ldrb	r3, [r3, #4]
 8008b9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d204      	bcs.n	8008bae <USBH_ParseCfgDesc+0x120>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	885a      	ldrh	r2, [r3, #2]
 8008ba8:	8afb      	ldrh	r3, [r7, #22]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d8d1      	bhi.n	8008b52 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d804      	bhi.n	8008bca <USBH_ParseCfgDesc+0x13c>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	885a      	ldrh	r2, [r3, #2]
 8008bc4:	8afb      	ldrh	r3, [r7, #22]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d8a4      	bhi.n	8008b14 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008bca:	bf00      	nop
 8008bcc:	3728      	adds	r7, #40	; 0x28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785a      	ldrb	r2, [r3, #1]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	789a      	ldrb	r2, [r3, #2]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	78da      	ldrb	r2, [r3, #3]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	791a      	ldrb	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	795a      	ldrb	r2, [r3, #5]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	799a      	ldrb	r2, [r3, #6]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	79da      	ldrb	r2, [r3, #7]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	7a1a      	ldrb	r2, [r3, #8]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	721a      	strb	r2, [r3, #8]
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781a      	ldrb	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	785a      	ldrb	r2, [r3, #1]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	789a      	ldrb	r2, [r3, #2]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	78da      	ldrb	r2, [r3, #3]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	3305      	adds	r3, #5
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	021b      	lsls	r3, r3, #8
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	799a      	ldrb	r2, [r3, #6]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	719a      	strb	r2, [r3, #6]
}
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b087      	sub	sp, #28
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d120      	bne.n	8008ce4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	1e9a      	subs	r2, r3, #2
 8008ca8:	88fb      	ldrh	r3, [r7, #6]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	bf28      	it	cs
 8008cae:	4613      	movcs	r3, r2
 8008cb0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3302      	adds	r3, #2
 8008cb6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	82fb      	strh	r3, [r7, #22]
 8008cbc:	e00b      	b.n	8008cd6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008cbe:	8afb      	ldrh	r3, [r7, #22]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008cd0:	8afb      	ldrh	r3, [r7, #22]
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	82fb      	strh	r3, [r7, #22]
 8008cd6:	8afa      	ldrh	r2, [r7, #22]
 8008cd8:	8abb      	ldrh	r3, [r7, #20]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d3ef      	bcc.n	8008cbe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	371c      	adds	r7, #28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	881a      	ldrh	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	4413      	add	r3, r2
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4413      	add	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d18:	68fb      	ldr	r3, [r7, #12]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	4613      	mov	r3, r2
 8008d32:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d34:	2301      	movs	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	789b      	ldrb	r3, [r3, #2]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d002      	beq.n	8008d46 <USBH_CtlReq+0x20>
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d00f      	beq.n	8008d64 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008d44:	e027      	b.n	8008d96 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	88fa      	ldrh	r2, [r7, #6]
 8008d50:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	75fb      	strb	r3, [r7, #23]
      break;
 8008d62:	e018      	b.n	8008d96 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 f81b 	bl	8008da0 <USBH_HandleControl>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <USBH_CtlReq+0x54>
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d106      	bne.n	8008d88 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	761a      	strb	r2, [r3, #24]
      break;
 8008d86:	e005      	b.n	8008d94 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d102      	bne.n	8008d94 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	709a      	strb	r2, [r3, #2]
      break;
 8008d94:	bf00      	nop
  }
  return status;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af02      	add	r7, sp, #8
 8008da6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008da8:	2301      	movs	r3, #1
 8008daa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7e1b      	ldrb	r3, [r3, #24]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	2b0a      	cmp	r3, #10
 8008db8:	f200 8156 	bhi.w	8009068 <USBH_HandleControl+0x2c8>
 8008dbc:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <USBH_HandleControl+0x24>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	08008e0b 	.word	0x08008e0b
 8008dcc:	08008e75 	.word	0x08008e75
 8008dd0:	08008e9b 	.word	0x08008e9b
 8008dd4:	08008ed3 	.word	0x08008ed3
 8008dd8:	08008efd 	.word	0x08008efd
 8008ddc:	08008f4f 	.word	0x08008f4f
 8008de0:	08008f71 	.word	0x08008f71
 8008de4:	08008fad 	.word	0x08008fad
 8008de8:	08008fd3 	.word	0x08008fd3
 8008dec:	08009011 	.word	0x08009011
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f103 0110 	add.w	r1, r3, #16
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	795b      	ldrb	r3, [r3, #5]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f943 	bl	8009088 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	761a      	strb	r2, [r3, #24]
      break;
 8008e08:	e139      	b.n	800907e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	795b      	ldrb	r3, [r3, #5]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fcc5 	bl	80097a0 <USBH_LL_GetURBState>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d11e      	bne.n	8008e5e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	7c1b      	ldrb	r3, [r3, #16]
 8008e24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e28:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	8adb      	ldrh	r3, [r3, #22]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e32:	7b7b      	ldrb	r3, [r7, #13]
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d103      	bne.n	8008e40 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e3e:	e115      	b.n	800906c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2205      	movs	r2, #5
 8008e44:	761a      	strb	r2, [r3, #24]
      break;
 8008e46:	e111      	b.n	800906c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008e48:	7b7b      	ldrb	r3, [r7, #13]
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d103      	bne.n	8008e56 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2209      	movs	r2, #9
 8008e52:	761a      	strb	r2, [r3, #24]
      break;
 8008e54:	e10a      	b.n	800906c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2207      	movs	r2, #7
 8008e5a:	761a      	strb	r2, [r3, #24]
      break;
 8008e5c:	e106      	b.n	800906c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d003      	beq.n	8008e6c <USBH_HandleControl+0xcc>
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	f040 8100 	bne.w	800906c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	220b      	movs	r2, #11
 8008e70:	761a      	strb	r2, [r3, #24]
      break;
 8008e72:	e0fb      	b.n	800906c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6899      	ldr	r1, [r3, #8]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	899a      	ldrh	r2, [r3, #12]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	791b      	ldrb	r3, [r3, #4]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f93a 	bl	8009106 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2204      	movs	r2, #4
 8008e96:	761a      	strb	r2, [r3, #24]
      break;
 8008e98:	e0f1      	b.n	800907e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	791b      	ldrb	r3, [r3, #4]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fc7d 	bl	80097a0 <USBH_LL_GetURBState>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d102      	bne.n	8008eb6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2209      	movs	r2, #9
 8008eb4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	d102      	bne.n	8008ec2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ec0:	e0d6      	b.n	8009070 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	f040 80d3 	bne.w	8009070 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	220b      	movs	r2, #11
 8008ece:	761a      	strb	r2, [r3, #24]
      break;
 8008ed0:	e0ce      	b.n	8009070 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6899      	ldr	r1, [r3, #8]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	899a      	ldrh	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	795b      	ldrb	r3, [r3, #5]
 8008ede:	2001      	movs	r0, #1
 8008ee0:	9000      	str	r0, [sp, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f8ea 	bl	80090bc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2206      	movs	r2, #6
 8008ef8:	761a      	strb	r2, [r3, #24]
      break;
 8008efa:	e0c0      	b.n	800907e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	795b      	ldrb	r3, [r3, #5]
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fc4c 	bl	80097a0 <USBH_LL_GetURBState>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d103      	bne.n	8008f1a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2207      	movs	r2, #7
 8008f16:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f18:	e0ac      	b.n	8009074 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b05      	cmp	r3, #5
 8008f1e:	d105      	bne.n	8008f2c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	220c      	movs	r2, #12
 8008f24:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f26:	2303      	movs	r3, #3
 8008f28:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2a:	e0a3      	b.n	8009074 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d103      	bne.n	8008f3a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2205      	movs	r2, #5
 8008f36:	761a      	strb	r2, [r3, #24]
      break;
 8008f38:	e09c      	b.n	8009074 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	f040 8099 	bne.w	8009074 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	220b      	movs	r2, #11
 8008f46:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f4c:	e092      	b.n	8009074 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	791b      	ldrb	r3, [r3, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f8d5 	bl	8009106 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	761a      	strb	r2, [r3, #24]

      break;
 8008f6e:	e086      	b.n	800907e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	791b      	ldrb	r3, [r3, #4]
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fc12 	bl	80097a0 <USBH_LL_GetURBState>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d105      	bne.n	8008f92 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	220d      	movs	r2, #13
 8008f8a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f90:	e072      	b.n	8009078 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d103      	bne.n	8008fa0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	220b      	movs	r2, #11
 8008f9c:	761a      	strb	r2, [r3, #24]
      break;
 8008f9e:	e06b      	b.n	8009078 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	d168      	bne.n	8009078 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8008faa:	e065      	b.n	8009078 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	795b      	ldrb	r3, [r3, #5]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	9200      	str	r2, [sp, #0]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f87f 	bl	80090bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	220a      	movs	r2, #10
 8008fce:	761a      	strb	r2, [r3, #24]
      break;
 8008fd0:	e055      	b.n	800907e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	795b      	ldrb	r3, [r3, #5]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fbe1 	bl	80097a0 <USBH_LL_GetURBState>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d105      	bne.n	8008ff4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	220d      	movs	r2, #13
 8008ff0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ff2:	e043      	b.n	800907c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d103      	bne.n	8009002 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2209      	movs	r2, #9
 8008ffe:	761a      	strb	r2, [r3, #24]
      break;
 8009000:	e03c      	b.n	800907c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b04      	cmp	r3, #4
 8009006:	d139      	bne.n	800907c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	220b      	movs	r2, #11
 800900c:	761a      	strb	r2, [r3, #24]
      break;
 800900e:	e035      	b.n	800907c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7e5b      	ldrb	r3, [r3, #25]
 8009014:	3301      	adds	r3, #1
 8009016:	b2da      	uxtb	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	765a      	strb	r2, [r3, #25]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7e5b      	ldrb	r3, [r3, #25]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d806      	bhi.n	8009032 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009030:	e025      	b.n	800907e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009038:	2106      	movs	r1, #6
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	795b      	ldrb	r3, [r3, #5]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f90c 	bl	8009268 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	791b      	ldrb	r3, [r3, #4]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f906 	bl	8009268 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009062:	2302      	movs	r3, #2
 8009064:	73fb      	strb	r3, [r7, #15]
      break;
 8009066:	e00a      	b.n	800907e <USBH_HandleControl+0x2de>

    default:
      break;
 8009068:	bf00      	nop
 800906a:	e008      	b.n	800907e <USBH_HandleControl+0x2de>
      break;
 800906c:	bf00      	nop
 800906e:	e006      	b.n	800907e <USBH_HandleControl+0x2de>
      break;
 8009070:	bf00      	nop
 8009072:	e004      	b.n	800907e <USBH_HandleControl+0x2de>
      break;
 8009074:	bf00      	nop
 8009076:	e002      	b.n	800907e <USBH_HandleControl+0x2de>
      break;
 8009078:	bf00      	nop
 800907a:	e000      	b.n	800907e <USBH_HandleControl+0x2de>
      break;
 800907c:	bf00      	nop
  }

  return status;
 800907e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af04      	add	r7, sp, #16
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009096:	79f9      	ldrb	r1, [r7, #7]
 8009098:	2300      	movs	r3, #0
 800909a:	9303      	str	r3, [sp, #12]
 800909c:	2308      	movs	r3, #8
 800909e:	9302      	str	r3, [sp, #8]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	2300      	movs	r3, #0
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2300      	movs	r3, #0
 80090aa:	2200      	movs	r2, #0
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fb46 	bl	800973e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af04      	add	r7, sp, #16
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	4611      	mov	r1, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	460b      	mov	r3, r1
 80090cc:	80fb      	strh	r3, [r7, #6]
 80090ce:	4613      	mov	r3, r2
 80090d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80090e0:	7979      	ldrb	r1, [r7, #5]
 80090e2:	7e3b      	ldrb	r3, [r7, #24]
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	9302      	str	r3, [sp, #8]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	2301      	movs	r3, #1
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	2300      	movs	r3, #0
 80090f4:	2200      	movs	r2, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fb21 	bl	800973e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b088      	sub	sp, #32
 800910a:	af04      	add	r7, sp, #16
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	4611      	mov	r1, r2
 8009112:	461a      	mov	r2, r3
 8009114:	460b      	mov	r3, r1
 8009116:	80fb      	strh	r3, [r7, #6]
 8009118:	4613      	mov	r3, r2
 800911a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800911c:	7979      	ldrb	r1, [r7, #5]
 800911e:	2300      	movs	r3, #0
 8009120:	9303      	str	r3, [sp, #12]
 8009122:	88fb      	ldrh	r3, [r7, #6]
 8009124:	9302      	str	r3, [sp, #8]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	2301      	movs	r3, #1
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	2300      	movs	r3, #0
 8009130:	2201      	movs	r2, #1
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fb03 	bl	800973e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009138:	2300      	movs	r3, #0

}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b088      	sub	sp, #32
 8009146:	af04      	add	r7, sp, #16
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	4611      	mov	r1, r2
 800914e:	461a      	mov	r2, r3
 8009150:	460b      	mov	r3, r1
 8009152:	80fb      	strh	r3, [r7, #6]
 8009154:	4613      	mov	r3, r2
 8009156:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009166:	7979      	ldrb	r1, [r7, #5]
 8009168:	7e3b      	ldrb	r3, [r7, #24]
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	88fb      	ldrh	r3, [r7, #6]
 800916e:	9302      	str	r3, [sp, #8]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	2301      	movs	r3, #1
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	2302      	movs	r3, #2
 800917a:	2200      	movs	r2, #0
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 fade 	bl	800973e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af04      	add	r7, sp, #16
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4611      	mov	r1, r2
 8009198:	461a      	mov	r2, r3
 800919a:	460b      	mov	r3, r1
 800919c:	80fb      	strh	r3, [r7, #6]
 800919e:	4613      	mov	r3, r2
 80091a0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091a2:	7979      	ldrb	r1, [r7, #5]
 80091a4:	2300      	movs	r3, #0
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	88fb      	ldrh	r3, [r7, #6]
 80091aa:	9302      	str	r3, [sp, #8]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	2301      	movs	r3, #1
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	2302      	movs	r3, #2
 80091b6:	2201      	movs	r2, #1
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fac0 	bl	800973e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af04      	add	r7, sp, #16
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	4608      	mov	r0, r1
 80091d2:	4611      	mov	r1, r2
 80091d4:	461a      	mov	r2, r3
 80091d6:	4603      	mov	r3, r0
 80091d8:	70fb      	strb	r3, [r7, #3]
 80091da:	460b      	mov	r3, r1
 80091dc:	70bb      	strb	r3, [r7, #2]
 80091de:	4613      	mov	r3, r2
 80091e0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80091e2:	7878      	ldrb	r0, [r7, #1]
 80091e4:	78ba      	ldrb	r2, [r7, #2]
 80091e6:	78f9      	ldrb	r1, [r7, #3]
 80091e8:	8b3b      	ldrh	r3, [r7, #24]
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	7d3b      	ldrb	r3, [r7, #20]
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	7c3b      	ldrb	r3, [r7, #16]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	4603      	mov	r3, r0
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa53 	bl	80096a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fa72 	bl	8009700 <USBH_LL_ClosePipe>

  return USBH_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f836 	bl	80092a4 <USBH_GetFreePipe>
 8009238:	4603      	mov	r3, r0
 800923a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800923c:	89fb      	ldrh	r3, [r7, #14]
 800923e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009242:	4293      	cmp	r3, r2
 8009244:	d00a      	beq.n	800925c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	89fb      	ldrh	r3, [r7, #14]
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	33e0      	adds	r3, #224	; 0xe0
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	440b      	add	r3, r1
 800925a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800925c:	89fb      	ldrh	r3, [r7, #14]
 800925e:	b2db      	uxtb	r3, r3
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	2b0a      	cmp	r3, #10
 8009278:	d80d      	bhi.n	8009296 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	33e0      	adds	r3, #224	; 0xe0
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	33e0      	adds	r3, #224	; 0xe0
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	e00f      	b.n	80092d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	33e0      	adds	r3, #224	; 0xe0
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	e007      	b.n	80092e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	3301      	adds	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b0a      	cmp	r3, #10
 80092da:	d9ec      	bls.n	80092b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80092dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80092f0:	2201      	movs	r2, #1
 80092f2:	490e      	ldr	r1, [pc, #56]	; (800932c <MX_USB_HOST_Init+0x40>)
 80092f4:	480e      	ldr	r0, [pc, #56]	; (8009330 <MX_USB_HOST_Init+0x44>)
 80092f6:	f7fe fca1 	bl	8007c3c <USBH_Init>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009300:	f7f7 fe54 	bl	8000fac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009304:	490b      	ldr	r1, [pc, #44]	; (8009334 <MX_USB_HOST_Init+0x48>)
 8009306:	480a      	ldr	r0, [pc, #40]	; (8009330 <MX_USB_HOST_Init+0x44>)
 8009308:	f7fe fd26 	bl	8007d58 <USBH_RegisterClass>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009312:	f7f7 fe4b 	bl	8000fac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009316:	4806      	ldr	r0, [pc, #24]	; (8009330 <MX_USB_HOST_Init+0x44>)
 8009318:	f7fe fdaa 	bl	8007e70 <USBH_Start>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009322:	f7f7 fe43 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009326:	bf00      	nop
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	0800934d 	.word	0x0800934d
 8009330:	200003c0 	.word	0x200003c0
 8009334:	2000000c 	.word	0x2000000c

08009338 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800933c:	4802      	ldr	r0, [pc, #8]	; (8009348 <MX_USB_HOST_Process+0x10>)
 800933e:	f7fe fda7 	bl	8007e90 <USBH_Process>
}
 8009342:	bf00      	nop
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200003c0 	.word	0x200003c0

0800934c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	3b01      	subs	r3, #1
 800935c:	2b04      	cmp	r3, #4
 800935e:	d819      	bhi.n	8009394 <USBH_UserProcess+0x48>
 8009360:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <USBH_UserProcess+0x1c>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	08009395 	.word	0x08009395
 800936c:	08009385 	.word	0x08009385
 8009370:	08009395 	.word	0x08009395
 8009374:	0800938d 	.word	0x0800938d
 8009378:	0800937d 	.word	0x0800937d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800937c:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <USBH_UserProcess+0x58>)
 800937e:	2203      	movs	r2, #3
 8009380:	701a      	strb	r2, [r3, #0]
  break;
 8009382:	e008      	b.n	8009396 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009384:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <USBH_UserProcess+0x58>)
 8009386:	2202      	movs	r2, #2
 8009388:	701a      	strb	r2, [r3, #0]
  break;
 800938a:	e004      	b.n	8009396 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <USBH_UserProcess+0x58>)
 800938e:	2201      	movs	r2, #1
 8009390:	701a      	strb	r2, [r3, #0]
  break;
 8009392:	e000      	b.n	8009396 <USBH_UserProcess+0x4a>

  default:
  break;
 8009394:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000108 	.word	0x20000108

080093a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08a      	sub	sp, #40	; 0x28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	605a      	str	r2, [r3, #4]
 80093ba:	609a      	str	r2, [r3, #8]
 80093bc:	60da      	str	r2, [r3, #12]
 80093be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093c8:	d147      	bne.n	800945a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ca:	2300      	movs	r3, #0
 80093cc:	613b      	str	r3, [r7, #16]
 80093ce:	4b25      	ldr	r3, [pc, #148]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 80093d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d2:	4a24      	ldr	r2, [pc, #144]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	6313      	str	r3, [r2, #48]	; 0x30
 80093da:	4b22      	ldr	r3, [pc, #136]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80093e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80093f4:	f107 0314 	add.w	r3, r7, #20
 80093f8:	4619      	mov	r1, r3
 80093fa:	481b      	ldr	r0, [pc, #108]	; (8009468 <HAL_HCD_MspInit+0xc0>)
 80093fc:	f7f8 fd58 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009400:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009406:	2302      	movs	r3, #2
 8009408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940a:	2300      	movs	r3, #0
 800940c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800940e:	2300      	movs	r3, #0
 8009410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009412:	230a      	movs	r3, #10
 8009414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	4619      	mov	r1, r3
 800941c:	4812      	ldr	r0, [pc, #72]	; (8009468 <HAL_HCD_MspInit+0xc0>)
 800941e:	f7f8 fd47 	bl	8001eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 8009424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009426:	4a0f      	ldr	r2, [pc, #60]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 8009428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942c:	6353      	str	r3, [r2, #52]	; 0x34
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 8009434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009436:	4a0b      	ldr	r2, [pc, #44]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 8009438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800943c:	6453      	str	r3, [r2, #68]	; 0x44
 800943e:	4b09      	ldr	r3, [pc, #36]	; (8009464 <HAL_HCD_MspInit+0xbc>)
 8009440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800944a:	2200      	movs	r2, #0
 800944c:	2100      	movs	r1, #0
 800944e:	2043      	movs	r0, #67	; 0x43
 8009450:	f7f8 f987 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009454:	2043      	movs	r0, #67	; 0x43
 8009456:	f7f8 f9a0 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800945a:	bf00      	nop
 800945c:	3728      	adds	r7, #40	; 0x28
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	40023800 	.word	0x40023800
 8009468:	40020000 	.word	0x40020000

0800946c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff f8db 	bl	8008636 <USBH_LL_IncTimer>
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff f913 	bl	80086c2 <USBH_LL_Connect>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff f91c 	bl	80086f0 <USBH_LL_Disconnect>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
 80094cc:	4613      	mov	r3, r2
 80094ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff f8cd 	bl	800868a <USBH_LL_PortEnabled>
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff f8cd 	bl	80086a6 <USBH_LL_PortDisabled>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009522:	2b01      	cmp	r3, #1
 8009524:	d12a      	bne.n	800957c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009526:	4a18      	ldr	r2, [pc, #96]	; (8009588 <USBH_LL_Init+0x74>)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a15      	ldr	r2, [pc, #84]	; (8009588 <USBH_LL_Init+0x74>)
 8009532:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009536:	4b14      	ldr	r3, [pc, #80]	; (8009588 <USBH_LL_Init+0x74>)
 8009538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800953c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <USBH_LL_Init+0x74>)
 8009540:	2208      	movs	r2, #8
 8009542:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009544:	4b10      	ldr	r3, [pc, #64]	; (8009588 <USBH_LL_Init+0x74>)
 8009546:	2201      	movs	r2, #1
 8009548:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800954a:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <USBH_LL_Init+0x74>)
 800954c:	2200      	movs	r2, #0
 800954e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <USBH_LL_Init+0x74>)
 8009552:	2202      	movs	r2, #2
 8009554:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <USBH_LL_Init+0x74>)
 8009558:	2200      	movs	r2, #0
 800955a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800955c:	480a      	ldr	r0, [pc, #40]	; (8009588 <USBH_LL_Init+0x74>)
 800955e:	f7f8 fe5c 	bl	800221a <HAL_HCD_Init>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009568:	f7f7 fd20 	bl	8000fac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800956c:	4806      	ldr	r0, [pc, #24]	; (8009588 <USBH_LL_Init+0x74>)
 800956e:	f7f9 fa39 	bl	80029e4 <HAL_HCD_GetCurrentFrame>
 8009572:	4603      	mov	r3, r0
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff f84e 	bl	8008618 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000798 	.word	0x20000798

0800958c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7f9 f9a8 	bl	80028f8 <HAL_HCD_Start>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f95c 	bl	800986c <USBH_Get_USB_Status>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f9 f9b0 	bl	800293e <HAL_HCD_Stop>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 f941 	bl	800986c <USBH_Get_USB_Status>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800960a:	4618      	mov	r0, r3
 800960c:	f7f9 f9f8 	bl	8002a00 <HAL_HCD_GetCurrentSpeed>
 8009610:	4603      	mov	r3, r0
 8009612:	2b02      	cmp	r3, #2
 8009614:	d00c      	beq.n	8009630 <USBH_LL_GetSpeed+0x38>
 8009616:	2b02      	cmp	r3, #2
 8009618:	d80d      	bhi.n	8009636 <USBH_LL_GetSpeed+0x3e>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <USBH_LL_GetSpeed+0x2c>
 800961e:	2b01      	cmp	r3, #1
 8009620:	d003      	beq.n	800962a <USBH_LL_GetSpeed+0x32>
 8009622:	e008      	b.n	8009636 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
    break;
 8009628:	e008      	b.n	800963c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800962a:	2301      	movs	r3, #1
 800962c:	73fb      	strb	r3, [r7, #15]
    break;
 800962e:	e005      	b.n	800963c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009630:	2302      	movs	r3, #2
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e002      	b.n	800963c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009636:	2301      	movs	r3, #1
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	bf00      	nop
  }
  return  speed;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800965c:	4618      	mov	r0, r3
 800965e:	f7f9 f98b 	bl	8002978 <HAL_HCD_ResetPort>
 8009662:	4603      	mov	r3, r0
 8009664:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	4618      	mov	r0, r3
 800966a:	f000 f8ff 	bl	800986c <USBH_Get_USB_Status>
 800966e:	4603      	mov	r3, r0
 8009670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009672:	7bbb      	ldrb	r3, [r7, #14]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f7f9 f992 	bl	80029bc <HAL_HCD_HC_GetXferCount>
 8009698:	4603      	mov	r3, r0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096a2:	b590      	push	{r4, r7, lr}
 80096a4:	b089      	sub	sp, #36	; 0x24
 80096a6:	af04      	add	r7, sp, #16
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	4608      	mov	r0, r1
 80096ac:	4611      	mov	r1, r2
 80096ae:	461a      	mov	r2, r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	70fb      	strb	r3, [r7, #3]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70bb      	strb	r3, [r7, #2]
 80096b8:	4613      	mov	r3, r2
 80096ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80096ca:	787c      	ldrb	r4, [r7, #1]
 80096cc:	78ba      	ldrb	r2, [r7, #2]
 80096ce:	78f9      	ldrb	r1, [r7, #3]
 80096d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4623      	mov	r3, r4
 80096e2:	f7f8 fdfc 	bl	80022de <HAL_HCD_HC_Init>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f8bd 	bl	800986c <USBH_Get_USB_Status>
 80096f2:	4603      	mov	r3, r0
 80096f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd90      	pop	{r4, r7, pc}

08009700 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800971a:	78fa      	ldrb	r2, [r7, #3]
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f7f8 fe6c 	bl	80023fc <HAL_HCD_HC_Halt>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f89e 	bl	800986c <USBH_Get_USB_Status>
 8009730:	4603      	mov	r3, r0
 8009732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009734:	7bbb      	ldrb	r3, [r7, #14]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800973e:	b590      	push	{r4, r7, lr}
 8009740:	b089      	sub	sp, #36	; 0x24
 8009742:	af04      	add	r7, sp, #16
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	461a      	mov	r2, r3
 800974c:	4603      	mov	r3, r0
 800974e:	70fb      	strb	r3, [r7, #3]
 8009750:	460b      	mov	r3, r1
 8009752:	70bb      	strb	r3, [r7, #2]
 8009754:	4613      	mov	r3, r2
 8009756:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009766:	787c      	ldrb	r4, [r7, #1]
 8009768:	78ba      	ldrb	r2, [r7, #2]
 800976a:	78f9      	ldrb	r1, [r7, #3]
 800976c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009770:	9303      	str	r3, [sp, #12]
 8009772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009774:	9302      	str	r3, [sp, #8]
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	4623      	mov	r3, r4
 8009782:	f7f8 fe5f 	bl	8002444 <HAL_HCD_HC_SubmitRequest>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 f86d 	bl	800986c <USBH_Get_USB_Status>
 8009792:	4603      	mov	r3, r0
 8009794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009796:	7bbb      	ldrb	r3, [r7, #14]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	bd90      	pop	{r4, r7, pc}

080097a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097b2:	78fa      	ldrb	r2, [r7, #3]
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f9 f8ec 	bl	8002994 <HAL_HCD_HC_GetURBState>
 80097bc:	4603      	mov	r3, r0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d103      	bne.n	80097e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f870 	bl	80098c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80097e4:	20c8      	movs	r0, #200	; 0xc8
 80097e6:	f7f7 febd 	bl	8001564 <HAL_Delay>
  return USBH_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
 8009800:	4613      	mov	r3, r2
 8009802:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800980a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	212c      	movs	r1, #44	; 0x2c
 8009812:	fb01 f303 	mul.w	r3, r1, r3
 8009816:	4413      	add	r3, r2
 8009818:	333b      	adds	r3, #59	; 0x3b
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d009      	beq.n	8009834 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	212c      	movs	r1, #44	; 0x2c
 8009826:	fb01 f303 	mul.w	r3, r1, r3
 800982a:	4413      	add	r3, r2
 800982c:	3354      	adds	r3, #84	; 0x54
 800982e:	78ba      	ldrb	r2, [r7, #2]
 8009830:	701a      	strb	r2, [r3, #0]
 8009832:	e008      	b.n	8009846 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	212c      	movs	r1, #44	; 0x2c
 800983a:	fb01 f303 	mul.w	r3, r1, r3
 800983e:	4413      	add	r3, r2
 8009840:	3355      	adds	r3, #85	; 0x55
 8009842:	78ba      	ldrb	r2, [r7, #2]
 8009844:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7f7 fe81 	bl	8001564 <HAL_Delay>
}
 8009862:	bf00      	nop
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	2b03      	cmp	r3, #3
 800987e:	d817      	bhi.n	80098b0 <USBH_Get_USB_Status+0x44>
 8009880:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <USBH_Get_USB_Status+0x1c>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	08009899 	.word	0x08009899
 800988c:	0800989f 	.word	0x0800989f
 8009890:	080098a5 	.word	0x080098a5
 8009894:	080098ab 	.word	0x080098ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
    break;
 800989c:	e00b      	b.n	80098b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800989e:	2302      	movs	r3, #2
 80098a0:	73fb      	strb	r3, [r7, #15]
    break;
 80098a2:	e008      	b.n	80098b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80098a4:	2301      	movs	r3, #1
 80098a6:	73fb      	strb	r3, [r7, #15]
    break;
 80098a8:	e005      	b.n	80098b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80098aa:	2302      	movs	r3, #2
 80098ac:	73fb      	strb	r3, [r7, #15]
    break;
 80098ae:	e002      	b.n	80098b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80098b0:	2302      	movs	r3, #2
 80098b2:	73fb      	strb	r3, [r7, #15]
    break;
 80098b4:	bf00      	nop
  }
  return usb_status;
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d102      	bne.n	80098de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80098d8:	2301      	movs	r3, #1
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	e001      	b.n	80098e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	461a      	mov	r2, r3
 80098e6:	2101      	movs	r1, #1
 80098e8:	4803      	ldr	r0, [pc, #12]	; (80098f8 <MX_DriverVbusFS+0x34>)
 80098ea:	f7f8 fc7d 	bl	80021e8 <HAL_GPIO_WritePin>
}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40020800 	.word	0x40020800

080098fc <sinf>:
 80098fc:	ee10 3a10 	vmov	r3, s0
 8009900:	b507      	push	{r0, r1, r2, lr}
 8009902:	4a1d      	ldr	r2, [pc, #116]	; (8009978 <sinf+0x7c>)
 8009904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009908:	4293      	cmp	r3, r2
 800990a:	dc05      	bgt.n	8009918 <sinf+0x1c>
 800990c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800997c <sinf+0x80>
 8009910:	2000      	movs	r0, #0
 8009912:	f000 fc5b 	bl	800a1cc <__kernel_sinf>
 8009916:	e004      	b.n	8009922 <sinf+0x26>
 8009918:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800991c:	db04      	blt.n	8009928 <sinf+0x2c>
 800991e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009922:	b003      	add	sp, #12
 8009924:	f85d fb04 	ldr.w	pc, [sp], #4
 8009928:	4668      	mov	r0, sp
 800992a:	f000 f829 	bl	8009980 <__ieee754_rem_pio2f>
 800992e:	f000 0003 	and.w	r0, r0, #3
 8009932:	2801      	cmp	r0, #1
 8009934:	d008      	beq.n	8009948 <sinf+0x4c>
 8009936:	2802      	cmp	r0, #2
 8009938:	d00d      	beq.n	8009956 <sinf+0x5a>
 800993a:	b9b0      	cbnz	r0, 800996a <sinf+0x6e>
 800993c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009940:	ed9d 0a00 	vldr	s0, [sp]
 8009944:	2001      	movs	r0, #1
 8009946:	e7e4      	b.n	8009912 <sinf+0x16>
 8009948:	eddd 0a01 	vldr	s1, [sp, #4]
 800994c:	ed9d 0a00 	vldr	s0, [sp]
 8009950:	f000 f952 	bl	8009bf8 <__kernel_cosf>
 8009954:	e7e5      	b.n	8009922 <sinf+0x26>
 8009956:	eddd 0a01 	vldr	s1, [sp, #4]
 800995a:	ed9d 0a00 	vldr	s0, [sp]
 800995e:	2001      	movs	r0, #1
 8009960:	f000 fc34 	bl	800a1cc <__kernel_sinf>
 8009964:	eeb1 0a40 	vneg.f32	s0, s0
 8009968:	e7db      	b.n	8009922 <sinf+0x26>
 800996a:	eddd 0a01 	vldr	s1, [sp, #4]
 800996e:	ed9d 0a00 	vldr	s0, [sp]
 8009972:	f000 f941 	bl	8009bf8 <__kernel_cosf>
 8009976:	e7f5      	b.n	8009964 <sinf+0x68>
 8009978:	3f490fd8 	.word	0x3f490fd8
 800997c:	00000000 	.word	0x00000000

08009980 <__ieee754_rem_pio2f>:
 8009980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009982:	ee10 6a10 	vmov	r6, s0
 8009986:	4b8e      	ldr	r3, [pc, #568]	; (8009bc0 <__ieee754_rem_pio2f+0x240>)
 8009988:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800998c:	429d      	cmp	r5, r3
 800998e:	b087      	sub	sp, #28
 8009990:	eef0 7a40 	vmov.f32	s15, s0
 8009994:	4604      	mov	r4, r0
 8009996:	dc05      	bgt.n	80099a4 <__ieee754_rem_pio2f+0x24>
 8009998:	2300      	movs	r3, #0
 800999a:	ed80 0a00 	vstr	s0, [r0]
 800999e:	6043      	str	r3, [r0, #4]
 80099a0:	2000      	movs	r0, #0
 80099a2:	e01a      	b.n	80099da <__ieee754_rem_pio2f+0x5a>
 80099a4:	4b87      	ldr	r3, [pc, #540]	; (8009bc4 <__ieee754_rem_pio2f+0x244>)
 80099a6:	429d      	cmp	r5, r3
 80099a8:	dc46      	bgt.n	8009a38 <__ieee754_rem_pio2f+0xb8>
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009bc8 <__ieee754_rem_pio2f+0x248>
 80099b0:	4b86      	ldr	r3, [pc, #536]	; (8009bcc <__ieee754_rem_pio2f+0x24c>)
 80099b2:	f025 050f 	bic.w	r5, r5, #15
 80099b6:	dd1f      	ble.n	80099f8 <__ieee754_rem_pio2f+0x78>
 80099b8:	429d      	cmp	r5, r3
 80099ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80099be:	d00e      	beq.n	80099de <__ieee754_rem_pio2f+0x5e>
 80099c0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009bd0 <__ieee754_rem_pio2f+0x250>
 80099c4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80099c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80099cc:	ed80 0a00 	vstr	s0, [r0]
 80099d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099d4:	2001      	movs	r0, #1
 80099d6:	edc4 7a01 	vstr	s15, [r4, #4]
 80099da:	b007      	add	sp, #28
 80099dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099de:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009bd4 <__ieee754_rem_pio2f+0x254>
 80099e2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009bd8 <__ieee754_rem_pio2f+0x258>
 80099e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80099ea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80099ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099f2:	edc0 6a00 	vstr	s13, [r0]
 80099f6:	e7eb      	b.n	80099d0 <__ieee754_rem_pio2f+0x50>
 80099f8:	429d      	cmp	r5, r3
 80099fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80099fe:	d00e      	beq.n	8009a1e <__ieee754_rem_pio2f+0x9e>
 8009a00:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009bd0 <__ieee754_rem_pio2f+0x250>
 8009a04:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009a08:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009a0c:	ed80 0a00 	vstr	s0, [r0]
 8009a10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	edc4 7a01 	vstr	s15, [r4, #4]
 8009a1c:	e7dd      	b.n	80099da <__ieee754_rem_pio2f+0x5a>
 8009a1e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009bd4 <__ieee754_rem_pio2f+0x254>
 8009a22:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009bd8 <__ieee754_rem_pio2f+0x258>
 8009a26:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009a2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009a2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009a32:	edc0 6a00 	vstr	s13, [r0]
 8009a36:	e7eb      	b.n	8009a10 <__ieee754_rem_pio2f+0x90>
 8009a38:	4b68      	ldr	r3, [pc, #416]	; (8009bdc <__ieee754_rem_pio2f+0x25c>)
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	dc72      	bgt.n	8009b24 <__ieee754_rem_pio2f+0x1a4>
 8009a3e:	f000 fc0d 	bl	800a25c <fabsf>
 8009a42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009be0 <__ieee754_rem_pio2f+0x260>
 8009a46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009a4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a56:	ee17 0a90 	vmov	r0, s15
 8009a5a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009bc8 <__ieee754_rem_pio2f+0x248>
 8009a5e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009a62:	281f      	cmp	r0, #31
 8009a64:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009bd0 <__ieee754_rem_pio2f+0x250>
 8009a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6c:	eeb1 6a47 	vneg.f32	s12, s14
 8009a70:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009a74:	ee16 2a90 	vmov	r2, s13
 8009a78:	dc1c      	bgt.n	8009ab4 <__ieee754_rem_pio2f+0x134>
 8009a7a:	495a      	ldr	r1, [pc, #360]	; (8009be4 <__ieee754_rem_pio2f+0x264>)
 8009a7c:	1e47      	subs	r7, r0, #1
 8009a7e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8009a82:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009a86:	428b      	cmp	r3, r1
 8009a88:	d014      	beq.n	8009ab4 <__ieee754_rem_pio2f+0x134>
 8009a8a:	6022      	str	r2, [r4, #0]
 8009a8c:	ed94 7a00 	vldr	s14, [r4]
 8009a90:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009a94:	2e00      	cmp	r6, #0
 8009a96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a9a:	ed84 0a01 	vstr	s0, [r4, #4]
 8009a9e:	da9c      	bge.n	80099da <__ieee754_rem_pio2f+0x5a>
 8009aa0:	eeb1 7a47 	vneg.f32	s14, s14
 8009aa4:	eeb1 0a40 	vneg.f32	s0, s0
 8009aa8:	ed84 7a00 	vstr	s14, [r4]
 8009aac:	ed84 0a01 	vstr	s0, [r4, #4]
 8009ab0:	4240      	negs	r0, r0
 8009ab2:	e792      	b.n	80099da <__ieee754_rem_pio2f+0x5a>
 8009ab4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009ab8:	15eb      	asrs	r3, r5, #23
 8009aba:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009abe:	2d08      	cmp	r5, #8
 8009ac0:	dde3      	ble.n	8009a8a <__ieee754_rem_pio2f+0x10a>
 8009ac2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009bd4 <__ieee754_rem_pio2f+0x254>
 8009ac6:	eef0 6a40 	vmov.f32	s13, s0
 8009aca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009ace:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009ad2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8009ad6:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009bd8 <__ieee754_rem_pio2f+0x258>
 8009ada:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8009ade:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009ae2:	eef0 7a40 	vmov.f32	s15, s0
 8009ae6:	ee15 2a90 	vmov	r2, s11
 8009aea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009aee:	1a5b      	subs	r3, r3, r1
 8009af0:	2b19      	cmp	r3, #25
 8009af2:	dc04      	bgt.n	8009afe <__ieee754_rem_pio2f+0x17e>
 8009af4:	edc4 5a00 	vstr	s11, [r4]
 8009af8:	eeb0 0a66 	vmov.f32	s0, s13
 8009afc:	e7c6      	b.n	8009a8c <__ieee754_rem_pio2f+0x10c>
 8009afe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009be8 <__ieee754_rem_pio2f+0x268>
 8009b02:	eeb0 0a66 	vmov.f32	s0, s13
 8009b06:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009b0a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009b0e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009bec <__ieee754_rem_pio2f+0x26c>
 8009b12:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009b16:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009b1a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009b1e:	ed84 7a00 	vstr	s14, [r4]
 8009b22:	e7b3      	b.n	8009a8c <__ieee754_rem_pio2f+0x10c>
 8009b24:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009b28:	db06      	blt.n	8009b38 <__ieee754_rem_pio2f+0x1b8>
 8009b2a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009b2e:	edc0 7a01 	vstr	s15, [r0, #4]
 8009b32:	edc0 7a00 	vstr	s15, [r0]
 8009b36:	e733      	b.n	80099a0 <__ieee754_rem_pio2f+0x20>
 8009b38:	15ea      	asrs	r2, r5, #23
 8009b3a:	3a86      	subs	r2, #134	; 0x86
 8009b3c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009b40:	ee07 3a90 	vmov	s15, r3
 8009b44:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009b48:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009bf0 <__ieee754_rem_pio2f+0x270>
 8009b4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b54:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009b60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b68:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009b6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b78:	edcd 7a05 	vstr	s15, [sp, #20]
 8009b7c:	d11e      	bne.n	8009bbc <__ieee754_rem_pio2f+0x23c>
 8009b7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b86:	bf14      	ite	ne
 8009b88:	2302      	movne	r3, #2
 8009b8a:	2301      	moveq	r3, #1
 8009b8c:	4919      	ldr	r1, [pc, #100]	; (8009bf4 <__ieee754_rem_pio2f+0x274>)
 8009b8e:	9101      	str	r1, [sp, #4]
 8009b90:	2102      	movs	r1, #2
 8009b92:	9100      	str	r1, [sp, #0]
 8009b94:	a803      	add	r0, sp, #12
 8009b96:	4621      	mov	r1, r4
 8009b98:	f000 f88e 	bl	8009cb8 <__kernel_rem_pio2f>
 8009b9c:	2e00      	cmp	r6, #0
 8009b9e:	f6bf af1c 	bge.w	80099da <__ieee754_rem_pio2f+0x5a>
 8009ba2:	edd4 7a00 	vldr	s15, [r4]
 8009ba6:	eef1 7a67 	vneg.f32	s15, s15
 8009baa:	edc4 7a00 	vstr	s15, [r4]
 8009bae:	edd4 7a01 	vldr	s15, [r4, #4]
 8009bb2:	eef1 7a67 	vneg.f32	s15, s15
 8009bb6:	edc4 7a01 	vstr	s15, [r4, #4]
 8009bba:	e779      	b.n	8009ab0 <__ieee754_rem_pio2f+0x130>
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e7e5      	b.n	8009b8c <__ieee754_rem_pio2f+0x20c>
 8009bc0:	3f490fd8 	.word	0x3f490fd8
 8009bc4:	4016cbe3 	.word	0x4016cbe3
 8009bc8:	3fc90f80 	.word	0x3fc90f80
 8009bcc:	3fc90fd0 	.word	0x3fc90fd0
 8009bd0:	37354443 	.word	0x37354443
 8009bd4:	37354400 	.word	0x37354400
 8009bd8:	2e85a308 	.word	0x2e85a308
 8009bdc:	43490f80 	.word	0x43490f80
 8009be0:	3f22f984 	.word	0x3f22f984
 8009be4:	0800a640 	.word	0x0800a640
 8009be8:	2e85a300 	.word	0x2e85a300
 8009bec:	248d3132 	.word	0x248d3132
 8009bf0:	43800000 	.word	0x43800000
 8009bf4:	0800a6c0 	.word	0x0800a6c0

08009bf8 <__kernel_cosf>:
 8009bf8:	ee10 3a10 	vmov	r3, s0
 8009bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009c04:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009c08:	da05      	bge.n	8009c16 <__kernel_cosf+0x1e>
 8009c0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009c0e:	ee17 2a90 	vmov	r2, s15
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	d03d      	beq.n	8009c92 <__kernel_cosf+0x9a>
 8009c16:	ee60 5a00 	vmul.f32	s11, s0, s0
 8009c1a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009c98 <__kernel_cosf+0xa0>
 8009c1e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009c9c <__kernel_cosf+0xa4>
 8009c22:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009ca0 <__kernel_cosf+0xa8>
 8009c26:	4a1f      	ldr	r2, [pc, #124]	; (8009ca4 <__kernel_cosf+0xac>)
 8009c28:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009ca8 <__kernel_cosf+0xb0>
 8009c32:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009c36:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009cac <__kernel_cosf+0xb4>
 8009c3a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009c3e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009cb0 <__kernel_cosf+0xb8>
 8009c42:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009c46:	eeb0 7a66 	vmov.f32	s14, s13
 8009c4a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009c4e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009c52:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8009c56:	ee67 6a25 	vmul.f32	s13, s14, s11
 8009c5a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8009c5e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009c62:	dc04      	bgt.n	8009c6e <__kernel_cosf+0x76>
 8009c64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009c68:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009c6c:	4770      	bx	lr
 8009c6e:	4a11      	ldr	r2, [pc, #68]	; (8009cb4 <__kernel_cosf+0xbc>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	bfda      	itte	le
 8009c74:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009c78:	ee06 3a90 	vmovle	s13, r3
 8009c7c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009c80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c84:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c90:	4770      	bx	lr
 8009c92:	eeb0 0a46 	vmov.f32	s0, s12
 8009c96:	4770      	bx	lr
 8009c98:	ad47d74e 	.word	0xad47d74e
 8009c9c:	310f74f6 	.word	0x310f74f6
 8009ca0:	3d2aaaab 	.word	0x3d2aaaab
 8009ca4:	3e999999 	.word	0x3e999999
 8009ca8:	b493f27c 	.word	0xb493f27c
 8009cac:	37d00d01 	.word	0x37d00d01
 8009cb0:	bab60b61 	.word	0xbab60b61
 8009cb4:	3f480000 	.word	0x3f480000

08009cb8 <__kernel_rem_pio2f>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	ed2d 8b04 	vpush	{d8-d9}
 8009cc0:	b0d7      	sub	sp, #348	; 0x15c
 8009cc2:	4616      	mov	r6, r2
 8009cc4:	4698      	mov	r8, r3
 8009cc6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009cc8:	4bbb      	ldr	r3, [pc, #748]	; (8009fb8 <__kernel_rem_pio2f+0x300>)
 8009cca:	9001      	str	r0, [sp, #4]
 8009ccc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8009cd0:	1d33      	adds	r3, r6, #4
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	f108 39ff 	add.w	r9, r8, #4294967295
 8009cd8:	db29      	blt.n	8009d2e <__kernel_rem_pio2f+0x76>
 8009cda:	1ef1      	subs	r1, r6, #3
 8009cdc:	bf48      	it	mi
 8009cde:	1d31      	addmi	r1, r6, #4
 8009ce0:	10c9      	asrs	r1, r1, #3
 8009ce2:	1c4c      	adds	r4, r1, #1
 8009ce4:	00e3      	lsls	r3, r4, #3
 8009ce6:	9302      	str	r3, [sp, #8]
 8009ce8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009cea:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8009fc8 <__kernel_rem_pio2f+0x310>
 8009cee:	eba1 0009 	sub.w	r0, r1, r9
 8009cf2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8009cf6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8009cfa:	eb07 0c09 	add.w	ip, r7, r9
 8009cfe:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8009d02:	2300      	movs	r3, #0
 8009d04:	4563      	cmp	r3, ip
 8009d06:	dd14      	ble.n	8009d32 <__kernel_rem_pio2f+0x7a>
 8009d08:	ab1a      	add	r3, sp, #104	; 0x68
 8009d0a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8009d0e:	46cc      	mov	ip, r9
 8009d10:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8009d14:	f1c8 0b01 	rsb	fp, r8, #1
 8009d18:	eb0b 020c 	add.w	r2, fp, ip
 8009d1c:	4297      	cmp	r7, r2
 8009d1e:	db27      	blt.n	8009d70 <__kernel_rem_pio2f+0xb8>
 8009d20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009d24:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009fc8 <__kernel_rem_pio2f+0x310>
 8009d28:	4618      	mov	r0, r3
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	e016      	b.n	8009d5c <__kernel_rem_pio2f+0xa4>
 8009d2e:	2100      	movs	r1, #0
 8009d30:	e7d7      	b.n	8009ce2 <__kernel_rem_pio2f+0x2a>
 8009d32:	42d8      	cmn	r0, r3
 8009d34:	bf5d      	ittte	pl
 8009d36:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8009d3a:	ee07 2a90 	vmovpl	s15, r2
 8009d3e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009d42:	eef0 7a47 	vmovmi.f32	s15, s14
 8009d46:	ecea 7a01 	vstmia	sl!, {s15}
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	e7da      	b.n	8009d04 <__kernel_rem_pio2f+0x4c>
 8009d4e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009d52:	ed90 7a00 	vldr	s14, [r0]
 8009d56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009d5a:	3201      	adds	r2, #1
 8009d5c:	454a      	cmp	r2, r9
 8009d5e:	f1a0 0004 	sub.w	r0, r0, #4
 8009d62:	ddf4      	ble.n	8009d4e <__kernel_rem_pio2f+0x96>
 8009d64:	ecea 7a01 	vstmia	sl!, {s15}
 8009d68:	3304      	adds	r3, #4
 8009d6a:	f10c 0c01 	add.w	ip, ip, #1
 8009d6e:	e7d3      	b.n	8009d18 <__kernel_rem_pio2f+0x60>
 8009d70:	ab06      	add	r3, sp, #24
 8009d72:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009d76:	9304      	str	r3, [sp, #16]
 8009d78:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009d7a:	eddf 8a92 	vldr	s17, [pc, #584]	; 8009fc4 <__kernel_rem_pio2f+0x30c>
 8009d7e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8009fc0 <__kernel_rem_pio2f+0x308>
 8009d82:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009d86:	9303      	str	r3, [sp, #12]
 8009d88:	46ba      	mov	sl, r7
 8009d8a:	ab56      	add	r3, sp, #344	; 0x158
 8009d8c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009d90:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8009d94:	ab06      	add	r3, sp, #24
 8009d96:	4618      	mov	r0, r3
 8009d98:	4652      	mov	r2, sl
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	dc51      	bgt.n	8009e42 <__kernel_rem_pio2f+0x18a>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	f000 faa5 	bl	800a2f0 <scalbnf>
 8009da6:	eeb0 8a40 	vmov.f32	s16, s0
 8009daa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009dae:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009db2:	f000 fa5b 	bl	800a26c <floorf>
 8009db6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009dba:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009dbe:	2c00      	cmp	r4, #0
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009dc6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009dca:	edcd 7a00 	vstr	s15, [sp]
 8009dce:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009dd2:	dd4b      	ble.n	8009e6c <__kernel_rem_pio2f+0x1b4>
 8009dd4:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009dd8:	aa06      	add	r2, sp, #24
 8009dda:	f1c4 0e08 	rsb	lr, r4, #8
 8009dde:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009de2:	ee17 1a90 	vmov	r1, s15
 8009de6:	fa42 f00e 	asr.w	r0, r2, lr
 8009dea:	4401      	add	r1, r0
 8009dec:	9100      	str	r1, [sp, #0]
 8009dee:	fa00 f00e 	lsl.w	r0, r0, lr
 8009df2:	a906      	add	r1, sp, #24
 8009df4:	1a12      	subs	r2, r2, r0
 8009df6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009dfa:	f1c4 0007 	rsb	r0, r4, #7
 8009dfe:	fa42 fb00 	asr.w	fp, r2, r0
 8009e02:	f1bb 0f00 	cmp.w	fp, #0
 8009e06:	dd43      	ble.n	8009e90 <__kernel_rem_pio2f+0x1d8>
 8009e08:	9a00      	ldr	r2, [sp, #0]
 8009e0a:	f04f 0e00 	mov.w	lr, #0
 8009e0e:	3201      	adds	r2, #1
 8009e10:	9200      	str	r2, [sp, #0]
 8009e12:	4670      	mov	r0, lr
 8009e14:	45f2      	cmp	sl, lr
 8009e16:	dc6c      	bgt.n	8009ef2 <__kernel_rem_pio2f+0x23a>
 8009e18:	2c00      	cmp	r4, #0
 8009e1a:	dd04      	ble.n	8009e26 <__kernel_rem_pio2f+0x16e>
 8009e1c:	2c01      	cmp	r4, #1
 8009e1e:	d079      	beq.n	8009f14 <__kernel_rem_pio2f+0x25c>
 8009e20:	2c02      	cmp	r4, #2
 8009e22:	f000 8082 	beq.w	8009f2a <__kernel_rem_pio2f+0x272>
 8009e26:	f1bb 0f02 	cmp.w	fp, #2
 8009e2a:	d131      	bne.n	8009e90 <__kernel_rem_pio2f+0x1d8>
 8009e2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009e30:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009e34:	b360      	cbz	r0, 8009e90 <__kernel_rem_pio2f+0x1d8>
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 fa5a 	bl	800a2f0 <scalbnf>
 8009e3c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009e40:	e026      	b.n	8009e90 <__kernel_rem_pio2f+0x1d8>
 8009e42:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009e46:	3a01      	subs	r2, #1
 8009e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e4c:	a942      	add	r1, sp, #264	; 0x108
 8009e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e52:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8009e56:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009e5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009e5e:	eca0 0a01 	vstmia	r0!, {s0}
 8009e62:	ed9c 0a00 	vldr	s0, [ip]
 8009e66:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009e6a:	e796      	b.n	8009d9a <__kernel_rem_pio2f+0xe2>
 8009e6c:	d107      	bne.n	8009e7e <__kernel_rem_pio2f+0x1c6>
 8009e6e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8009e72:	a906      	add	r1, sp, #24
 8009e74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e78:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8009e7c:	e7c1      	b.n	8009e02 <__kernel_rem_pio2f+0x14a>
 8009e7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009e82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e8a:	da2f      	bge.n	8009eec <__kernel_rem_pio2f+0x234>
 8009e8c:	f04f 0b00 	mov.w	fp, #0
 8009e90:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e98:	f040 8098 	bne.w	8009fcc <__kernel_rem_pio2f+0x314>
 8009e9c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ea0:	469c      	mov	ip, r3
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	45bc      	cmp	ip, r7
 8009ea6:	da48      	bge.n	8009f3a <__kernel_rem_pio2f+0x282>
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	d05f      	beq.n	8009f6c <__kernel_rem_pio2f+0x2b4>
 8009eac:	aa06      	add	r2, sp, #24
 8009eae:	3c08      	subs	r4, #8
 8009eb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	d07d      	beq.n	8009fb4 <__kernel_rem_pio2f+0x2fc>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	f000 fa16 	bl	800a2f0 <scalbnf>
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009fc4 <__kernel_rem_pio2f+0x30c>
 8009eca:	4619      	mov	r1, r3
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	f280 80af 	bge.w	800a030 <__kernel_rem_pio2f+0x378>
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	2400      	movs	r4, #0
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f2c0 80d0 	blt.w	800a07c <__kernel_rem_pio2f+0x3c4>
 8009edc:	a942      	add	r1, sp, #264	; 0x108
 8009ede:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8009ee2:	4a36      	ldr	r2, [pc, #216]	; (8009fbc <__kernel_rem_pio2f+0x304>)
 8009ee4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8009fc8 <__kernel_rem_pio2f+0x310>
 8009ee8:	2100      	movs	r1, #0
 8009eea:	e0bb      	b.n	800a064 <__kernel_rem_pio2f+0x3ac>
 8009eec:	f04f 0b02 	mov.w	fp, #2
 8009ef0:	e78a      	b.n	8009e08 <__kernel_rem_pio2f+0x150>
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	b948      	cbnz	r0, 8009f0a <__kernel_rem_pio2f+0x252>
 8009ef6:	b11a      	cbz	r2, 8009f00 <__kernel_rem_pio2f+0x248>
 8009ef8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f10e 0e01 	add.w	lr, lr, #1
 8009f04:	3304      	adds	r3, #4
 8009f06:	4610      	mov	r0, r2
 8009f08:	e784      	b.n	8009e14 <__kernel_rem_pio2f+0x15c>
 8009f0a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	4602      	mov	r2, r0
 8009f12:	e7f5      	b.n	8009f00 <__kernel_rem_pio2f+0x248>
 8009f14:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009f18:	ab06      	add	r3, sp, #24
 8009f1a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f22:	aa06      	add	r2, sp, #24
 8009f24:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8009f28:	e77d      	b.n	8009e26 <__kernel_rem_pio2f+0x16e>
 8009f2a:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009f2e:	ab06      	add	r3, sp, #24
 8009f30:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f38:	e7f3      	b.n	8009f22 <__kernel_rem_pio2f+0x26a>
 8009f3a:	a906      	add	r1, sp, #24
 8009f3c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8009f40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009f44:	4302      	orrs	r2, r0
 8009f46:	e7ad      	b.n	8009ea4 <__kernel_rem_pio2f+0x1ec>
 8009f48:	3001      	adds	r0, #1
 8009f4a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	d0fa      	beq.n	8009f48 <__kernel_rem_pio2f+0x290>
 8009f52:	a91a      	add	r1, sp, #104	; 0x68
 8009f54:	eb0a 0208 	add.w	r2, sl, r8
 8009f58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009f5c:	f10a 0301 	add.w	r3, sl, #1
 8009f60:	eb0a 0100 	add.w	r1, sl, r0
 8009f64:	4299      	cmp	r1, r3
 8009f66:	da04      	bge.n	8009f72 <__kernel_rem_pio2f+0x2ba>
 8009f68:	468a      	mov	sl, r1
 8009f6a:	e70e      	b.n	8009d8a <__kernel_rem_pio2f+0xd2>
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	2001      	movs	r0, #1
 8009f70:	e7eb      	b.n	8009f4a <__kernel_rem_pio2f+0x292>
 8009f72:	9803      	ldr	r0, [sp, #12]
 8009f74:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009f78:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009f7c:	9000      	str	r0, [sp, #0]
 8009f7e:	ee07 0a90 	vmov	s15, r0
 8009f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f86:	2000      	movs	r0, #0
 8009f88:	ece2 7a01 	vstmia	r2!, {s15}
 8009f8c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009fc8 <__kernel_rem_pio2f+0x310>
 8009f90:	4696      	mov	lr, r2
 8009f92:	4548      	cmp	r0, r9
 8009f94:	dd06      	ble.n	8009fa4 <__kernel_rem_pio2f+0x2ec>
 8009f96:	a842      	add	r0, sp, #264	; 0x108
 8009f98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009f9c:	edc0 7a00 	vstr	s15, [r0]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	e7df      	b.n	8009f64 <__kernel_rem_pio2f+0x2ac>
 8009fa4:	ecfc 6a01 	vldmia	ip!, {s13}
 8009fa8:	ed3e 7a01 	vldmdb	lr!, {s14}
 8009fac:	3001      	adds	r0, #1
 8009fae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009fb2:	e7ee      	b.n	8009f92 <__kernel_rem_pio2f+0x2da>
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	e779      	b.n	8009eac <__kernel_rem_pio2f+0x1f4>
 8009fb8:	0800aa04 	.word	0x0800aa04
 8009fbc:	0800a9d8 	.word	0x0800a9d8
 8009fc0:	43800000 	.word	0x43800000
 8009fc4:	3b800000 	.word	0x3b800000
 8009fc8:	00000000 	.word	0x00000000
 8009fcc:	9b02      	ldr	r3, [sp, #8]
 8009fce:	eeb0 0a48 	vmov.f32	s0, s16
 8009fd2:	1b98      	subs	r0, r3, r6
 8009fd4:	f000 f98c 	bl	800a2f0 <scalbnf>
 8009fd8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009fc0 <__kernel_rem_pio2f+0x308>
 8009fdc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe4:	db1b      	blt.n	800a01e <__kernel_rem_pio2f+0x366>
 8009fe6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009fc4 <__kernel_rem_pio2f+0x30c>
 8009fea:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009fee:	aa06      	add	r2, sp, #24
 8009ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ff4:	a906      	add	r1, sp, #24
 8009ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ffa:	3408      	adds	r4, #8
 8009ffc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a004:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a008:	ee10 3a10 	vmov	r3, s0
 800a00c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800a010:	ee17 2a90 	vmov	r2, s15
 800a014:	f10a 0301 	add.w	r3, sl, #1
 800a018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a01c:	e74c      	b.n	8009eb8 <__kernel_rem_pio2f+0x200>
 800a01e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a022:	aa06      	add	r2, sp, #24
 800a024:	ee10 3a10 	vmov	r3, s0
 800a028:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800a02c:	4653      	mov	r3, sl
 800a02e:	e743      	b.n	8009eb8 <__kernel_rem_pio2f+0x200>
 800a030:	aa42      	add	r2, sp, #264	; 0x108
 800a032:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a036:	aa06      	add	r2, sp, #24
 800a038:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a03c:	9201      	str	r2, [sp, #4]
 800a03e:	ee07 2a90 	vmov	s15, r2
 800a042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a046:	3901      	subs	r1, #1
 800a048:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a04c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a050:	edc0 7a00 	vstr	s15, [r0]
 800a054:	e73a      	b.n	8009ecc <__kernel_rem_pio2f+0x214>
 800a056:	ecf2 6a01 	vldmia	r2!, {s13}
 800a05a:	ecb6 7a01 	vldmia	r6!, {s14}
 800a05e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a062:	3101      	adds	r1, #1
 800a064:	42b9      	cmp	r1, r7
 800a066:	dc01      	bgt.n	800a06c <__kernel_rem_pio2f+0x3b4>
 800a068:	428c      	cmp	r4, r1
 800a06a:	daf4      	bge.n	800a056 <__kernel_rem_pio2f+0x39e>
 800a06c:	aa56      	add	r2, sp, #344	; 0x158
 800a06e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800a072:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a076:	3801      	subs	r0, #1
 800a078:	3401      	adds	r4, #1
 800a07a:	e72c      	b.n	8009ed6 <__kernel_rem_pio2f+0x21e>
 800a07c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a07e:	2a02      	cmp	r2, #2
 800a080:	dc0a      	bgt.n	800a098 <__kernel_rem_pio2f+0x3e0>
 800a082:	2a00      	cmp	r2, #0
 800a084:	dc61      	bgt.n	800a14a <__kernel_rem_pio2f+0x492>
 800a086:	d03c      	beq.n	800a102 <__kernel_rem_pio2f+0x44a>
 800a088:	9b00      	ldr	r3, [sp, #0]
 800a08a:	f003 0007 	and.w	r0, r3, #7
 800a08e:	b057      	add	sp, #348	; 0x15c
 800a090:	ecbd 8b04 	vpop	{d8-d9}
 800a094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a098:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a09a:	2a03      	cmp	r2, #3
 800a09c:	d1f4      	bne.n	800a088 <__kernel_rem_pio2f+0x3d0>
 800a09e:	aa2e      	add	r2, sp, #184	; 0xb8
 800a0a0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	461c      	mov	r4, r3
 800a0a8:	2c00      	cmp	r4, #0
 800a0aa:	f1a0 0004 	sub.w	r0, r0, #4
 800a0ae:	dc59      	bgt.n	800a164 <__kernel_rem_pio2f+0x4ac>
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	2801      	cmp	r0, #1
 800a0b4:	f1a1 0104 	sub.w	r1, r1, #4
 800a0b8:	dc64      	bgt.n	800a184 <__kernel_rem_pio2f+0x4cc>
 800a0ba:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8009fc8 <__kernel_rem_pio2f+0x310>
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	dc70      	bgt.n	800a1a4 <__kernel_rem_pio2f+0x4ec>
 800a0c2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a0c6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a0ca:	f1bb 0f00 	cmp.w	fp, #0
 800a0ce:	d172      	bne.n	800a1b6 <__kernel_rem_pio2f+0x4fe>
 800a0d0:	edc5 6a00 	vstr	s13, [r5]
 800a0d4:	ed85 7a01 	vstr	s14, [r5, #4]
 800a0d8:	edc5 7a02 	vstr	s15, [r5, #8]
 800a0dc:	e7d4      	b.n	800a088 <__kernel_rem_pio2f+0x3d0>
 800a0de:	aa2e      	add	r2, sp, #184	; 0xb8
 800a0e0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a0e4:	ed91 7a00 	vldr	s14, [r1]
 800a0e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	daf5      	bge.n	800a0de <__kernel_rem_pio2f+0x426>
 800a0f2:	f1bb 0f00 	cmp.w	fp, #0
 800a0f6:	d001      	beq.n	800a0fc <__kernel_rem_pio2f+0x444>
 800a0f8:	eef1 7a67 	vneg.f32	s15, s15
 800a0fc:	edc5 7a00 	vstr	s15, [r5]
 800a100:	e7c2      	b.n	800a088 <__kernel_rem_pio2f+0x3d0>
 800a102:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8009fc8 <__kernel_rem_pio2f+0x310>
 800a106:	e7f2      	b.n	800a0ee <__kernel_rem_pio2f+0x436>
 800a108:	aa2e      	add	r2, sp, #184	; 0xb8
 800a10a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a10e:	edd0 7a00 	vldr	s15, [r0]
 800a112:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a116:	3901      	subs	r1, #1
 800a118:	2900      	cmp	r1, #0
 800a11a:	daf5      	bge.n	800a108 <__kernel_rem_pio2f+0x450>
 800a11c:	f1bb 0f00 	cmp.w	fp, #0
 800a120:	d017      	beq.n	800a152 <__kernel_rem_pio2f+0x49a>
 800a122:	eef1 7a47 	vneg.f32	s15, s14
 800a126:	edc5 7a00 	vstr	s15, [r5]
 800a12a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a12e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a132:	a82f      	add	r0, sp, #188	; 0xbc
 800a134:	2101      	movs	r1, #1
 800a136:	428b      	cmp	r3, r1
 800a138:	da0e      	bge.n	800a158 <__kernel_rem_pio2f+0x4a0>
 800a13a:	f1bb 0f00 	cmp.w	fp, #0
 800a13e:	d001      	beq.n	800a144 <__kernel_rem_pio2f+0x48c>
 800a140:	eef1 7a67 	vneg.f32	s15, s15
 800a144:	edc5 7a01 	vstr	s15, [r5, #4]
 800a148:	e79e      	b.n	800a088 <__kernel_rem_pio2f+0x3d0>
 800a14a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8009fc8 <__kernel_rem_pio2f+0x310>
 800a14e:	4619      	mov	r1, r3
 800a150:	e7e2      	b.n	800a118 <__kernel_rem_pio2f+0x460>
 800a152:	eef0 7a47 	vmov.f32	s15, s14
 800a156:	e7e6      	b.n	800a126 <__kernel_rem_pio2f+0x46e>
 800a158:	ecb0 7a01 	vldmia	r0!, {s14}
 800a15c:	3101      	adds	r1, #1
 800a15e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a162:	e7e8      	b.n	800a136 <__kernel_rem_pio2f+0x47e>
 800a164:	edd0 7a00 	vldr	s15, [r0]
 800a168:	edd0 6a01 	vldr	s13, [r0, #4]
 800a16c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a170:	3c01      	subs	r4, #1
 800a172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a176:	ed80 7a00 	vstr	s14, [r0]
 800a17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17e:	edc0 7a01 	vstr	s15, [r0, #4]
 800a182:	e791      	b.n	800a0a8 <__kernel_rem_pio2f+0x3f0>
 800a184:	edd1 7a00 	vldr	s15, [r1]
 800a188:	edd1 6a01 	vldr	s13, [r1, #4]
 800a18c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a190:	3801      	subs	r0, #1
 800a192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a196:	ed81 7a00 	vstr	s14, [r1]
 800a19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a19e:	edc1 7a01 	vstr	s15, [r1, #4]
 800a1a2:	e786      	b.n	800a0b2 <__kernel_rem_pio2f+0x3fa>
 800a1a4:	aa2e      	add	r2, sp, #184	; 0xb8
 800a1a6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a1aa:	ed91 7a00 	vldr	s14, [r1]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1b4:	e783      	b.n	800a0be <__kernel_rem_pio2f+0x406>
 800a1b6:	eef1 6a66 	vneg.f32	s13, s13
 800a1ba:	eeb1 7a47 	vneg.f32	s14, s14
 800a1be:	edc5 6a00 	vstr	s13, [r5]
 800a1c2:	ed85 7a01 	vstr	s14, [r5, #4]
 800a1c6:	eef1 7a67 	vneg.f32	s15, s15
 800a1ca:	e785      	b.n	800a0d8 <__kernel_rem_pio2f+0x420>

0800a1cc <__kernel_sinf>:
 800a1cc:	ee10 3a10 	vmov	r3, s0
 800a1d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a1d8:	da04      	bge.n	800a1e4 <__kernel_sinf+0x18>
 800a1da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a1de:	ee17 3a90 	vmov	r3, s15
 800a1e2:	b35b      	cbz	r3, 800a23c <__kernel_sinf+0x70>
 800a1e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a1e8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a240 <__kernel_sinf+0x74>
 800a1ec:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a244 <__kernel_sinf+0x78>
 800a1f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a1f4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a248 <__kernel_sinf+0x7c>
 800a1f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a1fc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a24c <__kernel_sinf+0x80>
 800a200:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a204:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a250 <__kernel_sinf+0x84>
 800a208:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a20c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a210:	b930      	cbnz	r0, 800a220 <__kernel_sinf+0x54>
 800a212:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a254 <__kernel_sinf+0x88>
 800a216:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a21a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a21e:	4770      	bx	lr
 800a220:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a224:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a228:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a22c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a230:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a258 <__kernel_sinf+0x8c>
 800a234:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a238:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	2f2ec9d3 	.word	0x2f2ec9d3
 800a244:	b2d72f34 	.word	0xb2d72f34
 800a248:	3638ef1b 	.word	0x3638ef1b
 800a24c:	b9500d01 	.word	0xb9500d01
 800a250:	3c088889 	.word	0x3c088889
 800a254:	be2aaaab 	.word	0xbe2aaaab
 800a258:	3e2aaaab 	.word	0x3e2aaaab

0800a25c <fabsf>:
 800a25c:	ee10 3a10 	vmov	r3, s0
 800a260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a264:	ee00 3a10 	vmov	s0, r3
 800a268:	4770      	bx	lr
	...

0800a26c <floorf>:
 800a26c:	ee10 3a10 	vmov	r3, s0
 800a270:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a274:	3a7f      	subs	r2, #127	; 0x7f
 800a276:	2a16      	cmp	r2, #22
 800a278:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a27c:	dc2a      	bgt.n	800a2d4 <floorf+0x68>
 800a27e:	2a00      	cmp	r2, #0
 800a280:	da11      	bge.n	800a2a6 <floorf+0x3a>
 800a282:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a2e4 <floorf+0x78>
 800a286:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a28a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a292:	dd05      	ble.n	800a2a0 <floorf+0x34>
 800a294:	2b00      	cmp	r3, #0
 800a296:	da23      	bge.n	800a2e0 <floorf+0x74>
 800a298:	4a13      	ldr	r2, [pc, #76]	; (800a2e8 <floorf+0x7c>)
 800a29a:	2900      	cmp	r1, #0
 800a29c:	bf18      	it	ne
 800a29e:	4613      	movne	r3, r2
 800a2a0:	ee00 3a10 	vmov	s0, r3
 800a2a4:	4770      	bx	lr
 800a2a6:	4911      	ldr	r1, [pc, #68]	; (800a2ec <floorf+0x80>)
 800a2a8:	4111      	asrs	r1, r2
 800a2aa:	420b      	tst	r3, r1
 800a2ac:	d0fa      	beq.n	800a2a4 <floorf+0x38>
 800a2ae:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a2e4 <floorf+0x78>
 800a2b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a2b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2be:	ddef      	ble.n	800a2a0 <floorf+0x34>
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	bfbe      	ittt	lt
 800a2c4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a2c8:	fa40 f202 	asrlt.w	r2, r0, r2
 800a2cc:	189b      	addlt	r3, r3, r2
 800a2ce:	ea23 0301 	bic.w	r3, r3, r1
 800a2d2:	e7e5      	b.n	800a2a0 <floorf+0x34>
 800a2d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a2d8:	d3e4      	bcc.n	800a2a4 <floorf+0x38>
 800a2da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a2de:	4770      	bx	lr
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e7dd      	b.n	800a2a0 <floorf+0x34>
 800a2e4:	7149f2ca 	.word	0x7149f2ca
 800a2e8:	bf800000 	.word	0xbf800000
 800a2ec:	007fffff 	.word	0x007fffff

0800a2f0 <scalbnf>:
 800a2f0:	ee10 3a10 	vmov	r3, s0
 800a2f4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a2f8:	d025      	beq.n	800a346 <scalbnf+0x56>
 800a2fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a2fe:	d302      	bcc.n	800a306 <scalbnf+0x16>
 800a300:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a304:	4770      	bx	lr
 800a306:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a30a:	d122      	bne.n	800a352 <scalbnf+0x62>
 800a30c:	4b2a      	ldr	r3, [pc, #168]	; (800a3b8 <scalbnf+0xc8>)
 800a30e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a3bc <scalbnf+0xcc>
 800a312:	4298      	cmp	r0, r3
 800a314:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a318:	db16      	blt.n	800a348 <scalbnf+0x58>
 800a31a:	ee10 3a10 	vmov	r3, s0
 800a31e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a322:	3a19      	subs	r2, #25
 800a324:	4402      	add	r2, r0
 800a326:	2afe      	cmp	r2, #254	; 0xfe
 800a328:	dd15      	ble.n	800a356 <scalbnf+0x66>
 800a32a:	ee10 3a10 	vmov	r3, s0
 800a32e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a3c0 <scalbnf+0xd0>
 800a332:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a3c4 <scalbnf+0xd4>
 800a336:	2b00      	cmp	r3, #0
 800a338:	eeb0 7a67 	vmov.f32	s14, s15
 800a33c:	bfb8      	it	lt
 800a33e:	eef0 7a66 	vmovlt.f32	s15, s13
 800a342:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a346:	4770      	bx	lr
 800a348:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a3c8 <scalbnf+0xd8>
 800a34c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a350:	4770      	bx	lr
 800a352:	0dd2      	lsrs	r2, r2, #23
 800a354:	e7e6      	b.n	800a324 <scalbnf+0x34>
 800a356:	2a00      	cmp	r2, #0
 800a358:	dd06      	ble.n	800a368 <scalbnf+0x78>
 800a35a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a35e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a362:	ee00 3a10 	vmov	s0, r3
 800a366:	4770      	bx	lr
 800a368:	f112 0f16 	cmn.w	r2, #22
 800a36c:	da1a      	bge.n	800a3a4 <scalbnf+0xb4>
 800a36e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a372:	4298      	cmp	r0, r3
 800a374:	ee10 3a10 	vmov	r3, s0
 800a378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a37c:	dd0a      	ble.n	800a394 <scalbnf+0xa4>
 800a37e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a3c0 <scalbnf+0xd0>
 800a382:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a3c4 <scalbnf+0xd4>
 800a386:	eef0 7a40 	vmov.f32	s15, s0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	bf18      	it	ne
 800a38e:	eeb0 0a47 	vmovne.f32	s0, s14
 800a392:	e7db      	b.n	800a34c <scalbnf+0x5c>
 800a394:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a3c8 <scalbnf+0xd8>
 800a398:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a3cc <scalbnf+0xdc>
 800a39c:	eef0 7a40 	vmov.f32	s15, s0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	e7f3      	b.n	800a38c <scalbnf+0x9c>
 800a3a4:	3219      	adds	r2, #25
 800a3a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3aa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a3ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a3d0 <scalbnf+0xe0>
 800a3b2:	ee07 3a10 	vmov	s14, r3
 800a3b6:	e7c4      	b.n	800a342 <scalbnf+0x52>
 800a3b8:	ffff3cb0 	.word	0xffff3cb0
 800a3bc:	4c000000 	.word	0x4c000000
 800a3c0:	7149f2ca 	.word	0x7149f2ca
 800a3c4:	f149f2ca 	.word	0xf149f2ca
 800a3c8:	0da24260 	.word	0x0da24260
 800a3cc:	8da24260 	.word	0x8da24260
 800a3d0:	33000000 	.word	0x33000000

0800a3d4 <__errno>:
 800a3d4:	4b01      	ldr	r3, [pc, #4]	; (800a3dc <__errno+0x8>)
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	2000002c 	.word	0x2000002c

0800a3e0 <__libc_init_array>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	4d0d      	ldr	r5, [pc, #52]	; (800a418 <__libc_init_array+0x38>)
 800a3e4:	4c0d      	ldr	r4, [pc, #52]	; (800a41c <__libc_init_array+0x3c>)
 800a3e6:	1b64      	subs	r4, r4, r5
 800a3e8:	10a4      	asrs	r4, r4, #2
 800a3ea:	2600      	movs	r6, #0
 800a3ec:	42a6      	cmp	r6, r4
 800a3ee:	d109      	bne.n	800a404 <__libc_init_array+0x24>
 800a3f0:	4d0b      	ldr	r5, [pc, #44]	; (800a420 <__libc_init_array+0x40>)
 800a3f2:	4c0c      	ldr	r4, [pc, #48]	; (800a424 <__libc_init_array+0x44>)
 800a3f4:	f000 f906 	bl	800a604 <_init>
 800a3f8:	1b64      	subs	r4, r4, r5
 800a3fa:	10a4      	asrs	r4, r4, #2
 800a3fc:	2600      	movs	r6, #0
 800a3fe:	42a6      	cmp	r6, r4
 800a400:	d105      	bne.n	800a40e <__libc_init_array+0x2e>
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	f855 3b04 	ldr.w	r3, [r5], #4
 800a408:	4798      	blx	r3
 800a40a:	3601      	adds	r6, #1
 800a40c:	e7ee      	b.n	800a3ec <__libc_init_array+0xc>
 800a40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a412:	4798      	blx	r3
 800a414:	3601      	adds	r6, #1
 800a416:	e7f2      	b.n	800a3fe <__libc_init_array+0x1e>
 800a418:	0800aa18 	.word	0x0800aa18
 800a41c:	0800aa18 	.word	0x0800aa18
 800a420:	0800aa18 	.word	0x0800aa18
 800a424:	0800aa1c 	.word	0x0800aa1c

0800a428 <malloc>:
 800a428:	4b02      	ldr	r3, [pc, #8]	; (800a434 <malloc+0xc>)
 800a42a:	4601      	mov	r1, r0
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f000 b871 	b.w	800a514 <_malloc_r>
 800a432:	bf00      	nop
 800a434:	2000002c 	.word	0x2000002c

0800a438 <free>:
 800a438:	4b02      	ldr	r3, [pc, #8]	; (800a444 <free+0xc>)
 800a43a:	4601      	mov	r1, r0
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	f000 b819 	b.w	800a474 <_free_r>
 800a442:	bf00      	nop
 800a444:	2000002c 	.word	0x2000002c

0800a448 <memcpy>:
 800a448:	440a      	add	r2, r1
 800a44a:	4291      	cmp	r1, r2
 800a44c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a450:	d100      	bne.n	800a454 <memcpy+0xc>
 800a452:	4770      	bx	lr
 800a454:	b510      	push	{r4, lr}
 800a456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a45a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a45e:	4291      	cmp	r1, r2
 800a460:	d1f9      	bne.n	800a456 <memcpy+0xe>
 800a462:	bd10      	pop	{r4, pc}

0800a464 <memset>:
 800a464:	4402      	add	r2, r0
 800a466:	4603      	mov	r3, r0
 800a468:	4293      	cmp	r3, r2
 800a46a:	d100      	bne.n	800a46e <memset+0xa>
 800a46c:	4770      	bx	lr
 800a46e:	f803 1b01 	strb.w	r1, [r3], #1
 800a472:	e7f9      	b.n	800a468 <memset+0x4>

0800a474 <_free_r>:
 800a474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a476:	2900      	cmp	r1, #0
 800a478:	d048      	beq.n	800a50c <_free_r+0x98>
 800a47a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a47e:	9001      	str	r0, [sp, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f1a1 0404 	sub.w	r4, r1, #4
 800a486:	bfb8      	it	lt
 800a488:	18e4      	addlt	r4, r4, r3
 800a48a:	f000 f8ad 	bl	800a5e8 <__malloc_lock>
 800a48e:	4a20      	ldr	r2, [pc, #128]	; (800a510 <_free_r+0x9c>)
 800a490:	9801      	ldr	r0, [sp, #4]
 800a492:	6813      	ldr	r3, [r2, #0]
 800a494:	4615      	mov	r5, r2
 800a496:	b933      	cbnz	r3, 800a4a6 <_free_r+0x32>
 800a498:	6063      	str	r3, [r4, #4]
 800a49a:	6014      	str	r4, [r2, #0]
 800a49c:	b003      	add	sp, #12
 800a49e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4a2:	f000 b8a7 	b.w	800a5f4 <__malloc_unlock>
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	d90b      	bls.n	800a4c2 <_free_r+0x4e>
 800a4aa:	6821      	ldr	r1, [r4, #0]
 800a4ac:	1862      	adds	r2, r4, r1
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	bf04      	itt	eq
 800a4b2:	681a      	ldreq	r2, [r3, #0]
 800a4b4:	685b      	ldreq	r3, [r3, #4]
 800a4b6:	6063      	str	r3, [r4, #4]
 800a4b8:	bf04      	itt	eq
 800a4ba:	1852      	addeq	r2, r2, r1
 800a4bc:	6022      	streq	r2, [r4, #0]
 800a4be:	602c      	str	r4, [r5, #0]
 800a4c0:	e7ec      	b.n	800a49c <_free_r+0x28>
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	b10b      	cbz	r3, 800a4cc <_free_r+0x58>
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	d9fa      	bls.n	800a4c2 <_free_r+0x4e>
 800a4cc:	6811      	ldr	r1, [r2, #0]
 800a4ce:	1855      	adds	r5, r2, r1
 800a4d0:	42a5      	cmp	r5, r4
 800a4d2:	d10b      	bne.n	800a4ec <_free_r+0x78>
 800a4d4:	6824      	ldr	r4, [r4, #0]
 800a4d6:	4421      	add	r1, r4
 800a4d8:	1854      	adds	r4, r2, r1
 800a4da:	42a3      	cmp	r3, r4
 800a4dc:	6011      	str	r1, [r2, #0]
 800a4de:	d1dd      	bne.n	800a49c <_free_r+0x28>
 800a4e0:	681c      	ldr	r4, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	6053      	str	r3, [r2, #4]
 800a4e6:	4421      	add	r1, r4
 800a4e8:	6011      	str	r1, [r2, #0]
 800a4ea:	e7d7      	b.n	800a49c <_free_r+0x28>
 800a4ec:	d902      	bls.n	800a4f4 <_free_r+0x80>
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	e7d3      	b.n	800a49c <_free_r+0x28>
 800a4f4:	6825      	ldr	r5, [r4, #0]
 800a4f6:	1961      	adds	r1, r4, r5
 800a4f8:	428b      	cmp	r3, r1
 800a4fa:	bf04      	itt	eq
 800a4fc:	6819      	ldreq	r1, [r3, #0]
 800a4fe:	685b      	ldreq	r3, [r3, #4]
 800a500:	6063      	str	r3, [r4, #4]
 800a502:	bf04      	itt	eq
 800a504:	1949      	addeq	r1, r1, r5
 800a506:	6021      	streq	r1, [r4, #0]
 800a508:	6054      	str	r4, [r2, #4]
 800a50a:	e7c7      	b.n	800a49c <_free_r+0x28>
 800a50c:	b003      	add	sp, #12
 800a50e:	bd30      	pop	{r4, r5, pc}
 800a510:	2000010c 	.word	0x2000010c

0800a514 <_malloc_r>:
 800a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a516:	1ccd      	adds	r5, r1, #3
 800a518:	f025 0503 	bic.w	r5, r5, #3
 800a51c:	3508      	adds	r5, #8
 800a51e:	2d0c      	cmp	r5, #12
 800a520:	bf38      	it	cc
 800a522:	250c      	movcc	r5, #12
 800a524:	2d00      	cmp	r5, #0
 800a526:	4606      	mov	r6, r0
 800a528:	db01      	blt.n	800a52e <_malloc_r+0x1a>
 800a52a:	42a9      	cmp	r1, r5
 800a52c:	d903      	bls.n	800a536 <_malloc_r+0x22>
 800a52e:	230c      	movs	r3, #12
 800a530:	6033      	str	r3, [r6, #0]
 800a532:	2000      	movs	r0, #0
 800a534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a536:	f000 f857 	bl	800a5e8 <__malloc_lock>
 800a53a:	4921      	ldr	r1, [pc, #132]	; (800a5c0 <_malloc_r+0xac>)
 800a53c:	680a      	ldr	r2, [r1, #0]
 800a53e:	4614      	mov	r4, r2
 800a540:	b99c      	cbnz	r4, 800a56a <_malloc_r+0x56>
 800a542:	4f20      	ldr	r7, [pc, #128]	; (800a5c4 <_malloc_r+0xb0>)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	b923      	cbnz	r3, 800a552 <_malloc_r+0x3e>
 800a548:	4621      	mov	r1, r4
 800a54a:	4630      	mov	r0, r6
 800a54c:	f000 f83c 	bl	800a5c8 <_sbrk_r>
 800a550:	6038      	str	r0, [r7, #0]
 800a552:	4629      	mov	r1, r5
 800a554:	4630      	mov	r0, r6
 800a556:	f000 f837 	bl	800a5c8 <_sbrk_r>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d123      	bne.n	800a5a6 <_malloc_r+0x92>
 800a55e:	230c      	movs	r3, #12
 800a560:	6033      	str	r3, [r6, #0]
 800a562:	4630      	mov	r0, r6
 800a564:	f000 f846 	bl	800a5f4 <__malloc_unlock>
 800a568:	e7e3      	b.n	800a532 <_malloc_r+0x1e>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	1b5b      	subs	r3, r3, r5
 800a56e:	d417      	bmi.n	800a5a0 <_malloc_r+0x8c>
 800a570:	2b0b      	cmp	r3, #11
 800a572:	d903      	bls.n	800a57c <_malloc_r+0x68>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	441c      	add	r4, r3
 800a578:	6025      	str	r5, [r4, #0]
 800a57a:	e004      	b.n	800a586 <_malloc_r+0x72>
 800a57c:	6863      	ldr	r3, [r4, #4]
 800a57e:	42a2      	cmp	r2, r4
 800a580:	bf0c      	ite	eq
 800a582:	600b      	streq	r3, [r1, #0]
 800a584:	6053      	strne	r3, [r2, #4]
 800a586:	4630      	mov	r0, r6
 800a588:	f000 f834 	bl	800a5f4 <__malloc_unlock>
 800a58c:	f104 000b 	add.w	r0, r4, #11
 800a590:	1d23      	adds	r3, r4, #4
 800a592:	f020 0007 	bic.w	r0, r0, #7
 800a596:	1ac2      	subs	r2, r0, r3
 800a598:	d0cc      	beq.n	800a534 <_malloc_r+0x20>
 800a59a:	1a1b      	subs	r3, r3, r0
 800a59c:	50a3      	str	r3, [r4, r2]
 800a59e:	e7c9      	b.n	800a534 <_malloc_r+0x20>
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	6864      	ldr	r4, [r4, #4]
 800a5a4:	e7cc      	b.n	800a540 <_malloc_r+0x2c>
 800a5a6:	1cc4      	adds	r4, r0, #3
 800a5a8:	f024 0403 	bic.w	r4, r4, #3
 800a5ac:	42a0      	cmp	r0, r4
 800a5ae:	d0e3      	beq.n	800a578 <_malloc_r+0x64>
 800a5b0:	1a21      	subs	r1, r4, r0
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f000 f808 	bl	800a5c8 <_sbrk_r>
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	d1dd      	bne.n	800a578 <_malloc_r+0x64>
 800a5bc:	e7cf      	b.n	800a55e <_malloc_r+0x4a>
 800a5be:	bf00      	nop
 800a5c0:	2000010c 	.word	0x2000010c
 800a5c4:	20000110 	.word	0x20000110

0800a5c8 <_sbrk_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	; (800a5e4 <_sbrk_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f6 fee2 	bl	800139c <_sbrk>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_sbrk_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_sbrk_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20000a9c 	.word	0x20000a9c

0800a5e8 <__malloc_lock>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__malloc_lock+0x8>)
 800a5ea:	f000 b809 	b.w	800a600 <__retarget_lock_acquire_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	20000aa4 	.word	0x20000aa4

0800a5f4 <__malloc_unlock>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	; (800a5fc <__malloc_unlock+0x8>)
 800a5f6:	f000 b804 	b.w	800a602 <__retarget_lock_release_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	20000aa4 	.word	0x20000aa4

0800a600 <__retarget_lock_acquire_recursive>:
 800a600:	4770      	bx	lr

0800a602 <__retarget_lock_release_recursive>:
 800a602:	4770      	bx	lr

0800a604 <_init>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	bf00      	nop
 800a608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60a:	bc08      	pop	{r3}
 800a60c:	469e      	mov	lr, r3
 800a60e:	4770      	bx	lr

0800a610 <_fini>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	bf00      	nop
 800a614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a616:	bc08      	pop	{r3}
 800a618:	469e      	mov	lr, r3
 800a61a:	4770      	bx	lr
