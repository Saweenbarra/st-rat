
st-rat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005474  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059ec  080059ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f4  080059f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000000c  08005a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005a08  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd48  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002090  00000000  00000000  0002dd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  000309a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ee4  00000000  00000000  00031468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f201  00000000  00000000  0005234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6078  00000000  00000000  0006154d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001275c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  00127618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080055e4 	.word	0x080055e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080055e4 	.word	0x080055e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f001 ff75 	bl	80023d4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000028 	.word	0x20000028
 80004f8:	2000002c 	.word	0x2000002c

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f001 ff5b 	bl	80023d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f002 f851 	bl	80025d0 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028
 800053c:	2000002c 	.word	0x2000002c

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b83      	ldr	r3, [pc, #524]	; (800075c <CS43_Init+0x21c>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b81      	ldr	r3, [pc, #516]	; (800075c <CS43_Init+0x21c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7f      	ldr	r3, [pc, #508]	; (800075c <CS43_Init+0x21c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487d      	ldr	r0, [pc, #500]	; (8000760 <CS43_Init+0x220>)
 800056c:	f001 fdd4 	bl	8002118 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7c      	ldr	r3, [pc, #496]	; (8000764 <CS43_Init+0x224>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f005 f81c 	bl	80055b8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b79      	ldr	r3, [pc, #484]	; (8000768 <CS43_Init+0x228>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4978      	ldr	r1, [pc, #480]	; (8000768 <CS43_Init+0x228>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b76      	ldr	r3, [pc, #472]	; (8000768 <CS43_Init+0x228>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b74      	ldr	r3, [pc, #464]	; (8000768 <CS43_Init+0x228>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b72      	ldr	r3, [pc, #456]	; (8000768 <CS43_Init+0x228>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b71      	ldr	r3, [pc, #452]	; (8000768 <CS43_Init+0x228>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6e      	ldr	r3, [pc, #440]	; (8000768 <CS43_Init+0x228>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6d      	ldr	r3, [pc, #436]	; (8000768 <CS43_Init+0x228>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <CS43_Init+0x228>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	496b      	ldr	r1, [pc, #428]	; (800076c <CS43_Init+0x22c>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b68      	ldr	r3, [pc, #416]	; (8000768 <CS43_Init+0x228>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 0); //MCLKDIV2
 80005cc:	4b66      	ldr	r3, [pc, #408]	; (8000768 <CS43_Init+0x228>)
 80005ce:	785b      	ldrb	r3, [r3, #1]
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <CS43_Init+0x228>)
 80005d8:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005da:	4964      	ldr	r1, [pc, #400]	; (800076c <CS43_Init+0x22c>)
 80005dc:	2005      	movs	r0, #5
 80005de:	f7ff ff6f 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005e2:	4961      	ldr	r1, [pc, #388]	; (8000768 <CS43_Init+0x228>)
 80005e4:	2006      	movs	r0, #6
 80005e6:	f7ff ff89 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005ea:	4b5f      	ldr	r3, [pc, #380]	; (8000768 <CS43_Init+0x228>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5c      	ldr	r3, [pc, #368]	; (8000768 <CS43_Init+0x228>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005f8:	4b5b      	ldr	r3, [pc, #364]	; (8000768 <CS43_Init+0x228>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b59      	ldr	r3, [pc, #356]	; (8000768 <CS43_Init+0x228>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000606:	4b58      	ldr	r3, [pc, #352]	; (8000768 <CS43_Init+0x228>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b55      	ldr	r3, [pc, #340]	; (8000768 <CS43_Init+0x228>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000614:	4b54      	ldr	r3, [pc, #336]	; (8000768 <CS43_Init+0x228>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0310 	bic.w	r3, r3, #16
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b52      	ldr	r3, [pc, #328]	; (8000768 <CS43_Init+0x228>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000622:	4b51      	ldr	r3, [pc, #324]	; (8000768 <CS43_Init+0x228>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f023 0304 	bic.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4e      	ldr	r3, [pc, #312]	; (8000768 <CS43_Init+0x228>)
 800062e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000630:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <CS43_Init+0x228>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b4b      	ldr	r3, [pc, #300]	; (8000768 <CS43_Init+0x228>)
 800063c:	705a      	strb	r2, [r3, #1]
	
	//iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
	iData[1] |=  (0 << 0);  // 24-bit audio word length for I2S interface
 800063e:	4b4a      	ldr	r3, [pc, #296]	; (8000768 <CS43_Init+0x228>)
 8000640:	785a      	ldrb	r2, [r3, #1]
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <CS43_Init+0x228>)
 8000644:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000646:	4949      	ldr	r1, [pc, #292]	; (800076c <CS43_Init+0x22c>)
 8000648:	2006      	movs	r0, #6
 800064a:	f7ff ff39 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800064e:	4947      	ldr	r1, [pc, #284]	; (800076c <CS43_Init+0x22c>)
 8000650:	2008      	movs	r0, #8
 8000652:	f7ff ff53 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000656:	4b44      	ldr	r3, [pc, #272]	; (8000768 <CS43_Init+0x228>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	f023 030f 	bic.w	r3, r3, #15
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b41      	ldr	r3, [pc, #260]	; (8000768 <CS43_Init+0x228>)
 8000662:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000664:	4b40      	ldr	r3, [pc, #256]	; (8000768 <CS43_Init+0x228>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <CS43_Init+0x228>)
 8000670:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000672:	493e      	ldr	r1, [pc, #248]	; (800076c <CS43_Init+0x22c>)
 8000674:	2008      	movs	r0, #8
 8000676:	f7ff ff23 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800067a:	493c      	ldr	r1, [pc, #240]	; (800076c <CS43_Init+0x22c>)
 800067c:	2009      	movs	r0, #9
 800067e:	f7ff ff3d 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000682:	4b39      	ldr	r3, [pc, #228]	; (8000768 <CS43_Init+0x228>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	f023 030f 	bic.w	r3, r3, #15
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <CS43_Init+0x228>)
 800068e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000690:	4b35      	ldr	r3, [pc, #212]	; (8000768 <CS43_Init+0x228>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <CS43_Init+0x228>)
 800069c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800069e:	4933      	ldr	r1, [pc, #204]	; (800076c <CS43_Init+0x22c>)
 80006a0:	2009      	movs	r0, #9
 80006a2:	f7ff ff0d 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006a6:	4931      	ldr	r1, [pc, #196]	; (800076c <CS43_Init+0x22c>)
 80006a8:	200e      	movs	r0, #14
 80006aa:	f7ff ff27 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d123      	bne.n	80006fe <CS43_Init+0x1be>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <CS43_Init+0x228>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <CS43_Init+0x228>)
 80006c2:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <CS43_Init+0x228>)
 80006c6:	785b      	ldrb	r3, [r3, #1]
 80006c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <CS43_Init+0x228>)
 80006d0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <CS43_Init+0x228>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	f023 0320 	bic.w	r3, r3, #32
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <CS43_Init+0x228>)
 80006de:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <CS43_Init+0x228>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	f023 0310 	bic.w	r3, r3, #16
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <CS43_Init+0x228>)
 80006ec:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <CS43_Init+0x228>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	f023 0308 	bic.w	r3, r3, #8
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <CS43_Init+0x228>)
 80006fa:	705a      	strb	r2, [r3, #1]
 80006fc:	e006      	b.n	800070c <CS43_Init+0x1cc>
	}
	else if(outputMode == MODE_I2S)
 80006fe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <CS43_Init+0x1cc>
	{
		iData[1] = 0x02;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <CS43_Init+0x228>)
 8000708:	2202      	movs	r2, #2
 800070a:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800070c:	4917      	ldr	r1, [pc, #92]	; (800076c <CS43_Init+0x22c>)
 800070e:	200e      	movs	r0, #14
 8000710:	f7ff fed6 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000714:	4915      	ldr	r1, [pc, #84]	; (800076c <CS43_Init+0x22c>)
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff fef0 	bl	80004fc <read_register>
	iData[1] = 0x00;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <CS43_Init+0x228>)
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000722:	4912      	ldr	r1, [pc, #72]	; (800076c <CS43_Init+0x22c>)
 8000724:	200f      	movs	r0, #15
 8000726:	f7ff fecb 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <CS43_Init+0x228>)
 800072c:	2200      	movs	r2, #0
 800072e:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <CS43_Init+0x22c>)
 8000732:	2014      	movs	r0, #20
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000738:	490c      	ldr	r1, [pc, #48]	; (800076c <CS43_Init+0x22c>)
 800073a:	2015      	movs	r0, #21
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000740:	490a      	ldr	r1, [pc, #40]	; (800076c <CS43_Init+0x22c>)
 8000742:	201a      	movs	r0, #26
 8000744:	f7ff febc 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000748:	4908      	ldr	r1, [pc, #32]	; (800076c <CS43_Init+0x22c>)
 800074a:	201b      	movs	r0, #27
 800074c:	f7ff feb8 	bl	80004c0 <write_register>
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000758:	b004      	add	sp, #16
 800075a:	4770      	bx	lr
 800075c:	20000218 	.word	0x20000218
 8000760:	40020c00 	.word	0x40020c00
 8000764:	2000002c 	.word	0x2000002c
 8000768:	20000028 	.word	0x20000028
 800076c:	20000029 	.word	0x20000029

08000770 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d837      	bhi.n	80007f0 <CS43_Enable_RightLeft+0x80>
 8000780:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <CS43_Enable_RightLeft+0x18>)
 8000782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000786:	bf00      	nop
 8000788:	08000799 	.word	0x08000799
 800078c:	080007af 	.word	0x080007af
 8000790:	080007c5 	.word	0x080007c5
 8000794:	080007db 	.word	0x080007db
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 800079a:	22c0      	movs	r2, #192	; 0xc0
 800079c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007aa:	705a      	strb	r2, [r3, #1]
			break;
 80007ac:	e021      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007c0:	705a      	strb	r2, [r3, #1]
			break;
 80007c2:	e016      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007c6:	22c0      	movs	r2, #192	; 0xc0
 80007c8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007d6:	705a      	strb	r2, [r3, #1]
			break;
 80007d8:	e00b      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	705a      	strb	r2, [r3, #1]
			break;
 80007ee:	e000      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007f0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	f043 030c 	orr.w	r3, r3, #12
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007fe:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 8000802:	785b      	ldrb	r3, [r3, #1]
 8000804:	f043 0303 	orr.w	r3, r3, #3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 800080c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800080e:	4905      	ldr	r1, [pc, #20]	; (8000824 <CS43_Enable_RightLeft+0xb4>)
 8000810:	2004      	movs	r0, #4
 8000812:	f7ff fe55 	bl	80004c0 <write_register>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000028 	.word	0x20000028
 8000824:	20000029 	.word	0x20000029

08000828 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3b32      	subs	r3, #50	; 0x32
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <CS43_SetVolume+0x78>)
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800084c:	4915      	ldr	r1, [pc, #84]	; (80008a4 <CS43_SetVolume+0x7c>)
 800084e:	2014      	movs	r0, #20
 8000850:	f7ff fe36 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000854:	4913      	ldr	r1, [pc, #76]	; (80008a4 <CS43_SetVolume+0x7c>)
 8000856:	2015      	movs	r0, #21
 8000858:	f7ff fe32 	bl	80004c0 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b64      	cmp	r3, #100	; 0x64
 8000860:	d80e      	bhi.n	8000880 <CS43_SetVolume+0x58>
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <CS43_SetVolume+0x80>)
 800086e:	fb82 1203 	smull	r1, r2, r2, r3
 8000872:	1152      	asrs	r2, r2, #5
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	3b18      	subs	r3, #24
 800087c:	b2db      	uxtb	r3, r3
 800087e:	e000      	b.n	8000882 <CS43_SetVolume+0x5a>
 8000880:	2318      	movs	r3, #24
 8000882:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <CS43_SetVolume+0x78>)
 8000884:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000886:	4907      	ldr	r1, [pc, #28]	; (80008a4 <CS43_SetVolume+0x7c>)
 8000888:	2020      	movs	r0, #32
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800088e:	4905      	ldr	r1, [pc, #20]	; (80008a4 <CS43_SetVolume+0x7c>)
 8000890:	2021      	movs	r0, #33	; 0x21
 8000892:	f7ff fe15 	bl	80004c0 <write_register>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000028 	.word	0x20000028
 80008a4:	20000029 	.word	0x20000029
 80008a8:	51eb851f 	.word	0x51eb851f

080008ac <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <CS43_Start+0x7c>)
 80008b2:	2299      	movs	r2, #153	; 0x99
 80008b4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008b6:	491d      	ldr	r1, [pc, #116]	; (800092c <CS43_Start+0x80>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fe01 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <CS43_Start+0x7c>)
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008c4:	4919      	ldr	r1, [pc, #100]	; (800092c <CS43_Start+0x80>)
 80008c6:	2047      	movs	r0, #71	; 0x47
 80008c8:	f7ff fdfa 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008cc:	4917      	ldr	r1, [pc, #92]	; (800092c <CS43_Start+0x80>)
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f7ff fe14 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <CS43_Start+0x7c>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <CS43_Start+0x7c>)
 80008e0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008e2:	4912      	ldr	r1, [pc, #72]	; (800092c <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fdeb 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008ea:	4910      	ldr	r1, [pc, #64]	; (800092c <CS43_Start+0x80>)
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f7ff fe05 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <CS43_Start+0x7c>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <CS43_Start+0x7c>)
 80008fe:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000900:	490a      	ldr	r1, [pc, #40]	; (800092c <CS43_Start+0x80>)
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f7ff fddc 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <CS43_Start+0x7c>)
 800090a:	2200      	movs	r2, #0
 800090c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800090e:	4907      	ldr	r1, [pc, #28]	; (800092c <CS43_Start+0x80>)
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fdd5 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <CS43_Start+0x7c>)
 8000918:	229e      	movs	r2, #158	; 0x9e
 800091a:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 800091c:	4903      	ldr	r1, [pc, #12]	; (800092c <CS43_Start+0x80>)
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdce 	bl	80004c0 <write_register>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000028 	.word	0x20000028
 800092c:	20000029 	.word	0x20000029

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b095      	sub	sp, #84	; 0x54
 8000934:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  sample_dt = F_OUT/F_SAMPLE;
 8000936:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <main+0xf4>)
 8000938:	4a3b      	ldr	r2, [pc, #236]	; (8000a28 <main+0xf8>)
 800093a:	601a      	str	r2, [r3, #0]
  sample_N = F_SAMPLE/F_OUT;
 800093c:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <main+0xfc>)
 800093e:	2264      	movs	r2, #100	; 0x64
 8000940:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f000 fd59 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f883 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 f9bf 	bl	8000ccc <MX_GPIO_Init>
  MX_DMA_Init();
 800094e:	f000 f995 	bl	8000c7c <MX_DMA_Init>
  MX_I2C1_Init();
 8000952:	f000 f8ff 	bl	8000b54 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000956:	f000 f92b 	bl	8000bb0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800095a:	f000 f959 	bl	8000c10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2SEx_TransmitReceive_DMA(&hi2s3, txBuf, rxBuf, 4);
 800095e:	2304      	movs	r3, #4
 8000960:	4a33      	ldr	r2, [pc, #204]	; (8000a30 <main+0x100>)
 8000962:	4934      	ldr	r1, [pc, #208]	; (8000a34 <main+0x104>)
 8000964:	4834      	ldr	r0, [pc, #208]	; (8000a38 <main+0x108>)
 8000966:	f002 fdd9 	bl	800351c <HAL_I2SEx_TransmitReceive_DMA>

  CS43_Init(hi2c1, MODE_I2S);
 800096a:	4c34      	ldr	r4, [pc, #208]	; (8000a3c <main+0x10c>)
 800096c:	2300      	movs	r3, #0
 800096e:	9311      	str	r3, [sp, #68]	; 0x44
 8000970:	4668      	mov	r0, sp
 8000972:	f104 0310 	add.w	r3, r4, #16
 8000976:	2244      	movs	r2, #68	; 0x44
 8000978:	4619      	mov	r1, r3
 800097a:	f004 fe1d 	bl	80055b8 <memcpy>
 800097e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000982:	f7ff fddd 	bl	8000540 <CS43_Init>
  CS43_SetVolume(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff ff4e 	bl	8000828 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800098c:	2003      	movs	r0, #3
 800098e:	f7ff feef 	bl	8000770 <CS43_Enable_RightLeft>
  CS43_Start();
 8000992:	f7ff ff8b 	bl	80008ac <CS43_Start>

  //Build Sine wave
  	for(uint16_t i=0; i<sample_N; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	e03d      	b.n	8000a18 <main+0xe8>
  	{
  		mySinVal = sinf(i*2*PI*sample_dt);
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000a40 <main+0x110>
 80009ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <main+0xf4>)
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	eeb0 0a67 	vmov.f32	s0, s15
 80009be:	f004 f86b 	bl	8004a98 <sinf>
 80009c2:	eef0 7a40 	vmov.f32	s15, s0
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <main+0x114>)
 80009c8:	edc3 7a00 	vstr	s15, [r3]
  		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <main+0x114>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000a48 <main+0x118>
 80009d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e2:	ee17 2a90 	vmov	r2, s15
 80009e6:	b211      	sxth	r1, r2
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <main+0x11c>)
 80009ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <main+0x114>)
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000a48 <main+0x118>
 80009f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	3301      	adds	r3, #1
 8000a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a06:	ee17 2a90 	vmov	r2, s15
 8000a0a:	b211      	sxth	r1, r2
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <main+0x11c>)
 8000a0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	for(uint16_t i=0; i<sample_N; i++)
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	3301      	adds	r3, #1
 8000a16:	80fb      	strh	r3, [r7, #6]
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <main+0xfc>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	88fa      	ldrh	r2, [r7, #6]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d3bc      	bcc.n	800099c <main+0x6c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <main+0xf2>
 8000a24:	20000214 	.word	0x20000214
 8000a28:	3c23d70a 	.word	0x3c23d70a
 8000a2c:	20000080 	.word	0x20000080
 8000a30:	2000014c 	.word	0x2000014c
 8000a34:	200000dc 	.word	0x200000dc
 8000a38:	20000218 	.word	0x20000218
 8000a3c:	20000088 	.word	0x20000088
 8000a40:	40490fd0 	.word	0x40490fd0
 8000a44:	20000084 	.word	0x20000084
 8000a48:	45fa0000 	.word	0x45fa0000
 8000a4c:	20000260 	.word	0x20000260

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b098      	sub	sp, #96	; 0x60
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fdb8 	bl	80055d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <SystemClock_Config+0x100>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <SystemClock_Config+0x100>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0x100>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aba:	2301      	movs	r3, #1
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 f9ad 	bl	8003e44 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000af0:	f000 fa44 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	2105      	movs	r1, #5
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fc0e 	bl	8004334 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b1e:	f000 fa2d 	bl	8000f7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fde6 	bl	8004704 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b3e:	f000 fa1d 	bl	8000f7c <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3760      	adds	r7, #96	; 0x60
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MX_I2C1_Init+0x54>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_I2C1_Init+0x58>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_I2C1_Init+0x50>)
 8000b92:	f001 fadb 	bl	800214c <HAL_I2C_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 f9ee 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000088 	.word	0x20000088
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	000186a0 	.word	0x000186a0

08000bb0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <MX_I2S3_Init+0x58>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bca:	2203      	movs	r2, #3
 8000bcc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <MX_I2S3_Init+0x5c>)
 8000bda:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_I2S3_Init+0x54>)
 8000bf0:	f002 fa42 	bl	8003078 <HAL_I2S_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000bfa:	f000 f9bf 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000218 	.word	0x20000218
 8000c08:	40003c00 	.word	0x40003c00
 8000c0c:	00017700 	.word	0x00017700

08000c10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <MX_SPI1_Init+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c5c:	220a      	movs	r2, #10
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c62:	f003 fe8f 	bl	8004984 <HAL_SPI_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c6c:	f000 f986 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000015c 	.word	0x2000015c
 8000c78:	40013000 	.word	0x40013000

08000c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_DMA_Init+0x4c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <MX_DMA_Init+0x4c>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <MX_DMA_Init+0x4c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	200b      	movs	r0, #11
 8000ca4:	f000 fcf5 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca8:	200b      	movs	r0, #11
 8000caa:	f000 fd0e 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f000 fced 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cb8:	2010      	movs	r0, #16
 8000cba:	f000 fd06 	bl	80016ca <HAL_NVIC_EnableIRQ>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a7f      	ldr	r2, [pc, #508]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b7d      	ldr	r3, [pc, #500]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	4b79      	ldr	r3, [pc, #484]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a78      	ldr	r2, [pc, #480]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b76      	ldr	r3, [pc, #472]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b72      	ldr	r3, [pc, #456]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a71      	ldr	r2, [pc, #452]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b6f      	ldr	r3, [pc, #444]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b6b      	ldr	r3, [pc, #428]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a6a      	ldr	r2, [pc, #424]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b68      	ldr	r3, [pc, #416]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b64      	ldr	r3, [pc, #400]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a63      	ldr	r2, [pc, #396]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b5d      	ldr	r3, [pc, #372]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a5c      	ldr	r2, [pc, #368]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4857      	ldr	r0, [pc, #348]	; (8000eec <MX_GPIO_Init+0x220>)
 8000d90:	f001 f9c2 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2101      	movs	r1, #1
 8000d98:	4855      	ldr	r0, [pc, #340]	; (8000ef0 <MX_GPIO_Init+0x224>)
 8000d9a:	f001 f9bd 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000da4:	4853      	ldr	r0, [pc, #332]	; (8000ef4 <MX_GPIO_Init+0x228>)
 8000da6:	f001 f9b7 	bl	8002118 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000daa:	2308      	movs	r3, #8
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	484a      	ldr	r0, [pc, #296]	; (8000eec <MX_GPIO_Init+0x220>)
 8000dc2:	f001 f80d 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4844      	ldr	r0, [pc, #272]	; (8000ef0 <MX_GPIO_Init+0x224>)
 8000dde:	f000 ffff 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000de2:	2308      	movs	r3, #8
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df2:	2305      	movs	r3, #5
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	483c      	ldr	r0, [pc, #240]	; (8000ef0 <MX_GPIO_Init+0x224>)
 8000dfe:	f000 ffef 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e06:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <MX_GPIO_Init+0x22c>)
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4839      	ldr	r0, [pc, #228]	; (8000efc <MX_GPIO_Init+0x230>)
 8000e16:	f000 ffe3 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4834      	ldr	r0, [pc, #208]	; (8000f00 <MX_GPIO_Init+0x234>)
 8000e2e:	f000 ffd7 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e44:	2305      	movs	r3, #5
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482c      	ldr	r0, [pc, #176]	; (8000f00 <MX_GPIO_Init+0x234>)
 8000e50:	f000 ffc6 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e54:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e58:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <MX_GPIO_Init+0x228>)
 8000e6e:	f000 ffb7 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	481d      	ldr	r0, [pc, #116]	; (8000efc <MX_GPIO_Init+0x230>)
 8000e88:	f000 ffaa 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <MX_GPIO_Init+0x230>)
 8000eaa:	f000 ff99 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000eae:	2320      	movs	r3, #32
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <MX_GPIO_Init+0x228>)
 8000ec2:	f000 ff8d 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_GPIO_Init+0x22c>)
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_GPIO_Init+0x220>)
 8000eda:	f000 ff81 	bl	8001de0 <HAL_GPIO_Init>

}
 8000ede:	bf00      	nop
 8000ee0:	3730      	adds	r7, #48	; 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	10120000 	.word	0x10120000
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400

08000f04 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	//run HP on left channel and LP on right channel
	lSample = Calc_IIR_Left(lSample);
	rSample = Calc_IIR_Right(rSample);*/

	//restore to buffer
	txBuf[0] = rxBuf[0];
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000f0e:	881a      	ldrh	r2, [r3, #0]
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000f12:	801a      	strh	r2, [r3, #0]
	txBuf[1] = rxBuf[1];
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000f16:	885a      	ldrh	r2, [r3, #2]
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000f1a:	805a      	strh	r2, [r3, #2]
	txBuf[2] = rxBuf[2];
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000f1e:	889a      	ldrh	r2, [r3, #4]
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000f22:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rxBuf[3];
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000f26:	88da      	ldrh	r2, [r3, #6]
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000f2a:	80da      	strh	r2, [r3, #6]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	2000014c 	.word	0x2000014c
 8000f3c:	200000dc 	.word	0x200000dc

08000f40 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	//run HP on left channel and LP on right channel
	lSample = Calc_IIR_Left(lSample);
	rSample = Calc_IIR_Right(rSample);*/

	//restore to buffer
	txBuf[4] = rxBuf[4];
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000f4a:	891a      	ldrh	r2, [r3, #8]
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000f4e:	811a      	strh	r2, [r3, #8]
	txBuf[5] = rxBuf[5];
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000f52:	895a      	ldrh	r2, [r3, #10]
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000f56:	815a      	strh	r2, [r3, #10]
	txBuf[6] = rxBuf[6];
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000f5a:	899a      	ldrh	r2, [r3, #12]
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000f5e:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rxBuf[7];
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000f62:	89da      	ldrh	r2, [r3, #14]
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000f66:	81da      	strh	r2, [r3, #14]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	2000014c 	.word	0x2000014c
 8000f78:	200000dc 	.word	0x200000dc

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f000 fb58 	bl	800167c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_I2C_MspInit+0x84>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12c      	bne.n	8001054 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001016:	f44f 7310 	mov.w	r3, #576	; 0x240
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101c:	2312      	movs	r3, #18
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001028:	2304      	movs	r3, #4
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_I2C_MspInit+0x8c>)
 8001034:	f000 fed4 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_I2C_MspInit+0x88>)
 8001042:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_I2C_MspInit+0x88>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40005400 	.word	0x40005400
 8001060:	40023800 	.word	0x40023800
 8001064:	40020400 	.word	0x40020400

08001068 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a6e      	ldr	r2, [pc, #440]	; (8001240 <HAL_I2S_MspInit+0x1d8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	f040 80d5 	bne.w	8001236 <HAL_I2S_MspInit+0x1ce>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a6b      	ldr	r2, [pc, #428]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 8001096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b69      	ldr	r3, [pc, #420]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b65      	ldr	r3, [pc, #404]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4a64      	ldr	r2, [pc, #400]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
 80010b8:	4b62      	ldr	r3, [pc, #392]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a5d      	ldr	r2, [pc, #372]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <HAL_I2S_MspInit+0x1dc>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010e0:	2310      	movs	r3, #16
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010f0:	2306      	movs	r3, #6
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4853      	ldr	r0, [pc, #332]	; (8001248 <HAL_I2S_MspInit+0x1e0>)
 80010fc:	f000 fe70 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001100:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001112:	2306      	movs	r3, #6
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	484b      	ldr	r0, [pc, #300]	; (800124c <HAL_I2S_MspInit+0x1e4>)
 800111e:	f000 fe5f 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001134:	2305      	movs	r3, #5
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4843      	ldr	r0, [pc, #268]	; (800124c <HAL_I2S_MspInit+0x1e4>)
 8001140:	f000 fe4e 	bl	8001de0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001146:	4a43      	ldr	r2, [pc, #268]	; (8001254 <HAL_I2S_MspInit+0x1ec>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 800114c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001150:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001158:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 800117c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001180:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001182:	4b33      	ldr	r3, [pc, #204]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001184:	2204      	movs	r2, #4
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2s3_ext_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 800118a:	2203      	movs	r2, #3
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2s3_ext_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001190:	2200      	movs	r2, #0
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2s3_ext_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 8001196:	2200      	movs	r2, #0
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 800119a:	482d      	ldr	r0, [pc, #180]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 800119c:	f000 fab0 	bl	8001700 <HAL_DMA_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2S_MspInit+0x142>
    {
      Error_Handler();
 80011a6:	f7ff fee9 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a28      	ldr	r2, [pc, #160]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_I2S_MspInit+0x1e8>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011b8:	4a28      	ldr	r2, [pc, #160]	; (800125c <HAL_I2S_MspInit+0x1f4>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011c4:	2240      	movs	r2, #64	; 0x40
 80011c6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011f4:	2204      	movs	r2, #4
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 800120c:	f000 fa78 	bl	8001700 <HAL_DMA_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_I2S_MspInit+0x1b2>
    {
      Error_Handler();
 8001216:	f7ff feb1 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_I2S_MspInit+0x1f0>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2033      	movs	r0, #51	; 0x33
 800122c:	f000 fa31 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001230:	2033      	movs	r0, #51	; 0x33
 8001232:	f000 fa4a 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40003c00 	.word	0x40003c00
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020800 	.word	0x40020800
 8001250:	200001b4 	.word	0x200001b4
 8001254:	40026010 	.word	0x40026010
 8001258:	200000ec 	.word	0x200000ec
 800125c:	40026088 	.word	0x40026088

08001260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_SPI_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12b      	bne.n	80012da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 800128c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012ba:	23e0      	movs	r3, #224	; 0xe0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ca:	2305      	movs	r3, #5
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_SPI_MspInit+0x8c>)
 80012d6:	f000 fd83 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40013000 	.word	0x40013000
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 f8ae 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Stream0_IRQHandler+0x10>)
 800134a:	f000 fadf 	bl	800190c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001b4 	.word	0x200001b4

08001358 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA1_Stream5_IRQHandler+0x10>)
 800135e:	f000 fad5 	bl	800190c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000ec 	.word	0x200000ec

0800136c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <SPI3_IRQHandler+0x10>)
 8001372:	f001 ffc1 	bl	80032f8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000218 	.word	0x20000218

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ce:	f7ff ffd7 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f004 f8cd 	bl	8005570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff faab 	bl	8000930 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e8:	080059fc 	.word	0x080059fc
  ldr r2, =_sbss
 80013ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013f0:	2000032c 	.word	0x2000032c

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f92b 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fdac 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f943 	bl	80016e6 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f90b 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000328 	.word	0x20000328

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000328 	.word	0x20000328

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff feda 	bl	80014c4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e099      	b.n	8001850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173c:	e00f      	b.n	800175e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173e:	f7ff fec1 	bl	80014c4 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b05      	cmp	r3, #5
 800174a:	d908      	bls.n	800175e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e078      	b.n	8001850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e8      	bne.n	800173e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_DMA_Init+0x158>)
 8001778:	4013      	ands	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d107      	bne.n	80017c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4313      	orrs	r3, r2
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f023 0307 	bic.w	r3, r3, #7
 80017de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d117      	bne.n	8001822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fa6f 	bl	8001ce8 <DMA_CheckFifoParam>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800181e:	2301      	movs	r3, #1
 8001820:	e016      	b.n	8001850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fa26 	bl	8001c7c <DMA_CalcBaseAndBitshift>
 8001830:	4603      	mov	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	223f      	movs	r2, #63	; 0x3f
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	f010803f 	.word	0xf010803f

0800185c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_DMA_Start_IT+0x26>
 800187e:	2302      	movs	r3, #2
 8001880:	e040      	b.n	8001904 <HAL_DMA_Start_IT+0xa8>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d12f      	bne.n	80018f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2202      	movs	r2, #2
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f9b8 	bl	8001c20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	223f      	movs	r2, #63	; 0x3f
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0216 	orr.w	r2, r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0208 	orr.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e005      	b.n	8001902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001902:	7dfb      	ldrb	r3, [r7, #23]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001918:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_DMA_IRQHandler+0x258>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <HAL_DMA_IRQHandler+0x25c>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0a9b      	lsrs	r3, r3, #10
 8001924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2208      	movs	r2, #8
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01a      	beq.n	8001978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2208      	movs	r2, #8
 8001966:	409a      	lsls	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	2201      	movs	r2, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2201      	movs	r2, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	2204      	movs	r2, #4
 80019b4:	409a      	lsls	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d012      	beq.n	80019e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00b      	beq.n	80019e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2204      	movs	r2, #4
 80019d2:	409a      	lsls	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	f043 0204 	orr.w	r2, r3, #4
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2210      	movs	r2, #16
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d043      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03c      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	2210      	movs	r2, #16
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d018      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d024      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
 8001a3a:	e01f      	b.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
 8001a4c:	e016      	b.n	8001a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0208 	bic.w	r2, r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2220      	movs	r2, #32
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 808e 	beq.w	8001baa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8086 	beq.w	8001baa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d136      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0216 	bic.w	r2, r2, #22
 8001ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <HAL_DMA_IRQHandler+0x1da>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0208 	bic.w	r2, r2, #8
 8001af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	223f      	movs	r2, #63	; 0x3f
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d07d      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
        }
        return;
 8001b22:	e078      	b.n	8001c16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01c      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d108      	bne.n	8001b52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d030      	beq.n	8001baa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
 8001b50:	e02b      	b.n	8001baa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
 8001b62:	e022      	b.n	8001baa <HAL_DMA_IRQHandler+0x29e>
 8001b64:	20000000 	.word	0x20000000
 8001b68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0210 	bic.w	r2, r2, #16
 8001b88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d032      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d022      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2205      	movs	r2, #5
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d307      	bcc.n	8001bf2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f2      	bne.n	8001bd6 <HAL_DMA_IRQHandler+0x2ca>
 8001bf0:	e000      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bf2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e000      	b.n	8001c18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c16:	bf00      	nop
    }
  }
}
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop

08001c20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d108      	bne.n	8001c60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c5e:	e007      	b.n	8001c70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3b10      	subs	r3, #16
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d909      	bls.n	8001cbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	1d1a      	adds	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58
 8001cbc:	e007      	b.n	8001cce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cc6:	f023 0303 	bic.w	r3, r3, #3
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	aaaaaaab 	.word	0xaaaaaaab
 8001ce4:	08005614 	.word	0x08005614

08001ce8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d11f      	bne.n	8001d42 <DMA_CheckFifoParam+0x5a>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d856      	bhi.n	8001db6 <DMA_CheckFifoParam+0xce>
 8001d08:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <DMA_CheckFifoParam+0x28>)
 8001d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d33 	.word	0x08001d33
 8001d18:	08001d21 	.word	0x08001d21
 8001d1c:	08001db7 	.word	0x08001db7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d046      	beq.n	8001dba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d30:	e043      	b.n	8001dba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d3a:	d140      	bne.n	8001dbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d40:	e03d      	b.n	8001dbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4a:	d121      	bne.n	8001d90 <DMA_CheckFifoParam+0xa8>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d837      	bhi.n	8001dc2 <DMA_CheckFifoParam+0xda>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <DMA_CheckFifoParam+0x70>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001d6f 	.word	0x08001d6f
 8001d60:	08001d69 	.word	0x08001d69
 8001d64:	08001d81 	.word	0x08001d81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d6c:	e030      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d025      	beq.n	8001dc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7e:	e022      	b.n	8001dc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d88:	d11f      	bne.n	8001dca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d8e:	e01c      	b.n	8001dca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d903      	bls.n	8001d9e <DMA_CheckFifoParam+0xb6>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d003      	beq.n	8001da4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d9c:	e018      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
      break;
 8001da2:	e015      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00e      	beq.n	8001dce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
      break;
 8001db4:	e00b      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;
 8001db6:	bf00      	nop
 8001db8:	e00a      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e008      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e006      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e004      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e002      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dca:	bf00      	nop
 8001dcc:	e000      	b.n	8001dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dce:	bf00      	nop
    }
  } 
  
  return status; 
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e16b      	b.n	80020d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 815a 	bne.w	80020ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80b4 	beq.w	80020ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a5f      	ldr	r2, [pc, #380]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_GPIO_Init+0x310>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_GPIO_Init+0x314>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x226>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a51      	ldr	r2, [pc, #324]	; (80020f8 <HAL_GPIO_Init+0x318>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x222>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a50      	ldr	r2, [pc, #320]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x21e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x320>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x328>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x32c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x330>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x20a>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fea:	2308      	movs	r3, #8
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x310>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x334>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_GPIO_Init+0x334>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae90 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e12b      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe ff30 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2224      	movs	r2, #36	; 0x24
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b0:	f002 fa94 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 80021b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a81      	ldr	r2, [pc, #516]	; (80023c0 <HAL_I2C_Init+0x274>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d807      	bhi.n	80021d0 <HAL_I2C_Init+0x84>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <HAL_I2C_Init+0x278>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e006      	b.n	80021de <HAL_I2C_Init+0x92>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a7d      	ldr	r2, [pc, #500]	; (80023c8 <HAL_I2C_Init+0x27c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0e7      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a78      	ldr	r2, [pc, #480]	; (80023cc <HAL_I2C_Init+0x280>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d802      	bhi.n	8002220 <HAL_I2C_Init+0xd4>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3301      	adds	r3, #1
 800221e:	e009      	b.n	8002234 <HAL_I2C_Init+0xe8>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_I2C_Init+0x284>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	3301      	adds	r3, #1
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	495c      	ldr	r1, [pc, #368]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002250:	428b      	cmp	r3, r1
 8002252:	d819      	bhi.n	8002288 <HAL_I2C_Init+0x13c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e59      	subs	r1, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002262:	1c59      	adds	r1, r3, #1
 8002264:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002268:	400b      	ands	r3, r1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_I2C_Init+0x138>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e59      	subs	r1, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fbb1 f3f3 	udiv	r3, r1, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	e051      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002284:	2304      	movs	r3, #4
 8002286:	e04f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <HAL_I2C_Init+0x168>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e012      	b.n	80022da <HAL_I2C_Init+0x18e>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e58      	subs	r0, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	0099      	lsls	r1, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Init+0x196>
 80022de:	2301      	movs	r3, #1
 80022e0:	e022      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10e      	bne.n	8002308 <HAL_I2C_Init+0x1bc>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e58      	subs	r0, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	6809      	ldr	r1, [r1, #0]
 800232c:	4313      	orrs	r3, r2
 800232e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6911      	ldr	r1, [r2, #16]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	000186a0 	.word	0x000186a0
 80023c4:	001e847f 	.word	0x001e847f
 80023c8:	003d08ff 	.word	0x003d08ff
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	461a      	mov	r2, r3
 80023e0:	460b      	mov	r3, r1
 80023e2:	817b      	strh	r3, [r7, #10]
 80023e4:	4613      	mov	r3, r2
 80023e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff f86c 	bl	80014c4 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	f040 80e0 	bne.w	80025bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2319      	movs	r3, #25
 8002402:	2201      	movs	r2, #1
 8002404:	4970      	ldr	r1, [pc, #448]	; (80025c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fc58 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	e0d3      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_I2C_Master_Transmit+0x50>
 8002420:	2302      	movs	r3, #2
 8002422:	e0cc      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d007      	beq.n	800244a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002458:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2221      	movs	r2, #33	; 0x21
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2210      	movs	r2, #16
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	893a      	ldrh	r2, [r7, #8]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_I2C_Master_Transmit+0x1f8>)
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800248c:	8979      	ldrh	r1, [r7, #10]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fac2 	bl	8002a1c <I2C_MasterRequestWrite>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e08d      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024b8:	e066      	b.n	8002588 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6a39      	ldr	r1, [r7, #32]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fcd2 	bl	8002e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d107      	bne.n	80024e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06b      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_I2C_Master_Transmit+0x188>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d017      	beq.n	800255c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	6a39      	ldr	r1, [r7, #32]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fcc2 	bl	8002eea <I2C_WaitOnBTFFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e01a      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d194      	bne.n	80024ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	00100002 	.word	0x00100002
 80025cc:	ffff0000 	.word	0xffff0000

080025d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7fe ff6e 	bl	80014c4 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 820b 	bne.w	8002a0e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2319      	movs	r3, #25
 80025fe:	2201      	movs	r2, #1
 8002600:	497c      	ldr	r1, [pc, #496]	; (80027f4 <HAL_I2C_Master_Receive+0x224>)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fb5a 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	e1fe      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_I2C_Master_Receive+0x50>
 800261c:	2302      	movs	r3, #2
 800261e:	e1f7      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d007      	beq.n	8002646 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2222      	movs	r2, #34	; 0x22
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2210      	movs	r2, #16
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	893a      	ldrh	r2, [r7, #8]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a5c      	ldr	r2, [pc, #368]	; (80027f8 <HAL_I2C_Master_Receive+0x228>)
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa46 	bl	8002b20 <I2C_MasterRequestRead>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1b8      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d113      	bne.n	80026ce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e18c      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d11b      	bne.n	800270e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e16c      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b02      	cmp	r3, #2
 8002714:	d11b      	bne.n	800274e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002724:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	e14c      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002774:	e138      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b03      	cmp	r3, #3
 800277c:	f200 80f1 	bhi.w	8002962 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b01      	cmp	r3, #1
 8002786:	d123      	bne.n	80027d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fbed 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e139      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ce:	e10b      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d14e      	bne.n	8002876 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	2200      	movs	r2, #0
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <HAL_I2C_Master_Receive+0x22c>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa6a 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e10e      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000
 80027fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002874:	e0b8      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	2200      	movs	r2, #0
 800287e:	4966      	ldr	r1, [pc, #408]	; (8002a18 <HAL_I2C_Master_Receive+0x448>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fa1b 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0bf      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	2200      	movs	r2, #0
 80028da:	494f      	ldr	r1, [pc, #316]	; (8002a18 <HAL_I2C_Master_Receive+0x448>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f9ed 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e091      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002960:	e042      	b.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fb00 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e04c      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d118      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f47f aec2 	bne.w	8002776 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010004 	.word	0x00010004

08002a1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d006      	beq.n	8002a46 <I2C_MasterRequestWrite+0x2a>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d003      	beq.n	8002a46 <I2C_MasterRequestWrite+0x2a>
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a44:	d108      	bne.n	8002a58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e00b      	b.n	8002a70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d107      	bne.n	8002a70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f91d 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a96:	d103      	bne.n	8002aa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e035      	b.n	8002b10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aac:	d108      	bne.n	8002ac0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	e01b      	b.n	8002af8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ac0:	897b      	ldrh	r3, [r7, #10]
 8002ac2:	11db      	asrs	r3, r3, #7
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 0306 	and.w	r3, r3, #6
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f063 030f 	orn	r3, r3, #15
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <I2C_MasterRequestWrite+0xfc>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f943 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e010      	b.n	8002b10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4907      	ldr	r1, [pc, #28]	; (8002b1c <I2C_MasterRequestWrite+0x100>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f933 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	00010008 	.word	0x00010008
 8002b1c:	00010002 	.word	0x00010002

08002b20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d006      	beq.n	8002b5a <I2C_MasterRequestRead+0x3a>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d003      	beq.n	8002b5a <I2C_MasterRequestRead+0x3a>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b58:	d108      	bne.n	8002b6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	2b11      	cmp	r3, #17
 8002b72:	d107      	bne.n	8002b84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f893 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e079      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bc2:	897b      	ldrh	r3, [r7, #10]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	e05f      	b.n	8002c94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030f 	orn	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4930      	ldr	r1, [pc, #192]	; (8002cb4 <I2C_MasterRequestRead+0x194>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f8b9 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e054      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4929      	ldr	r1, [pc, #164]	; (8002cb8 <I2C_MasterRequestRead+0x198>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f8a9 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e044      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f831 	bl	8002cbc <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d103      	bne.n	8002c78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e017      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c7c:	897b      	ldrh	r3, [r7, #10]
 8002c7e:	11db      	asrs	r3, r3, #7
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 0306 	and.w	r3, r3, #6
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f063 030e 	orn	r3, r3, #14
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <I2C_MasterRequestRead+0x198>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f865 	bl	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	00010008 	.word	0x00010008
 8002cb8:	00010002 	.word	0x00010002

08002cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ccc:	e025      	b.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d021      	beq.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fe fbf5 	bl	80014c4 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e023      	b.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10d      	bne.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	e00c      	b.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf0c      	ite	eq
 8002d52:	2301      	moveq	r3, #1
 8002d54:	2300      	movne	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d0b6      	beq.n	8002cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d78:	e051      	b.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	d123      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e046      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d021      	beq.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe fb73 	bl	80014c4 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e020      	b.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10c      	bne.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e00b      	b.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d18d      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	e02d      	b.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f8ce 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d021      	beq.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fb19 	bl	80014c4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d1ca      	bne.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef6:	e02d      	b.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f88d 	bl	8003018 <I2C_IsAcknowledgeFailed>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e02d      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d021      	beq.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fe fad8 	bl	80014c4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d1ca      	bne.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f78:	e042      	b.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d119      	bne.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e029      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fe fa82 	bl	80014c4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d1b5      	bne.n	8002f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d11b      	bne.n	8003068 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003038:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0204 	orr.w	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e128      	b.n	80032dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <HAL_I2S_Init+0x26c>)
 80030a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fd ffdf 	bl	8001068 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2202      	movs	r2, #2
 80030cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d060      	beq.n	8003198 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030de:	2310      	movs	r3, #16
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e001      	b.n	80030e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d802      	bhi.n	80030f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f001 fbe6 	bl	80048c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80030fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003106:	d125      	bne.n	8003154 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	fbb2 f2f3 	udiv	r2, r2, r3
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	3305      	adds	r3, #5
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e01f      	b.n	8003172 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	fbb2 f2f3 	udiv	r2, r2, r3
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	3305      	adds	r3, #5
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e00e      	b.n	8003172 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	3305      	adds	r3, #5
 8003170:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4a5c      	ldr	r2, [pc, #368]	; (80032e8 <HAL_I2S_Init+0x270>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	08db      	lsrs	r3, r3, #3
 800317c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e003      	b.n	80031a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003198:	2302      	movs	r3, #2
 800319a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d902      	bls.n	80031ac <HAL_I2S_Init+0x134>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2bff      	cmp	r3, #255	; 0xff
 80031aa:	d907      	bls.n	80031bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0210 	orr.w	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e08f      	b.n	80032dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	ea42 0103 	orr.w	r1, r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031da:	f023 030f 	bic.w	r3, r3, #15
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6851      	ldr	r1, [r2, #4]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6892      	ldr	r2, [r2, #8]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68d2      	ldr	r2, [r2, #12]
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6992      	ldr	r2, [r2, #24]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d161      	bne.n	80032cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_I2S_Init+0x274>)
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a37      	ldr	r2, [pc, #220]	; (80032f0 <HAL_I2S_Init+0x278>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_I2S_Init+0x1a4>
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_I2S_Init+0x27c>)
 800321a:	e001      	b.n	8003220 <HAL_I2S_Init+0x1a8>
 800321c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4932      	ldr	r1, [pc, #200]	; (80032f0 <HAL_I2S_Init+0x278>)
 8003228:	428a      	cmp	r2, r1
 800322a:	d101      	bne.n	8003230 <HAL_I2S_Init+0x1b8>
 800322c:	4a31      	ldr	r2, [pc, #196]	; (80032f4 <HAL_I2S_Init+0x27c>)
 800322e:	e001      	b.n	8003234 <HAL_I2S_Init+0x1bc>
 8003230:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003234:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003238:	f023 030f 	bic.w	r3, r3, #15
 800323c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <HAL_I2S_Init+0x278>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_I2S_Init+0x1d4>
 8003248:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <HAL_I2S_Init+0x27c>)
 800324a:	e001      	b.n	8003250 <HAL_I2S_Init+0x1d8>
 800324c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003250:	2202      	movs	r2, #2
 8003252:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <HAL_I2S_Init+0x278>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_I2S_Init+0x1ea>
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_I2S_Init+0x27c>)
 8003260:	e001      	b.n	8003266 <HAL_I2S_Init+0x1ee>
 8003262:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003272:	d003      	beq.n	800327c <HAL_I2S_Init+0x204>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e001      	b.n	8003288 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003292:	4313      	orrs	r3, r2
 8003294:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800329c:	4313      	orrs	r3, r2
 800329e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032a6:	4313      	orrs	r3, r2
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_I2S_Init+0x278>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_I2S_Init+0x24c>
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_I2S_Init+0x27c>)
 80032c2:	e001      	b.n	80032c8 <HAL_I2S_Init+0x250>
 80032c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c8:	897a      	ldrh	r2, [r7, #10]
 80032ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	08003407 	.word	0x08003407
 80032e8:	cccccccd 	.word	0xcccccccd
 80032ec:	08003831 	.word	0x08003831
 80032f0:	40003800 	.word	0x40003800
 80032f4:	40003400 	.word	0x40003400

080032f8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10e      	bne.n	80033a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003390:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ffb8 	bl	8003310 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	b292      	uxth	r2, r2
 80033bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10e      	bne.n	80033fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff93 	bl	8003324 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b04      	cmp	r3, #4
 8003420:	d13a      	bne.n	8003498 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d109      	bne.n	8003440 <I2S_IRQHandler+0x3a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d102      	bne.n	8003440 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffb4 	bl	80033a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d126      	bne.n	8003498 <I2S_IRQHandler+0x92>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b20      	cmp	r3, #32
 8003456:	d11f      	bne.n	8003498 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003466:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ff50 	bl	8003338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d136      	bne.n	8003512 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d109      	bne.n	80034c2 <I2S_IRQHandler+0xbc>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b80      	cmp	r3, #128	; 0x80
 80034ba:	d102      	bne.n	80034c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff45 	bl	800334c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d122      	bne.n	8003512 <I2S_IRQHandler+0x10c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d11b      	bne.n	8003512 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff13 	bl	8003338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d002      	beq.n	8003548 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003546:	e160      	b.n	800380a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e15a      	b.n	8003814 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800356a:	2302      	movs	r3, #2
 800356c:	e152      	b.n	8003814 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d002      	beq.n	800359a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d114      	bne.n	80035c4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	865a      	strh	r2, [r3, #50]	; 0x32
 80035c2:	e00b      	b.n	80035dc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	887a      	ldrh	r2, [r7, #2]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	887a      	ldrh	r2, [r7, #2]
 80035da:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2205      	movs	r2, #5
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	4a8b      	ldr	r2, [pc, #556]	; (800381c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	4a8a      	ldr	r2, [pc, #552]	; (8003820 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80035f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	4a89      	ldr	r2, [pc, #548]	; (8003824 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003600:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	2200      	movs	r2, #0
 8003610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	4a83      	ldr	r2, [pc, #524]	; (8003824 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003618:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003624:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d002      	beq.n	8003634 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d16b      	bne.n	800370c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a79      	ldr	r2, [pc, #484]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003646:	4b79      	ldr	r3, [pc, #484]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	330c      	adds	r3, #12
 8003650:	4619      	mov	r1, r3
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800365a:	b29b      	uxth	r3, r3
 800365c:	f7fe f8fe 	bl	800185c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a70      	ldr	r2, [pc, #448]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800366a:	4b70      	ldr	r3, [pc, #448]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800366c:	e001      	b.n	8003672 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800366e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	496b      	ldr	r1, [pc, #428]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800367a:	428b      	cmp	r3, r1
 800367c:	d101      	bne.n	8003682 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800367e:	4b6b      	ldr	r3, [pc, #428]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003680:	e001      	b.n	8003686 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800368c:	f107 0308 	add.w	r3, r7, #8
 8003690:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	461a      	mov	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f7fe f8d8 	bl	800185c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0202 	orr.w	r2, r2, #2
 80036ba:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	f000 809e 	beq.w	800380a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a55      	ldr	r2, [pc, #340]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80036d8:	4b54      	ldr	r3, [pc, #336]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80036da:	e001      	b.n	80036e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4950      	ldr	r1, [pc, #320]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80036e8:	428b      	cmp	r3, r1
 80036ea:	d101      	bne.n	80036f0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80036ec:	4b4f      	ldr	r3, [pc, #316]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80036ee:	e001      	b.n	80036f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80036f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003708:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800370a:	e07e      	b.n	800380a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800371a:	d10a      	bne.n	8003732 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a38      	ldr	r2, [pc, #224]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800374a:	4b38      	ldr	r3, [pc, #224]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800374c:	e001      	b.n	8003752 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800374e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003752:	330c      	adds	r3, #12
 8003754:	461a      	mov	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	b29b      	uxth	r3, r3
 800375c:	f7fe f87e 	bl	800185c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a30      	ldr	r2, [pc, #192]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800376c:	e001      	b.n	8003772 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	492b      	ldr	r1, [pc, #172]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800377a:	428b      	cmp	r3, r1
 800377c:	d101      	bne.n	8003782 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800377e:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003780:	e001      	b.n	8003786 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003786:	f042 0202 	orr.w	r2, r2, #2
 800378a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	4619      	mov	r1, r3
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f7fe f859 	bl	800185c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d01e      	beq.n	8003808 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a16      	ldr	r2, [pc, #88]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80037d4:	4b15      	ldr	r3, [pc, #84]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037d6:	e001      	b.n	80037dc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4911      	ldr	r1, [pc, #68]	; (8003828 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d101      	bne.n	80037ec <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037ea:	e001      	b.n	80037f0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80037ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	e000      	b.n	800380a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003808:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003812:	7ffb      	ldrb	r3, [r7, #31]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08003ad9 	.word	0x08003ad9
 8003820:	08003af5 	.word	0x08003af5
 8003824:	08003bcd 	.word	0x08003bcd
 8003828:	40003800 	.word	0x40003800
 800382c:	40003400 	.word	0x40003400

08003830 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4aa2      	ldr	r2, [pc, #648]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800384a:	4ba2      	ldr	r3, [pc, #648]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800384c:	e001      	b.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800384e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a9b      	ldr	r2, [pc, #620]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003868:	4b9a      	ldr	r3, [pc, #616]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800386a:	e001      	b.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387c:	d004      	beq.n	8003888 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 8099 	bne.w	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f9d5 	bl	8003c4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa78 	bl	8003dac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d13a      	bne.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d035      	beq.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7e      	ldr	r2, [pc, #504]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038da:	4b7e      	ldr	r3, [pc, #504]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038dc:	e001      	b.n	80038e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4979      	ldr	r1, [pc, #484]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ea:	428b      	cmp	r3, r1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038ee:	4b79      	ldr	r3, [pc, #484]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038f0:	e001      	b.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f043 0202 	orr.w	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fcfe 	bl	8003338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b08      	cmp	r3, #8
 8003944:	f040 80be 	bne.w	8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80b8 	beq.w	8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003962:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a59      	ldr	r2, [pc, #356]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d101      	bne.n	8003972 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800396e:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003970:	e001      	b.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4954      	ldr	r1, [pc, #336]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800397e:	428b      	cmp	r3, r1
 8003980:	d101      	bne.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003984:	e001      	b.n	800398a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800398e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f043 0204 	orr.w	r2, r3, #4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff fcc0 	bl	8003338 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039b8:	e084      	b.n	8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d107      	bne.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f96e 	bl	8003cb0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d107      	bne.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f9ad 	bl	8003d48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d12f      	bne.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d02a      	beq.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a1e:	e001      	b.n	8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4929      	ldr	r1, [pc, #164]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d101      	bne.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a30:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a32:	e001      	b.n	8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f043 0202 	orr.w	r2, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fc70 	bl	8003338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d131      	bne.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02c      	beq.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a78:	e001      	b.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4912      	ldr	r1, [pc, #72]	; (8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a86:	428b      	cmp	r3, r1
 8003a88:	d101      	bne.n	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a8c:	e001      	b.n	8003a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aa6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fc3b 	bl	8003338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac2:	e000      	b.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac4:	bf00      	nop
}
 8003ac6:	bf00      	nop
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40003800 	.word	0x40003800
 8003ad4:	40003400 	.word	0x40003400

08003ad8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7fd fa0c 	bl	8000f04 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d155      	bne.n	8003bb6 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b18:	d006      	beq.n	8003b28 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11e      	bne.n	8003b66 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <I2SEx_TxRxDMACplt+0x42>
 8003b32:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003b34:	e001      	b.n	8003b3a <I2SEx_TxRxDMACplt+0x46>
 8003b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4920      	ldr	r1, [pc, #128]	; (8003bc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003b42:	428b      	cmp	r3, r1
 8003b44:	d101      	bne.n	8003b4a <I2SEx_TxRxDMACplt+0x56>
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003b48:	e001      	b.n	8003b4e <I2SEx_TxRxDMACplt+0x5a>
 8003b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0202 	bic.w	r2, r2, #2
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	e01d      	b.n	8003ba2 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <I2SEx_TxRxDMACplt+0x90>
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003b82:	e001      	b.n	8003b88 <I2SEx_TxRxDMACplt+0x94>
 8003b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	490d      	ldr	r1, [pc, #52]	; (8003bc4 <I2SEx_TxRxDMACplt+0xd0>)
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d101      	bne.n	8003b98 <I2SEx_TxRxDMACplt+0xa4>
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <I2SEx_TxRxDMACplt+0xd4>)
 8003b96:	e001      	b.n	8003b9c <I2SEx_TxRxDMACplt+0xa8>
 8003b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9c:	f022 0202 	bic.w	r2, r2, #2
 8003ba0:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7fd f9c2 	bl	8000f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40003800 	.word	0x40003800
 8003bc8:	40003400 	.word	0x40003400

08003bcc <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0203 	bic.w	r2, r2, #3
 8003be8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <I2SEx_TxRxDMAError+0x78>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <I2SEx_TxRxDMAError+0x2c>
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <I2SEx_TxRxDMAError+0x7c>)
 8003bf6:	e001      	b.n	8003bfc <I2SEx_TxRxDMAError+0x30>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4910      	ldr	r1, [pc, #64]	; (8003c44 <I2SEx_TxRxDMAError+0x78>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d101      	bne.n	8003c0c <I2SEx_TxRxDMAError+0x40>
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <I2SEx_TxRxDMAError+0x7c>)
 8003c0a:	e001      	b.n	8003c10 <I2SEx_TxRxDMAError+0x44>
 8003c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c10:	f022 0203 	bic.w	r2, r2, #3
 8003c14:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f043 0208 	orr.w	r2, r3, #8
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff fb7e 	bl	8003338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40003800 	.word	0x40003800
 8003c48:	40003400 	.word	0x40003400

08003c4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c99      	adds	r1, r3, #2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c5e:	881a      	ldrh	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7fd f94d 	bl	8000f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c99      	adds	r1, r3, #2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6251      	str	r1, [r2, #36]	; 0x24
 8003cc2:	8819      	ldrh	r1, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <I2SEx_TxISR_I2SExt+0x90>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <I2SEx_TxISR_I2SExt+0x22>
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <I2SEx_TxISR_I2SExt+0x94>)
 8003cd0:	e001      	b.n	8003cd6 <I2SEx_TxISR_I2SExt+0x26>
 8003cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd6:	460a      	mov	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d121      	bne.n	8003d36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <I2SEx_TxISR_I2SExt+0x90>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <I2SEx_TxISR_I2SExt+0x50>
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <I2SEx_TxISR_I2SExt+0x94>)
 8003cfe:	e001      	b.n	8003d04 <I2SEx_TxISR_I2SExt+0x54>
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	490d      	ldr	r1, [pc, #52]	; (8003d40 <I2SEx_TxISR_I2SExt+0x90>)
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d101      	bne.n	8003d14 <I2SEx_TxISR_I2SExt+0x64>
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <I2SEx_TxISR_I2SExt+0x94>)
 8003d12:	e001      	b.n	8003d18 <I2SEx_TxISR_I2SExt+0x68>
 8003d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fd f905 	bl	8000f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40003800 	.word	0x40003800
 8003d44:	40003400 	.word	0x40003400

08003d48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68d8      	ldr	r0, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	1c99      	adds	r1, r3, #2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d60:	b282      	uxth	r2, r0
 8003d62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd f8ce 	bl	8000f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <I2SEx_RxISR_I2SExt+0x90>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <I2SEx_RxISR_I2SExt+0x16>
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <I2SEx_RxISR_I2SExt+0x94>)
 8003dc0:	e001      	b.n	8003dc6 <I2SEx_RxISR_I2SExt+0x1a>
 8003dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc6:	68d8      	ldr	r0, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	1c99      	adds	r1, r3, #2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dd2:	b282      	uxth	r2, r0
 8003dd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d121      	bne.n	8003e32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <I2SEx_RxISR_I2SExt+0x90>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <I2SEx_RxISR_I2SExt+0x50>
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <I2SEx_RxISR_I2SExt+0x94>)
 8003dfa:	e001      	b.n	8003e00 <I2SEx_RxISR_I2SExt+0x54>
 8003dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	490d      	ldr	r1, [pc, #52]	; (8003e3c <I2SEx_RxISR_I2SExt+0x90>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d101      	bne.n	8003e10 <I2SEx_RxISR_I2SExt+0x64>
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <I2SEx_RxISR_I2SExt+0x94>)
 8003e0e:	e001      	b.n	8003e14 <I2SEx_RxISR_I2SExt+0x68>
 8003e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fd f887 	bl	8000f40 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40003800 	.word	0x40003800
 8003e40:	40003400 	.word	0x40003400

08003e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e264      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d075      	beq.n	8003f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e62:	4ba3      	ldr	r3, [pc, #652]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d00c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4ba0      	ldr	r3, [pc, #640]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d112      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b9d      	ldr	r3, [pc, #628]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	4b99      	ldr	r3, [pc, #612]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05b      	beq.n	8003f4c <HAL_RCC_OscConfig+0x108>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d157      	bne.n	8003f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e23f      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x74>
 8003eaa:	4b91      	ldr	r3, [pc, #580]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a90      	ldr	r2, [pc, #576]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e01d      	b.n	8003ef4 <HAL_RCC_OscConfig+0xb0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x98>
 8003ec2:	4b8b      	ldr	r3, [pc, #556]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a8a      	ldr	r2, [pc, #552]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a87      	ldr	r2, [pc, #540]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0xb0>
 8003edc:	4b84      	ldr	r3, [pc, #528]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a83      	ldr	r2, [pc, #524]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a80      	ldr	r2, [pc, #512]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fd fae2 	bl	80014c4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd fade 	bl	80014c4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e204      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0xc0>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fd face 	bl	80014c4 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd faca 	bl	80014c4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e1f0      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	4b6c      	ldr	r3, [pc, #432]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0xe8>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d063      	beq.n	8004022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f5a:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f66:	4b62      	ldr	r3, [pc, #392]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d11c      	bne.n	8003fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d116      	bne.n	8003fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	4b5c      	ldr	r3, [pc, #368]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_RCC_OscConfig+0x152>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e1c4      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f96:	4b56      	ldr	r3, [pc, #344]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4952      	ldr	r1, [pc, #328]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003faa:	e03a      	b.n	8004022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d020      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb4:	4b4f      	ldr	r3, [pc, #316]	; (80040f4 <HAL_RCC_OscConfig+0x2b0>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fd fa83 	bl	80014c4 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc2:	f7fd fa7f 	bl	80014c4 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e1a5      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd4:	4b46      	ldr	r3, [pc, #280]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe0:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4940      	ldr	r1, [pc, #256]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]
 8003ff4:	e015      	b.n	8004022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff6:	4b3f      	ldr	r3, [pc, #252]	; (80040f4 <HAL_RCC_OscConfig+0x2b0>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fa62 	bl	80014c4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004004:	f7fd fa5e 	bl	80014c4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e184      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d030      	beq.n	8004090 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCC_OscConfig+0x2b4>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd fa42 	bl	80014c4 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004044:	f7fd fa3e 	bl	80014c4 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e164      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004056:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x200>
 8004062:	e015      	b.n	8004090 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_RCC_OscConfig+0x2b4>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fd fa2b 	bl	80014c4 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004072:	f7fd fa27 	bl	80014c4 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e14d      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a0 	beq.w	80041de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6413      	str	r3, [r2, #64]	; 0x40
 80040be:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_OscConfig+0x2b8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d121      	bne.n	800411e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCC_OscConfig+0x2b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_OscConfig+0x2b8>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e6:	f7fd f9ed 	bl	80014c4 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	e011      	b.n	8004112 <HAL_RCC_OscConfig+0x2ce>
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	42470000 	.word	0x42470000
 80040f8:	42470e80 	.word	0x42470e80
 80040fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004100:	f7fd f9e0 	bl	80014c4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e106      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004112:	4b85      	ldr	r3, [pc, #532]	; (8004328 <HAL_RCC_OscConfig+0x4e4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d106      	bne.n	8004134 <HAL_RCC_OscConfig+0x2f0>
 8004126:	4b81      	ldr	r3, [pc, #516]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a80      	ldr	r2, [pc, #512]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
 8004132:	e01c      	b.n	800416e <HAL_RCC_OscConfig+0x32a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b05      	cmp	r3, #5
 800413a:	d10c      	bne.n	8004156 <HAL_RCC_OscConfig+0x312>
 800413c:	4b7b      	ldr	r3, [pc, #492]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a7a      	ldr	r2, [pc, #488]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	4b78      	ldr	r3, [pc, #480]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a77      	ldr	r2, [pc, #476]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	e00b      	b.n	800416e <HAL_RCC_OscConfig+0x32a>
 8004156:	4b75      	ldr	r3, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a74      	ldr	r2, [pc, #464]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	4b72      	ldr	r3, [pc, #456]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a71      	ldr	r2, [pc, #452]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d015      	beq.n	80041a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fd f9a5 	bl	80014c4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417c:	e00a      	b.n	8004194 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800417e:	f7fd f9a1 	bl	80014c4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f241 3288 	movw	r2, #5000	; 0x1388
 800418c:	4293      	cmp	r3, r2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0c5      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ee      	beq.n	800417e <HAL_RCC_OscConfig+0x33a>
 80041a0:	e014      	b.n	80041cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7fd f98f 	bl	80014c4 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a8:	e00a      	b.n	80041c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041aa:	f7fd f98b 	bl	80014c4 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0af      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c0:	4b5a      	ldr	r3, [pc, #360]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ee      	bne.n	80041aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a55      	ldr	r2, [pc, #340]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 809b 	beq.w	800431e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041e8:	4b50      	ldr	r3, [pc, #320]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d05c      	beq.n	80042ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d141      	bne.n	8004280 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <HAL_RCC_OscConfig+0x4ec>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fd f95f 	bl	80014c4 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420a:	f7fd f95b 	bl	80014c4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e081      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421c:	4b43      	ldr	r3, [pc, #268]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	019b      	lsls	r3, r3, #6
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	3b01      	subs	r3, #1
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	061b      	lsls	r3, r3, #24
 800424c:	4937      	ldr	r1, [pc, #220]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004252:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCC_OscConfig+0x4ec>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd f934 	bl	80014c4 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004260:	f7fd f930 	bl	80014c4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e056      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x41c>
 800427e:	e04e      	b.n	800431e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_OscConfig+0x4ec>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fd f91d 	bl	80014c4 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428e:	f7fd f919 	bl	80014c4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e03f      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a0:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x44a>
 80042ac:	e037      	b.n	800431e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e032      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042ba:	4b1c      	ldr	r3, [pc, #112]	; (800432c <HAL_RCC_OscConfig+0x4e8>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d028      	beq.n	800431a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d121      	bne.n	800431a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d11a      	bne.n	800431a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d111      	bne.n	800431a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	3b01      	subs	r3, #1
 8004304:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d107      	bne.n	800431a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40007000 	.word	0x40007000
 800432c:	40023800 	.word	0x40023800
 8004330:	42470060 	.word	0x42470060

08004334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0cc      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004348:	4b68      	ldr	r3, [pc, #416]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d90c      	bls.n	8004370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b65      	ldr	r3, [pc, #404]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b63      	ldr	r3, [pc, #396]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0b8      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004388:	4b59      	ldr	r3, [pc, #356]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a58      	ldr	r2, [pc, #352]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a0:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ac:	4b50      	ldr	r3, [pc, #320]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	494d      	ldr	r1, [pc, #308]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d044      	beq.n	8004454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d119      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e07f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e06f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004402:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e067      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f023 0203 	bic.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4934      	ldr	r1, [pc, #208]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	4313      	orrs	r3, r2
 8004422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004424:	f7fd f84e 	bl	80014c4 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442a:	e00a      	b.n	8004442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442c:	f7fd f84a 	bl	80014c4 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	; 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e04f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 020c 	and.w	r2, r3, #12
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	429a      	cmp	r2, r3
 8004452:	d1eb      	bne.n	800442c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d20c      	bcs.n	800447c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e032      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4916      	ldr	r1, [pc, #88]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	490e      	ldr	r1, [pc, #56]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ba:	f000 f821 	bl	8004500 <HAL_RCC_GetSysClockFreq>
 80044be:	4602      	mov	r2, r0
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	490a      	ldr	r1, [pc, #40]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 80044cc:	5ccb      	ldrb	r3, [r1, r3]
 80044ce:	fa22 f303 	lsr.w	r3, r2, r3
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc ffae 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40023c00 	.word	0x40023c00
 80044f0:	40023800 	.word	0x40023800
 80044f4:	080055fc 	.word	0x080055fc
 80044f8:	20000000 	.word	0x20000000
 80044fc:	20000004 	.word	0x20000004

08004500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	2300      	movs	r3, #0
 8004512:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004518:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b08      	cmp	r3, #8
 8004522:	d00d      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x40>
 8004524:	2b08      	cmp	r3, #8
 8004526:	f200 80bd 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x34>
 800452e:	2b04      	cmp	r3, #4
 8004530:	d003      	beq.n	800453a <HAL_RCC_GetSysClockFreq+0x3a>
 8004532:	e0b7      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004534:	4b61      	ldr	r3, [pc, #388]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004536:	60bb      	str	r3, [r7, #8]
       break;
 8004538:	e0b7      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800453a:	4b61      	ldr	r3, [pc, #388]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800453c:	60bb      	str	r3, [r7, #8]
      break;
 800453e:	e0b4      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004540:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800454a:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d04d      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004556:	4b58      	ldr	r3, [pc, #352]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	461a      	mov	r2, r3
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	ea02 0800 	and.w	r8, r2, r0
 800456e:	ea03 0901 	and.w	r9, r3, r1
 8004572:	4640      	mov	r0, r8
 8004574:	4649      	mov	r1, r9
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	014b      	lsls	r3, r1, #5
 8004580:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004584:	0142      	lsls	r2, r0, #5
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	ebb0 0008 	subs.w	r0, r0, r8
 800458e:	eb61 0109 	sbc.w	r1, r1, r9
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	018b      	lsls	r3, r1, #6
 800459c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045a0:	0182      	lsls	r2, r0, #6
 80045a2:	1a12      	subs	r2, r2, r0
 80045a4:	eb63 0301 	sbc.w	r3, r3, r1
 80045a8:	f04f 0000 	mov.w	r0, #0
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	00d9      	lsls	r1, r3, #3
 80045b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045b6:	00d0      	lsls	r0, r2, #3
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	eb12 0208 	adds.w	r2, r2, r8
 80045c0:	eb43 0309 	adc.w	r3, r3, r9
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	0259      	lsls	r1, r3, #9
 80045ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80045d2:	0250      	lsls	r0, r2, #9
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	461a      	mov	r2, r3
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f7fb fdf0 	bl	80001c8 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4613      	mov	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e04a      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	461a      	mov	r2, r3
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	ea02 0400 	and.w	r4, r2, r0
 800460a:	ea03 0501 	and.w	r5, r3, r1
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	014b      	lsls	r3, r1, #5
 800461c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004620:	0142      	lsls	r2, r0, #5
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	1b00      	subs	r0, r0, r4
 8004628:	eb61 0105 	sbc.w	r1, r1, r5
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	018b      	lsls	r3, r1, #6
 8004636:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800463a:	0182      	lsls	r2, r0, #6
 800463c:	1a12      	subs	r2, r2, r0
 800463e:	eb63 0301 	sbc.w	r3, r3, r1
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	00d9      	lsls	r1, r3, #3
 800464c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004650:	00d0      	lsls	r0, r2, #3
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	1912      	adds	r2, r2, r4
 8004658:	eb45 0303 	adc.w	r3, r5, r3
 800465c:	f04f 0000 	mov.w	r0, #0
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	0299      	lsls	r1, r3, #10
 8004666:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800466a:	0290      	lsls	r0, r2, #10
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	461a      	mov	r2, r3
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	f7fb fda4 	bl	80001c8 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	60bb      	str	r3, [r7, #8]
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046a6:	60bb      	str	r3, [r7, #8]
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	68bb      	ldr	r3, [r7, #8]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	007a1200 	.word	0x007a1200

080046c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000000 	.word	0x20000000

080046dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046e0:	f7ff fff0 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4903      	ldr	r1, [pc, #12]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	0800560c 	.word	0x0800560c

08004704 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004728:	2b00      	cmp	r3, #0
 800472a:	d035      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800472c:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004732:	f7fc fec7 	bl	80014c4 <HAL_GetTick>
 8004736:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004738:	e008      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800473a:	f7fc fec3 	bl	80014c4 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0b0      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800474c:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f0      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	019a      	lsls	r2, r3, #6
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	071b      	lsls	r3, r3, #28
 8004764:	4955      	ldr	r1, [pc, #340]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800476c:	4b52      	ldr	r3, [pc, #328]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004772:	f7fc fea7 	bl	80014c4 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800477a:	f7fc fea3 	bl	80014c4 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e090      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800478c:	4b4b      	ldr	r3, [pc, #300]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8083 	beq.w	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b44      	ldr	r3, [pc, #272]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a43      	ldr	r2, [pc, #268]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047c2:	4b3f      	ldr	r3, [pc, #252]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3e      	ldr	r2, [pc, #248]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047ce:	f7fc fe79 	bl	80014c4 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047d6:	f7fc fe75 	bl	80014c4 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e062      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047e8:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047f4:	4b31      	ldr	r3, [pc, #196]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02f      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	429a      	cmp	r2, r3
 8004810:	d028      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004812:	4b2a      	ldr	r3, [pc, #168]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800481c:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004822:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004828:	4a24      	ldr	r2, [pc, #144]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b01      	cmp	r3, #1
 8004838:	d114      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800483a:	f7fc fe43 	bl	80014c4 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	e00a      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fc fe3f 	bl	80014c4 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e02a      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	4b18      	ldr	r3, [pc, #96]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ee      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004870:	d10d      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004886:	490d      	ldr	r1, [pc, #52]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]
 800488c:	e005      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004894:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004898:	6093      	str	r3, [r2, #8]
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a6:	4905      	ldr	r1, [pc, #20]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	42470068 	.word	0x42470068
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40007000 	.word	0x40007000
 80048c4:	42470e40 	.word	0x42470e40

080048c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d13e      	bne.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d12f      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048fc:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048fe:	617b      	str	r3, [r7, #20]
          break;
 8004900:	e02f      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490e:	d108      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004918:	4a18      	ldr	r2, [pc, #96]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e007      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492a:	4a15      	ldr	r2, [pc, #84]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004938:	099b      	lsrs	r3, r3, #6
 800493a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494c:	0f1b      	lsrs	r3, r3, #28
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
          break;
 800495a:	e002      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
          break;
 8004960:	bf00      	nop
        }
      }
      break;
 8004962:	bf00      	nop
    }
  }
  return frequency;
 8004964:	697b      	ldr	r3, [r7, #20]
}
 8004966:	4618      	mov	r0, r3
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	00bb8000 	.word	0x00bb8000
 800497c:	007a1200 	.word	0x007a1200
 8004980:	00f42400 	.word	0x00f42400

08004984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e07b      	b.n	8004a8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a6:	d009      	beq.n	80049bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	61da      	str	r2, [r3, #28]
 80049ae:	e005      	b.n	80049bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fc fc42 	bl	8001260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	ea42 0103 	orr.w	r1, r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	f003 0104 	and.w	r1, r3, #4
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	f003 0210 	and.w	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <sinf>:
 8004a98:	ee10 3a10 	vmov	r3, s0
 8004a9c:	b507      	push	{r0, r1, r2, lr}
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <sinf+0x7c>)
 8004aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	dc05      	bgt.n	8004ab4 <sinf+0x1c>
 8004aa8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004b18 <sinf+0x80>
 8004aac:	2000      	movs	r0, #0
 8004aae:	f000 fc5b 	bl	8005368 <__kernel_sinf>
 8004ab2:	e004      	b.n	8004abe <sinf+0x26>
 8004ab4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004ab8:	db04      	blt.n	8004ac4 <sinf+0x2c>
 8004aba:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004abe:	b003      	add	sp, #12
 8004ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ac4:	4668      	mov	r0, sp
 8004ac6:	f000 f829 	bl	8004b1c <__ieee754_rem_pio2f>
 8004aca:	f000 0003 	and.w	r0, r0, #3
 8004ace:	2801      	cmp	r0, #1
 8004ad0:	d008      	beq.n	8004ae4 <sinf+0x4c>
 8004ad2:	2802      	cmp	r0, #2
 8004ad4:	d00d      	beq.n	8004af2 <sinf+0x5a>
 8004ad6:	b9b0      	cbnz	r0, 8004b06 <sinf+0x6e>
 8004ad8:	eddd 0a01 	vldr	s1, [sp, #4]
 8004adc:	ed9d 0a00 	vldr	s0, [sp]
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e7e4      	b.n	8004aae <sinf+0x16>
 8004ae4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004ae8:	ed9d 0a00 	vldr	s0, [sp]
 8004aec:	f000 f952 	bl	8004d94 <__kernel_cosf>
 8004af0:	e7e5      	b.n	8004abe <sinf+0x26>
 8004af2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004af6:	ed9d 0a00 	vldr	s0, [sp]
 8004afa:	2001      	movs	r0, #1
 8004afc:	f000 fc34 	bl	8005368 <__kernel_sinf>
 8004b00:	eeb1 0a40 	vneg.f32	s0, s0
 8004b04:	e7db      	b.n	8004abe <sinf+0x26>
 8004b06:	eddd 0a01 	vldr	s1, [sp, #4]
 8004b0a:	ed9d 0a00 	vldr	s0, [sp]
 8004b0e:	f000 f941 	bl	8004d94 <__kernel_cosf>
 8004b12:	e7f5      	b.n	8004b00 <sinf+0x68>
 8004b14:	3f490fd8 	.word	0x3f490fd8
 8004b18:	00000000 	.word	0x00000000

08004b1c <__ieee754_rem_pio2f>:
 8004b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b1e:	ee10 6a10 	vmov	r6, s0
 8004b22:	4b8e      	ldr	r3, [pc, #568]	; (8004d5c <__ieee754_rem_pio2f+0x240>)
 8004b24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004b28:	429d      	cmp	r5, r3
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	eef0 7a40 	vmov.f32	s15, s0
 8004b30:	4604      	mov	r4, r0
 8004b32:	dc05      	bgt.n	8004b40 <__ieee754_rem_pio2f+0x24>
 8004b34:	2300      	movs	r3, #0
 8004b36:	ed80 0a00 	vstr	s0, [r0]
 8004b3a:	6043      	str	r3, [r0, #4]
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e01a      	b.n	8004b76 <__ieee754_rem_pio2f+0x5a>
 8004b40:	4b87      	ldr	r3, [pc, #540]	; (8004d60 <__ieee754_rem_pio2f+0x244>)
 8004b42:	429d      	cmp	r5, r3
 8004b44:	dc46      	bgt.n	8004bd4 <__ieee754_rem_pio2f+0xb8>
 8004b46:	2e00      	cmp	r6, #0
 8004b48:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8004d64 <__ieee754_rem_pio2f+0x248>
 8004b4c:	4b86      	ldr	r3, [pc, #536]	; (8004d68 <__ieee754_rem_pio2f+0x24c>)
 8004b4e:	f025 050f 	bic.w	r5, r5, #15
 8004b52:	dd1f      	ble.n	8004b94 <__ieee754_rem_pio2f+0x78>
 8004b54:	429d      	cmp	r5, r3
 8004b56:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004b5a:	d00e      	beq.n	8004b7a <__ieee754_rem_pio2f+0x5e>
 8004b5c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004d6c <__ieee754_rem_pio2f+0x250>
 8004b60:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004b64:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004b68:	ed80 0a00 	vstr	s0, [r0]
 8004b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b70:	2001      	movs	r0, #1
 8004b72:	edc4 7a01 	vstr	s15, [r4, #4]
 8004b76:	b007      	add	sp, #28
 8004b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004d70 <__ieee754_rem_pio2f+0x254>
 8004b7e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004d74 <__ieee754_rem_pio2f+0x258>
 8004b82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004b86:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004b8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b8e:	edc0 6a00 	vstr	s13, [r0]
 8004b92:	e7eb      	b.n	8004b6c <__ieee754_rem_pio2f+0x50>
 8004b94:	429d      	cmp	r5, r3
 8004b96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004b9a:	d00e      	beq.n	8004bba <__ieee754_rem_pio2f+0x9e>
 8004b9c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004d6c <__ieee754_rem_pio2f+0x250>
 8004ba0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004ba4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004ba8:	ed80 0a00 	vstr	s0, [r0]
 8004bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	edc4 7a01 	vstr	s15, [r4, #4]
 8004bb8:	e7dd      	b.n	8004b76 <__ieee754_rem_pio2f+0x5a>
 8004bba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004d70 <__ieee754_rem_pio2f+0x254>
 8004bbe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004d74 <__ieee754_rem_pio2f+0x258>
 8004bc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004bc6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004bca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004bce:	edc0 6a00 	vstr	s13, [r0]
 8004bd2:	e7eb      	b.n	8004bac <__ieee754_rem_pio2f+0x90>
 8004bd4:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <__ieee754_rem_pio2f+0x25c>)
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	dc72      	bgt.n	8004cc0 <__ieee754_rem_pio2f+0x1a4>
 8004bda:	f000 fc0d 	bl	80053f8 <fabsf>
 8004bde:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004d7c <__ieee754_rem_pio2f+0x260>
 8004be2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004be6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bf2:	ee17 0a90 	vmov	r0, s15
 8004bf6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004d64 <__ieee754_rem_pio2f+0x248>
 8004bfa:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004bfe:	281f      	cmp	r0, #31
 8004c00:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004d6c <__ieee754_rem_pio2f+0x250>
 8004c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c08:	eeb1 6a47 	vneg.f32	s12, s14
 8004c0c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004c10:	ee16 2a90 	vmov	r2, s13
 8004c14:	dc1c      	bgt.n	8004c50 <__ieee754_rem_pio2f+0x134>
 8004c16:	495a      	ldr	r1, [pc, #360]	; (8004d80 <__ieee754_rem_pio2f+0x264>)
 8004c18:	1e47      	subs	r7, r0, #1
 8004c1a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004c1e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004c22:	428b      	cmp	r3, r1
 8004c24:	d014      	beq.n	8004c50 <__ieee754_rem_pio2f+0x134>
 8004c26:	6022      	str	r2, [r4, #0]
 8004c28:	ed94 7a00 	vldr	s14, [r4]
 8004c2c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004c30:	2e00      	cmp	r6, #0
 8004c32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004c36:	ed84 0a01 	vstr	s0, [r4, #4]
 8004c3a:	da9c      	bge.n	8004b76 <__ieee754_rem_pio2f+0x5a>
 8004c3c:	eeb1 7a47 	vneg.f32	s14, s14
 8004c40:	eeb1 0a40 	vneg.f32	s0, s0
 8004c44:	ed84 7a00 	vstr	s14, [r4]
 8004c48:	ed84 0a01 	vstr	s0, [r4, #4]
 8004c4c:	4240      	negs	r0, r0
 8004c4e:	e792      	b.n	8004b76 <__ieee754_rem_pio2f+0x5a>
 8004c50:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004c54:	15eb      	asrs	r3, r5, #23
 8004c56:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8004c5a:	2d08      	cmp	r5, #8
 8004c5c:	dde3      	ble.n	8004c26 <__ieee754_rem_pio2f+0x10a>
 8004c5e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004d70 <__ieee754_rem_pio2f+0x254>
 8004c62:	eef0 6a40 	vmov.f32	s13, s0
 8004c66:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004c6a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004c6e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8004c72:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004d74 <__ieee754_rem_pio2f+0x258>
 8004c76:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8004c7a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004c7e:	eef0 7a40 	vmov.f32	s15, s0
 8004c82:	ee15 2a90 	vmov	r2, s11
 8004c86:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	2b19      	cmp	r3, #25
 8004c8e:	dc04      	bgt.n	8004c9a <__ieee754_rem_pio2f+0x17e>
 8004c90:	edc4 5a00 	vstr	s11, [r4]
 8004c94:	eeb0 0a66 	vmov.f32	s0, s13
 8004c98:	e7c6      	b.n	8004c28 <__ieee754_rem_pio2f+0x10c>
 8004c9a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004d84 <__ieee754_rem_pio2f+0x268>
 8004c9e:	eeb0 0a66 	vmov.f32	s0, s13
 8004ca2:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004ca6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004caa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004d88 <__ieee754_rem_pio2f+0x26c>
 8004cae:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004cb2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004cb6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004cba:	ed84 7a00 	vstr	s14, [r4]
 8004cbe:	e7b3      	b.n	8004c28 <__ieee754_rem_pio2f+0x10c>
 8004cc0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004cc4:	db06      	blt.n	8004cd4 <__ieee754_rem_pio2f+0x1b8>
 8004cc6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004cca:	edc0 7a01 	vstr	s15, [r0, #4]
 8004cce:	edc0 7a00 	vstr	s15, [r0]
 8004cd2:	e733      	b.n	8004b3c <__ieee754_rem_pio2f+0x20>
 8004cd4:	15ea      	asrs	r2, r5, #23
 8004cd6:	3a86      	subs	r2, #134	; 0x86
 8004cd8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004ce4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004d8c <__ieee754_rem_pio2f+0x270>
 8004ce8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cf0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004cf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004cf8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004cfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d04:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	edcd 7a05 	vstr	s15, [sp, #20]
 8004d18:	d11e      	bne.n	8004d58 <__ieee754_rem_pio2f+0x23c>
 8004d1a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	bf14      	ite	ne
 8004d24:	2302      	movne	r3, #2
 8004d26:	2301      	moveq	r3, #1
 8004d28:	4919      	ldr	r1, [pc, #100]	; (8004d90 <__ieee754_rem_pio2f+0x274>)
 8004d2a:	9101      	str	r1, [sp, #4]
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	9100      	str	r1, [sp, #0]
 8004d30:	a803      	add	r0, sp, #12
 8004d32:	4621      	mov	r1, r4
 8004d34:	f000 f88e 	bl	8004e54 <__kernel_rem_pio2f>
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	f6bf af1c 	bge.w	8004b76 <__ieee754_rem_pio2f+0x5a>
 8004d3e:	edd4 7a00 	vldr	s15, [r4]
 8004d42:	eef1 7a67 	vneg.f32	s15, s15
 8004d46:	edc4 7a00 	vstr	s15, [r4]
 8004d4a:	edd4 7a01 	vldr	s15, [r4, #4]
 8004d4e:	eef1 7a67 	vneg.f32	s15, s15
 8004d52:	edc4 7a01 	vstr	s15, [r4, #4]
 8004d56:	e779      	b.n	8004c4c <__ieee754_rem_pio2f+0x130>
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e7e5      	b.n	8004d28 <__ieee754_rem_pio2f+0x20c>
 8004d5c:	3f490fd8 	.word	0x3f490fd8
 8004d60:	4016cbe3 	.word	0x4016cbe3
 8004d64:	3fc90f80 	.word	0x3fc90f80
 8004d68:	3fc90fd0 	.word	0x3fc90fd0
 8004d6c:	37354443 	.word	0x37354443
 8004d70:	37354400 	.word	0x37354400
 8004d74:	2e85a308 	.word	0x2e85a308
 8004d78:	43490f80 	.word	0x43490f80
 8004d7c:	3f22f984 	.word	0x3f22f984
 8004d80:	0800561c 	.word	0x0800561c
 8004d84:	2e85a300 	.word	0x2e85a300
 8004d88:	248d3132 	.word	0x248d3132
 8004d8c:	43800000 	.word	0x43800000
 8004d90:	0800569c 	.word	0x0800569c

08004d94 <__kernel_cosf>:
 8004d94:	ee10 3a10 	vmov	r3, s0
 8004d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004da0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004da4:	da05      	bge.n	8004db2 <__kernel_cosf+0x1e>
 8004da6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004daa:	ee17 2a90 	vmov	r2, s15
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d03d      	beq.n	8004e2e <__kernel_cosf+0x9a>
 8004db2:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004db6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004e34 <__kernel_cosf+0xa0>
 8004dba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004e38 <__kernel_cosf+0xa4>
 8004dbe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004e3c <__kernel_cosf+0xa8>
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <__kernel_cosf+0xac>)
 8004dc4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004e44 <__kernel_cosf+0xb0>
 8004dce:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004dd2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e48 <__kernel_cosf+0xb4>
 8004dd6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004dda:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004e4c <__kernel_cosf+0xb8>
 8004dde:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004de2:	eeb0 7a66 	vmov.f32	s14, s13
 8004de6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004dea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004dee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004df2:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004df6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004dfa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004dfe:	dc04      	bgt.n	8004e0a <__kernel_cosf+0x76>
 8004e00:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004e04:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004e08:	4770      	bx	lr
 8004e0a:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <__kernel_cosf+0xbc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	bfda      	itte	le
 8004e10:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004e14:	ee06 3a90 	vmovle	s13, r3
 8004e18:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004e1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004e20:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004e24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004e2c:	4770      	bx	lr
 8004e2e:	eeb0 0a46 	vmov.f32	s0, s12
 8004e32:	4770      	bx	lr
 8004e34:	ad47d74e 	.word	0xad47d74e
 8004e38:	310f74f6 	.word	0x310f74f6
 8004e3c:	3d2aaaab 	.word	0x3d2aaaab
 8004e40:	3e999999 	.word	0x3e999999
 8004e44:	b493f27c 	.word	0xb493f27c
 8004e48:	37d00d01 	.word	0x37d00d01
 8004e4c:	bab60b61 	.word	0xbab60b61
 8004e50:	3f480000 	.word	0x3f480000

08004e54 <__kernel_rem_pio2f>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	ed2d 8b04 	vpush	{d8-d9}
 8004e5c:	b0d7      	sub	sp, #348	; 0x15c
 8004e5e:	4616      	mov	r6, r2
 8004e60:	4698      	mov	r8, r3
 8004e62:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004e64:	4bbb      	ldr	r3, [pc, #748]	; (8005154 <__kernel_rem_pio2f+0x300>)
 8004e66:	9001      	str	r0, [sp, #4]
 8004e68:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8004e6c:	1d33      	adds	r3, r6, #4
 8004e6e:	460d      	mov	r5, r1
 8004e70:	f108 39ff 	add.w	r9, r8, #4294967295
 8004e74:	db29      	blt.n	8004eca <__kernel_rem_pio2f+0x76>
 8004e76:	1ef1      	subs	r1, r6, #3
 8004e78:	bf48      	it	mi
 8004e7a:	1d31      	addmi	r1, r6, #4
 8004e7c:	10c9      	asrs	r1, r1, #3
 8004e7e:	1c4c      	adds	r4, r1, #1
 8004e80:	00e3      	lsls	r3, r4, #3
 8004e82:	9302      	str	r3, [sp, #8]
 8004e84:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004e86:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005164 <__kernel_rem_pio2f+0x310>
 8004e8a:	eba1 0009 	sub.w	r0, r1, r9
 8004e8e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8004e92:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8004e96:	eb07 0c09 	add.w	ip, r7, r9
 8004e9a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	4563      	cmp	r3, ip
 8004ea2:	dd14      	ble.n	8004ece <__kernel_rem_pio2f+0x7a>
 8004ea4:	ab1a      	add	r3, sp, #104	; 0x68
 8004ea6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8004eaa:	46cc      	mov	ip, r9
 8004eac:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8004eb0:	f1c8 0b01 	rsb	fp, r8, #1
 8004eb4:	eb0b 020c 	add.w	r2, fp, ip
 8004eb8:	4297      	cmp	r7, r2
 8004eba:	db27      	blt.n	8004f0c <__kernel_rem_pio2f+0xb8>
 8004ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004ec0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8005164 <__kernel_rem_pio2f+0x310>
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	e016      	b.n	8004ef8 <__kernel_rem_pio2f+0xa4>
 8004eca:	2100      	movs	r1, #0
 8004ecc:	e7d7      	b.n	8004e7e <__kernel_rem_pio2f+0x2a>
 8004ece:	42d8      	cmn	r0, r3
 8004ed0:	bf5d      	ittte	pl
 8004ed2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8004ed6:	ee07 2a90 	vmovpl	s15, r2
 8004eda:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004ede:	eef0 7a47 	vmovmi.f32	s15, s14
 8004ee2:	ecea 7a01 	vstmia	sl!, {s15}
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	e7da      	b.n	8004ea0 <__kernel_rem_pio2f+0x4c>
 8004eea:	ecfe 6a01 	vldmia	lr!, {s13}
 8004eee:	ed90 7a00 	vldr	s14, [r0]
 8004ef2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004ef6:	3201      	adds	r2, #1
 8004ef8:	454a      	cmp	r2, r9
 8004efa:	f1a0 0004 	sub.w	r0, r0, #4
 8004efe:	ddf4      	ble.n	8004eea <__kernel_rem_pio2f+0x96>
 8004f00:	ecea 7a01 	vstmia	sl!, {s15}
 8004f04:	3304      	adds	r3, #4
 8004f06:	f10c 0c01 	add.w	ip, ip, #1
 8004f0a:	e7d3      	b.n	8004eb4 <__kernel_rem_pio2f+0x60>
 8004f0c:	ab06      	add	r3, sp, #24
 8004f0e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004f16:	eddf 8a92 	vldr	s17, [pc, #584]	; 8005160 <__kernel_rem_pio2f+0x30c>
 8004f1a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800515c <__kernel_rem_pio2f+0x308>
 8004f1e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	46ba      	mov	sl, r7
 8004f26:	ab56      	add	r3, sp, #344	; 0x158
 8004f28:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004f2c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8004f30:	ab06      	add	r3, sp, #24
 8004f32:	4618      	mov	r0, r3
 8004f34:	4652      	mov	r2, sl
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	dc51      	bgt.n	8004fde <__kernel_rem_pio2f+0x18a>
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	9305      	str	r3, [sp, #20]
 8004f3e:	f000 faa5 	bl	800548c <scalbnf>
 8004f42:	eeb0 8a40 	vmov.f32	s16, s0
 8004f46:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004f4a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004f4e:	f000 fa5b 	bl	8005408 <floorf>
 8004f52:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004f56:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004f5a:	2c00      	cmp	r4, #0
 8004f5c:	9b05      	ldr	r3, [sp, #20]
 8004f5e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004f62:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004f66:	edcd 7a00 	vstr	s15, [sp]
 8004f6a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004f6e:	dd4b      	ble.n	8005008 <__kernel_rem_pio2f+0x1b4>
 8004f70:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004f74:	aa06      	add	r2, sp, #24
 8004f76:	f1c4 0e08 	rsb	lr, r4, #8
 8004f7a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004f7e:	ee17 1a90 	vmov	r1, s15
 8004f82:	fa42 f00e 	asr.w	r0, r2, lr
 8004f86:	4401      	add	r1, r0
 8004f88:	9100      	str	r1, [sp, #0]
 8004f8a:	fa00 f00e 	lsl.w	r0, r0, lr
 8004f8e:	a906      	add	r1, sp, #24
 8004f90:	1a12      	subs	r2, r2, r0
 8004f92:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8004f96:	f1c4 0007 	rsb	r0, r4, #7
 8004f9a:	fa42 fb00 	asr.w	fp, r2, r0
 8004f9e:	f1bb 0f00 	cmp.w	fp, #0
 8004fa2:	dd43      	ble.n	800502c <__kernel_rem_pio2f+0x1d8>
 8004fa4:	9a00      	ldr	r2, [sp, #0]
 8004fa6:	f04f 0e00 	mov.w	lr, #0
 8004faa:	3201      	adds	r2, #1
 8004fac:	9200      	str	r2, [sp, #0]
 8004fae:	4670      	mov	r0, lr
 8004fb0:	45f2      	cmp	sl, lr
 8004fb2:	dc6c      	bgt.n	800508e <__kernel_rem_pio2f+0x23a>
 8004fb4:	2c00      	cmp	r4, #0
 8004fb6:	dd04      	ble.n	8004fc2 <__kernel_rem_pio2f+0x16e>
 8004fb8:	2c01      	cmp	r4, #1
 8004fba:	d079      	beq.n	80050b0 <__kernel_rem_pio2f+0x25c>
 8004fbc:	2c02      	cmp	r4, #2
 8004fbe:	f000 8082 	beq.w	80050c6 <__kernel_rem_pio2f+0x272>
 8004fc2:	f1bb 0f02 	cmp.w	fp, #2
 8004fc6:	d131      	bne.n	800502c <__kernel_rem_pio2f+0x1d8>
 8004fc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004fcc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004fd0:	b360      	cbz	r0, 800502c <__kernel_rem_pio2f+0x1d8>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 fa5a 	bl	800548c <scalbnf>
 8004fd8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004fdc:	e026      	b.n	800502c <__kernel_rem_pio2f+0x1d8>
 8004fde:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004fe2:	3a01      	subs	r2, #1
 8004fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe8:	a942      	add	r1, sp, #264	; 0x108
 8004fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fee:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004ff2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004ff6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ffa:	eca0 0a01 	vstmia	r0!, {s0}
 8004ffe:	ed9c 0a00 	vldr	s0, [ip]
 8005002:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005006:	e796      	b.n	8004f36 <__kernel_rem_pio2f+0xe2>
 8005008:	d107      	bne.n	800501a <__kernel_rem_pio2f+0x1c6>
 800500a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800500e:	a906      	add	r1, sp, #24
 8005010:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005014:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8005018:	e7c1      	b.n	8004f9e <__kernel_rem_pio2f+0x14a>
 800501a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800501e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	da2f      	bge.n	8005088 <__kernel_rem_pio2f+0x234>
 8005028:	f04f 0b00 	mov.w	fp, #0
 800502c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005034:	f040 8098 	bne.w	8005168 <__kernel_rem_pio2f+0x314>
 8005038:	f10a 33ff 	add.w	r3, sl, #4294967295
 800503c:	469c      	mov	ip, r3
 800503e:	2200      	movs	r2, #0
 8005040:	45bc      	cmp	ip, r7
 8005042:	da48      	bge.n	80050d6 <__kernel_rem_pio2f+0x282>
 8005044:	2a00      	cmp	r2, #0
 8005046:	d05f      	beq.n	8005108 <__kernel_rem_pio2f+0x2b4>
 8005048:	aa06      	add	r2, sp, #24
 800504a:	3c08      	subs	r4, #8
 800504c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005050:	2900      	cmp	r1, #0
 8005052:	d07d      	beq.n	8005150 <__kernel_rem_pio2f+0x2fc>
 8005054:	4620      	mov	r0, r4
 8005056:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	f000 fa16 	bl	800548c <scalbnf>
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005160 <__kernel_rem_pio2f+0x30c>
 8005066:	4619      	mov	r1, r3
 8005068:	2900      	cmp	r1, #0
 800506a:	f280 80af 	bge.w	80051cc <__kernel_rem_pio2f+0x378>
 800506e:	4618      	mov	r0, r3
 8005070:	2400      	movs	r4, #0
 8005072:	2800      	cmp	r0, #0
 8005074:	f2c0 80d0 	blt.w	8005218 <__kernel_rem_pio2f+0x3c4>
 8005078:	a942      	add	r1, sp, #264	; 0x108
 800507a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800507e:	4a36      	ldr	r2, [pc, #216]	; (8005158 <__kernel_rem_pio2f+0x304>)
 8005080:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005164 <__kernel_rem_pio2f+0x310>
 8005084:	2100      	movs	r1, #0
 8005086:	e0bb      	b.n	8005200 <__kernel_rem_pio2f+0x3ac>
 8005088:	f04f 0b02 	mov.w	fp, #2
 800508c:	e78a      	b.n	8004fa4 <__kernel_rem_pio2f+0x150>
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	b948      	cbnz	r0, 80050a6 <__kernel_rem_pio2f+0x252>
 8005092:	b11a      	cbz	r2, 800509c <__kernel_rem_pio2f+0x248>
 8005094:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	f10e 0e01 	add.w	lr, lr, #1
 80050a0:	3304      	adds	r3, #4
 80050a2:	4610      	mov	r0, r2
 80050a4:	e784      	b.n	8004fb0 <__kernel_rem_pio2f+0x15c>
 80050a6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	4602      	mov	r2, r0
 80050ae:	e7f5      	b.n	800509c <__kernel_rem_pio2f+0x248>
 80050b0:	f10a 3cff 	add.w	ip, sl, #4294967295
 80050b4:	ab06      	add	r3, sp, #24
 80050b6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80050ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050be:	aa06      	add	r2, sp, #24
 80050c0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80050c4:	e77d      	b.n	8004fc2 <__kernel_rem_pio2f+0x16e>
 80050c6:	f10a 3cff 	add.w	ip, sl, #4294967295
 80050ca:	ab06      	add	r3, sp, #24
 80050cc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80050d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d4:	e7f3      	b.n	80050be <__kernel_rem_pio2f+0x26a>
 80050d6:	a906      	add	r1, sp, #24
 80050d8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80050dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80050e0:	4302      	orrs	r2, r0
 80050e2:	e7ad      	b.n	8005040 <__kernel_rem_pio2f+0x1ec>
 80050e4:	3001      	adds	r0, #1
 80050e6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80050ea:	2a00      	cmp	r2, #0
 80050ec:	d0fa      	beq.n	80050e4 <__kernel_rem_pio2f+0x290>
 80050ee:	a91a      	add	r1, sp, #104	; 0x68
 80050f0:	eb0a 0208 	add.w	r2, sl, r8
 80050f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80050f8:	f10a 0301 	add.w	r3, sl, #1
 80050fc:	eb0a 0100 	add.w	r1, sl, r0
 8005100:	4299      	cmp	r1, r3
 8005102:	da04      	bge.n	800510e <__kernel_rem_pio2f+0x2ba>
 8005104:	468a      	mov	sl, r1
 8005106:	e70e      	b.n	8004f26 <__kernel_rem_pio2f+0xd2>
 8005108:	9b04      	ldr	r3, [sp, #16]
 800510a:	2001      	movs	r0, #1
 800510c:	e7eb      	b.n	80050e6 <__kernel_rem_pio2f+0x292>
 800510e:	9803      	ldr	r0, [sp, #12]
 8005110:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005114:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005118:	9000      	str	r0, [sp, #0]
 800511a:	ee07 0a90 	vmov	s15, r0
 800511e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005122:	2000      	movs	r0, #0
 8005124:	ece2 7a01 	vstmia	r2!, {s15}
 8005128:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005164 <__kernel_rem_pio2f+0x310>
 800512c:	4696      	mov	lr, r2
 800512e:	4548      	cmp	r0, r9
 8005130:	dd06      	ble.n	8005140 <__kernel_rem_pio2f+0x2ec>
 8005132:	a842      	add	r0, sp, #264	; 0x108
 8005134:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005138:	edc0 7a00 	vstr	s15, [r0]
 800513c:	3301      	adds	r3, #1
 800513e:	e7df      	b.n	8005100 <__kernel_rem_pio2f+0x2ac>
 8005140:	ecfc 6a01 	vldmia	ip!, {s13}
 8005144:	ed3e 7a01 	vldmdb	lr!, {s14}
 8005148:	3001      	adds	r0, #1
 800514a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800514e:	e7ee      	b.n	800512e <__kernel_rem_pio2f+0x2da>
 8005150:	3b01      	subs	r3, #1
 8005152:	e779      	b.n	8005048 <__kernel_rem_pio2f+0x1f4>
 8005154:	080059e0 	.word	0x080059e0
 8005158:	080059b4 	.word	0x080059b4
 800515c:	43800000 	.word	0x43800000
 8005160:	3b800000 	.word	0x3b800000
 8005164:	00000000 	.word	0x00000000
 8005168:	9b02      	ldr	r3, [sp, #8]
 800516a:	eeb0 0a48 	vmov.f32	s0, s16
 800516e:	1b98      	subs	r0, r3, r6
 8005170:	f000 f98c 	bl	800548c <scalbnf>
 8005174:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800515c <__kernel_rem_pio2f+0x308>
 8005178:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	db1b      	blt.n	80051ba <__kernel_rem_pio2f+0x366>
 8005182:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005160 <__kernel_rem_pio2f+0x30c>
 8005186:	ee60 7a27 	vmul.f32	s15, s0, s15
 800518a:	aa06      	add	r2, sp, #24
 800518c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005190:	a906      	add	r1, sp, #24
 8005192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005196:	3408      	adds	r4, #8
 8005198:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800519c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80051a4:	ee10 3a10 	vmov	r3, s0
 80051a8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80051ac:	ee17 2a90 	vmov	r2, s15
 80051b0:	f10a 0301 	add.w	r3, sl, #1
 80051b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80051b8:	e74c      	b.n	8005054 <__kernel_rem_pio2f+0x200>
 80051ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80051be:	aa06      	add	r2, sp, #24
 80051c0:	ee10 3a10 	vmov	r3, s0
 80051c4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80051c8:	4653      	mov	r3, sl
 80051ca:	e743      	b.n	8005054 <__kernel_rem_pio2f+0x200>
 80051cc:	aa42      	add	r2, sp, #264	; 0x108
 80051ce:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80051d2:	aa06      	add	r2, sp, #24
 80051d4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80051d8:	9201      	str	r2, [sp, #4]
 80051da:	ee07 2a90 	vmov	s15, r2
 80051de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e2:	3901      	subs	r1, #1
 80051e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80051e8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80051ec:	edc0 7a00 	vstr	s15, [r0]
 80051f0:	e73a      	b.n	8005068 <__kernel_rem_pio2f+0x214>
 80051f2:	ecf2 6a01 	vldmia	r2!, {s13}
 80051f6:	ecb6 7a01 	vldmia	r6!, {s14}
 80051fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80051fe:	3101      	adds	r1, #1
 8005200:	42b9      	cmp	r1, r7
 8005202:	dc01      	bgt.n	8005208 <__kernel_rem_pio2f+0x3b4>
 8005204:	428c      	cmp	r4, r1
 8005206:	daf4      	bge.n	80051f2 <__kernel_rem_pio2f+0x39e>
 8005208:	aa56      	add	r2, sp, #344	; 0x158
 800520a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800520e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005212:	3801      	subs	r0, #1
 8005214:	3401      	adds	r4, #1
 8005216:	e72c      	b.n	8005072 <__kernel_rem_pio2f+0x21e>
 8005218:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800521a:	2a02      	cmp	r2, #2
 800521c:	dc0a      	bgt.n	8005234 <__kernel_rem_pio2f+0x3e0>
 800521e:	2a00      	cmp	r2, #0
 8005220:	dc61      	bgt.n	80052e6 <__kernel_rem_pio2f+0x492>
 8005222:	d03c      	beq.n	800529e <__kernel_rem_pio2f+0x44a>
 8005224:	9b00      	ldr	r3, [sp, #0]
 8005226:	f003 0007 	and.w	r0, r3, #7
 800522a:	b057      	add	sp, #348	; 0x15c
 800522c:	ecbd 8b04 	vpop	{d8-d9}
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005236:	2a03      	cmp	r2, #3
 8005238:	d1f4      	bne.n	8005224 <__kernel_rem_pio2f+0x3d0>
 800523a:	aa2e      	add	r2, sp, #184	; 0xb8
 800523c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005240:	4608      	mov	r0, r1
 8005242:	461c      	mov	r4, r3
 8005244:	2c00      	cmp	r4, #0
 8005246:	f1a0 0004 	sub.w	r0, r0, #4
 800524a:	dc59      	bgt.n	8005300 <__kernel_rem_pio2f+0x4ac>
 800524c:	4618      	mov	r0, r3
 800524e:	2801      	cmp	r0, #1
 8005250:	f1a1 0104 	sub.w	r1, r1, #4
 8005254:	dc64      	bgt.n	8005320 <__kernel_rem_pio2f+0x4cc>
 8005256:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8005164 <__kernel_rem_pio2f+0x310>
 800525a:	2b01      	cmp	r3, #1
 800525c:	dc70      	bgt.n	8005340 <__kernel_rem_pio2f+0x4ec>
 800525e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005262:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005266:	f1bb 0f00 	cmp.w	fp, #0
 800526a:	d172      	bne.n	8005352 <__kernel_rem_pio2f+0x4fe>
 800526c:	edc5 6a00 	vstr	s13, [r5]
 8005270:	ed85 7a01 	vstr	s14, [r5, #4]
 8005274:	edc5 7a02 	vstr	s15, [r5, #8]
 8005278:	e7d4      	b.n	8005224 <__kernel_rem_pio2f+0x3d0>
 800527a:	aa2e      	add	r2, sp, #184	; 0xb8
 800527c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005280:	ed91 7a00 	vldr	s14, [r1]
 8005284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005288:	3b01      	subs	r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	daf5      	bge.n	800527a <__kernel_rem_pio2f+0x426>
 800528e:	f1bb 0f00 	cmp.w	fp, #0
 8005292:	d001      	beq.n	8005298 <__kernel_rem_pio2f+0x444>
 8005294:	eef1 7a67 	vneg.f32	s15, s15
 8005298:	edc5 7a00 	vstr	s15, [r5]
 800529c:	e7c2      	b.n	8005224 <__kernel_rem_pio2f+0x3d0>
 800529e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005164 <__kernel_rem_pio2f+0x310>
 80052a2:	e7f2      	b.n	800528a <__kernel_rem_pio2f+0x436>
 80052a4:	aa2e      	add	r2, sp, #184	; 0xb8
 80052a6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80052aa:	edd0 7a00 	vldr	s15, [r0]
 80052ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052b2:	3901      	subs	r1, #1
 80052b4:	2900      	cmp	r1, #0
 80052b6:	daf5      	bge.n	80052a4 <__kernel_rem_pio2f+0x450>
 80052b8:	f1bb 0f00 	cmp.w	fp, #0
 80052bc:	d017      	beq.n	80052ee <__kernel_rem_pio2f+0x49a>
 80052be:	eef1 7a47 	vneg.f32	s15, s14
 80052c2:	edc5 7a00 	vstr	s15, [r5]
 80052c6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80052ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052ce:	a82f      	add	r0, sp, #188	; 0xbc
 80052d0:	2101      	movs	r1, #1
 80052d2:	428b      	cmp	r3, r1
 80052d4:	da0e      	bge.n	80052f4 <__kernel_rem_pio2f+0x4a0>
 80052d6:	f1bb 0f00 	cmp.w	fp, #0
 80052da:	d001      	beq.n	80052e0 <__kernel_rem_pio2f+0x48c>
 80052dc:	eef1 7a67 	vneg.f32	s15, s15
 80052e0:	edc5 7a01 	vstr	s15, [r5, #4]
 80052e4:	e79e      	b.n	8005224 <__kernel_rem_pio2f+0x3d0>
 80052e6:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8005164 <__kernel_rem_pio2f+0x310>
 80052ea:	4619      	mov	r1, r3
 80052ec:	e7e2      	b.n	80052b4 <__kernel_rem_pio2f+0x460>
 80052ee:	eef0 7a47 	vmov.f32	s15, s14
 80052f2:	e7e6      	b.n	80052c2 <__kernel_rem_pio2f+0x46e>
 80052f4:	ecb0 7a01 	vldmia	r0!, {s14}
 80052f8:	3101      	adds	r1, #1
 80052fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052fe:	e7e8      	b.n	80052d2 <__kernel_rem_pio2f+0x47e>
 8005300:	edd0 7a00 	vldr	s15, [r0]
 8005304:	edd0 6a01 	vldr	s13, [r0, #4]
 8005308:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800530c:	3c01      	subs	r4, #1
 800530e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005312:	ed80 7a00 	vstr	s14, [r0]
 8005316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531a:	edc0 7a01 	vstr	s15, [r0, #4]
 800531e:	e791      	b.n	8005244 <__kernel_rem_pio2f+0x3f0>
 8005320:	edd1 7a00 	vldr	s15, [r1]
 8005324:	edd1 6a01 	vldr	s13, [r1, #4]
 8005328:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800532c:	3801      	subs	r0, #1
 800532e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005332:	ed81 7a00 	vstr	s14, [r1]
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	edc1 7a01 	vstr	s15, [r1, #4]
 800533e:	e786      	b.n	800524e <__kernel_rem_pio2f+0x3fa>
 8005340:	aa2e      	add	r2, sp, #184	; 0xb8
 8005342:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005346:	ed91 7a00 	vldr	s14, [r1]
 800534a:	3b01      	subs	r3, #1
 800534c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005350:	e783      	b.n	800525a <__kernel_rem_pio2f+0x406>
 8005352:	eef1 6a66 	vneg.f32	s13, s13
 8005356:	eeb1 7a47 	vneg.f32	s14, s14
 800535a:	edc5 6a00 	vstr	s13, [r5]
 800535e:	ed85 7a01 	vstr	s14, [r5, #4]
 8005362:	eef1 7a67 	vneg.f32	s15, s15
 8005366:	e785      	b.n	8005274 <__kernel_rem_pio2f+0x420>

08005368 <__kernel_sinf>:
 8005368:	ee10 3a10 	vmov	r3, s0
 800536c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005370:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005374:	da04      	bge.n	8005380 <__kernel_sinf+0x18>
 8005376:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800537a:	ee17 3a90 	vmov	r3, s15
 800537e:	b35b      	cbz	r3, 80053d8 <__kernel_sinf+0x70>
 8005380:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005384:	eddf 7a15 	vldr	s15, [pc, #84]	; 80053dc <__kernel_sinf+0x74>
 8005388:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80053e0 <__kernel_sinf+0x78>
 800538c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005390:	eddf 7a14 	vldr	s15, [pc, #80]	; 80053e4 <__kernel_sinf+0x7c>
 8005394:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005398:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80053e8 <__kernel_sinf+0x80>
 800539c:	eea7 6a87 	vfma.f32	s12, s15, s14
 80053a0:	eddf 7a12 	vldr	s15, [pc, #72]	; 80053ec <__kernel_sinf+0x84>
 80053a4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80053a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80053ac:	b930      	cbnz	r0, 80053bc <__kernel_sinf+0x54>
 80053ae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80053f0 <__kernel_sinf+0x88>
 80053b2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80053b6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80053ba:	4770      	bx	lr
 80053bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80053c0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80053c4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80053c8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80053cc:	eddf 7a09 	vldr	s15, [pc, #36]	; 80053f4 <__kernel_sinf+0x8c>
 80053d0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80053d4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	2f2ec9d3 	.word	0x2f2ec9d3
 80053e0:	b2d72f34 	.word	0xb2d72f34
 80053e4:	3638ef1b 	.word	0x3638ef1b
 80053e8:	b9500d01 	.word	0xb9500d01
 80053ec:	3c088889 	.word	0x3c088889
 80053f0:	be2aaaab 	.word	0xbe2aaaab
 80053f4:	3e2aaaab 	.word	0x3e2aaaab

080053f8 <fabsf>:
 80053f8:	ee10 3a10 	vmov	r3, s0
 80053fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005400:	ee00 3a10 	vmov	s0, r3
 8005404:	4770      	bx	lr
	...

08005408 <floorf>:
 8005408:	ee10 3a10 	vmov	r3, s0
 800540c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005410:	3a7f      	subs	r2, #127	; 0x7f
 8005412:	2a16      	cmp	r2, #22
 8005414:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005418:	dc2a      	bgt.n	8005470 <floorf+0x68>
 800541a:	2a00      	cmp	r2, #0
 800541c:	da11      	bge.n	8005442 <floorf+0x3a>
 800541e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005480 <floorf+0x78>
 8005422:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005426:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542e:	dd05      	ble.n	800543c <floorf+0x34>
 8005430:	2b00      	cmp	r3, #0
 8005432:	da23      	bge.n	800547c <floorf+0x74>
 8005434:	4a13      	ldr	r2, [pc, #76]	; (8005484 <floorf+0x7c>)
 8005436:	2900      	cmp	r1, #0
 8005438:	bf18      	it	ne
 800543a:	4613      	movne	r3, r2
 800543c:	ee00 3a10 	vmov	s0, r3
 8005440:	4770      	bx	lr
 8005442:	4911      	ldr	r1, [pc, #68]	; (8005488 <floorf+0x80>)
 8005444:	4111      	asrs	r1, r2
 8005446:	420b      	tst	r3, r1
 8005448:	d0fa      	beq.n	8005440 <floorf+0x38>
 800544a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005480 <floorf+0x78>
 800544e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005452:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545a:	ddef      	ble.n	800543c <floorf+0x34>
 800545c:	2b00      	cmp	r3, #0
 800545e:	bfbe      	ittt	lt
 8005460:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005464:	fa40 f202 	asrlt.w	r2, r0, r2
 8005468:	189b      	addlt	r3, r3, r2
 800546a:	ea23 0301 	bic.w	r3, r3, r1
 800546e:	e7e5      	b.n	800543c <floorf+0x34>
 8005470:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005474:	d3e4      	bcc.n	8005440 <floorf+0x38>
 8005476:	ee30 0a00 	vadd.f32	s0, s0, s0
 800547a:	4770      	bx	lr
 800547c:	2300      	movs	r3, #0
 800547e:	e7dd      	b.n	800543c <floorf+0x34>
 8005480:	7149f2ca 	.word	0x7149f2ca
 8005484:	bf800000 	.word	0xbf800000
 8005488:	007fffff 	.word	0x007fffff

0800548c <scalbnf>:
 800548c:	ee10 3a10 	vmov	r3, s0
 8005490:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005494:	d025      	beq.n	80054e2 <scalbnf+0x56>
 8005496:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800549a:	d302      	bcc.n	80054a2 <scalbnf+0x16>
 800549c:	ee30 0a00 	vadd.f32	s0, s0, s0
 80054a0:	4770      	bx	lr
 80054a2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80054a6:	d122      	bne.n	80054ee <scalbnf+0x62>
 80054a8:	4b2a      	ldr	r3, [pc, #168]	; (8005554 <scalbnf+0xc8>)
 80054aa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005558 <scalbnf+0xcc>
 80054ae:	4298      	cmp	r0, r3
 80054b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80054b4:	db16      	blt.n	80054e4 <scalbnf+0x58>
 80054b6:	ee10 3a10 	vmov	r3, s0
 80054ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80054be:	3a19      	subs	r2, #25
 80054c0:	4402      	add	r2, r0
 80054c2:	2afe      	cmp	r2, #254	; 0xfe
 80054c4:	dd15      	ble.n	80054f2 <scalbnf+0x66>
 80054c6:	ee10 3a10 	vmov	r3, s0
 80054ca:	eddf 7a24 	vldr	s15, [pc, #144]	; 800555c <scalbnf+0xd0>
 80054ce:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005560 <scalbnf+0xd4>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	eeb0 7a67 	vmov.f32	s14, s15
 80054d8:	bfb8      	it	lt
 80054da:	eef0 7a66 	vmovlt.f32	s15, s13
 80054de:	ee27 0a27 	vmul.f32	s0, s14, s15
 80054e2:	4770      	bx	lr
 80054e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005564 <scalbnf+0xd8>
 80054e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80054ec:	4770      	bx	lr
 80054ee:	0dd2      	lsrs	r2, r2, #23
 80054f0:	e7e6      	b.n	80054c0 <scalbnf+0x34>
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	dd06      	ble.n	8005504 <scalbnf+0x78>
 80054f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80054fe:	ee00 3a10 	vmov	s0, r3
 8005502:	4770      	bx	lr
 8005504:	f112 0f16 	cmn.w	r2, #22
 8005508:	da1a      	bge.n	8005540 <scalbnf+0xb4>
 800550a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800550e:	4298      	cmp	r0, r3
 8005510:	ee10 3a10 	vmov	r3, s0
 8005514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005518:	dd0a      	ble.n	8005530 <scalbnf+0xa4>
 800551a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800555c <scalbnf+0xd0>
 800551e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005560 <scalbnf+0xd4>
 8005522:	eef0 7a40 	vmov.f32	s15, s0
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf18      	it	ne
 800552a:	eeb0 0a47 	vmovne.f32	s0, s14
 800552e:	e7db      	b.n	80054e8 <scalbnf+0x5c>
 8005530:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005564 <scalbnf+0xd8>
 8005534:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005568 <scalbnf+0xdc>
 8005538:	eef0 7a40 	vmov.f32	s15, s0
 800553c:	2b00      	cmp	r3, #0
 800553e:	e7f3      	b.n	8005528 <scalbnf+0x9c>
 8005540:	3219      	adds	r2, #25
 8005542:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005546:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800554a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800556c <scalbnf+0xe0>
 800554e:	ee07 3a10 	vmov	s14, r3
 8005552:	e7c4      	b.n	80054de <scalbnf+0x52>
 8005554:	ffff3cb0 	.word	0xffff3cb0
 8005558:	4c000000 	.word	0x4c000000
 800555c:	7149f2ca 	.word	0x7149f2ca
 8005560:	f149f2ca 	.word	0xf149f2ca
 8005564:	0da24260 	.word	0x0da24260
 8005568:	8da24260 	.word	0x8da24260
 800556c:	33000000 	.word	0x33000000

08005570 <__libc_init_array>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4d0d      	ldr	r5, [pc, #52]	; (80055a8 <__libc_init_array+0x38>)
 8005574:	4c0d      	ldr	r4, [pc, #52]	; (80055ac <__libc_init_array+0x3c>)
 8005576:	1b64      	subs	r4, r4, r5
 8005578:	10a4      	asrs	r4, r4, #2
 800557a:	2600      	movs	r6, #0
 800557c:	42a6      	cmp	r6, r4
 800557e:	d109      	bne.n	8005594 <__libc_init_array+0x24>
 8005580:	4d0b      	ldr	r5, [pc, #44]	; (80055b0 <__libc_init_array+0x40>)
 8005582:	4c0c      	ldr	r4, [pc, #48]	; (80055b4 <__libc_init_array+0x44>)
 8005584:	f000 f82e 	bl	80055e4 <_init>
 8005588:	1b64      	subs	r4, r4, r5
 800558a:	10a4      	asrs	r4, r4, #2
 800558c:	2600      	movs	r6, #0
 800558e:	42a6      	cmp	r6, r4
 8005590:	d105      	bne.n	800559e <__libc_init_array+0x2e>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	f855 3b04 	ldr.w	r3, [r5], #4
 8005598:	4798      	blx	r3
 800559a:	3601      	adds	r6, #1
 800559c:	e7ee      	b.n	800557c <__libc_init_array+0xc>
 800559e:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a2:	4798      	blx	r3
 80055a4:	3601      	adds	r6, #1
 80055a6:	e7f2      	b.n	800558e <__libc_init_array+0x1e>
 80055a8:	080059f4 	.word	0x080059f4
 80055ac:	080059f4 	.word	0x080059f4
 80055b0:	080059f4 	.word	0x080059f4
 80055b4:	080059f8 	.word	0x080059f8

080055b8 <memcpy>:
 80055b8:	440a      	add	r2, r1
 80055ba:	4291      	cmp	r1, r2
 80055bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c0:	d100      	bne.n	80055c4 <memcpy+0xc>
 80055c2:	4770      	bx	lr
 80055c4:	b510      	push	{r4, lr}
 80055c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ce:	4291      	cmp	r1, r2
 80055d0:	d1f9      	bne.n	80055c6 <memcpy+0xe>
 80055d2:	bd10      	pop	{r4, pc}

080055d4 <memset>:
 80055d4:	4402      	add	r2, r0
 80055d6:	4603      	mov	r3, r0
 80055d8:	4293      	cmp	r3, r2
 80055da:	d100      	bne.n	80055de <memset+0xa>
 80055dc:	4770      	bx	lr
 80055de:	f803 1b01 	strb.w	r1, [r3], #1
 80055e2:	e7f9      	b.n	80055d8 <memset+0x4>

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
