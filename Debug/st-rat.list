
st-rat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a458  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d4  0800a9d4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9dc  0800a9dc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000090  0800aa74  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  0800aa74  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c410  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f35  00000000  00000000  0003c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00040408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00041618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024436  00000000  00000000  000426a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a06  00000000  00000000  00066ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfbf  00000000  00000000  0007f4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b4a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e00  00000000  00000000  0014b4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a5c8 	.word	0x0800a5c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a5c8 	.word	0x0800a5c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f003 fd2f 	bl	8003f48 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000ac 	.word	0x200000ac
 80004f8:	200000b0 	.word	0x200000b0

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f003 fd15 	bl	8003f48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f003 fe0b 	bl	8004144 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000b0 	.word	0x200000b0

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b80      	ldr	r3, [pc, #512]	; (8000750 <CS43_Init+0x210>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7e      	ldr	r3, [pc, #504]	; (8000750 <CS43_Init+0x210>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7c      	ldr	r3, [pc, #496]	; (8000750 <CS43_Init+0x210>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487a      	ldr	r0, [pc, #488]	; (8000754 <CS43_Init+0x214>)
 800056c:	f001 fe2a 	bl	80021c4 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b79      	ldr	r3, [pc, #484]	; (8000758 <CS43_Init+0x218>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f009 ff46 	bl	800a40c <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b76      	ldr	r3, [pc, #472]	; (800075c <CS43_Init+0x21c>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4975      	ldr	r1, [pc, #468]	; (800075c <CS43_Init+0x21c>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b73      	ldr	r3, [pc, #460]	; (800075c <CS43_Init+0x21c>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b71      	ldr	r3, [pc, #452]	; (800075c <CS43_Init+0x21c>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b6f      	ldr	r3, [pc, #444]	; (800075c <CS43_Init+0x21c>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6e      	ldr	r3, [pc, #440]	; (800075c <CS43_Init+0x21c>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6b      	ldr	r3, [pc, #428]	; (800075c <CS43_Init+0x21c>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6a      	ldr	r3, [pc, #424]	; (800075c <CS43_Init+0x21c>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b68      	ldr	r3, [pc, #416]	; (800075c <CS43_Init+0x21c>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4968      	ldr	r1, [pc, #416]	; (8000760 <CS43_Init+0x220>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b65      	ldr	r3, [pc, #404]	; (800075c <CS43_Init+0x21c>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4964      	ldr	r1, [pc, #400]	; (8000760 <CS43_Init+0x220>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4961      	ldr	r1, [pc, #388]	; (800075c <CS43_Init+0x21c>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b5f      	ldr	r3, [pc, #380]	; (800075c <CS43_Init+0x21c>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5d      	ldr	r3, [pc, #372]	; (800075c <CS43_Init+0x21c>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5c      	ldr	r3, [pc, #368]	; (800075c <CS43_Init+0x21c>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b59      	ldr	r3, [pc, #356]	; (800075c <CS43_Init+0x21c>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b58      	ldr	r3, [pc, #352]	; (800075c <CS43_Init+0x21c>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b56      	ldr	r3, [pc, #344]	; (800075c <CS43_Init+0x21c>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <CS43_Init+0x21c>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b52      	ldr	r3, [pc, #328]	; (800075c <CS43_Init+0x21c>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b51      	ldr	r3, [pc, #324]	; (800075c <CS43_Init+0x21c>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b4f      	ldr	r3, [pc, #316]	; (800075c <CS43_Init+0x21c>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <CS43_Init+0x21c>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4b      	ldr	r3, [pc, #300]	; (800075c <CS43_Init+0x21c>)
 800062e:	705a      	strb	r2, [r3, #1]
	
	//iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
	iData[1] |=  (0 << 0);  // 24-bit audio word length for I2S interface
 8000630:	4b4a      	ldr	r3, [pc, #296]	; (800075c <CS43_Init+0x21c>)
 8000632:	785a      	ldrb	r2, [r3, #1]
 8000634:	4b49      	ldr	r3, [pc, #292]	; (800075c <CS43_Init+0x21c>)
 8000636:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000638:	4949      	ldr	r1, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063a:	2006      	movs	r0, #6
 800063c:	f7ff ff40 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000640:	4947      	ldr	r1, [pc, #284]	; (8000760 <CS43_Init+0x220>)
 8000642:	2008      	movs	r0, #8
 8000644:	f7ff ff5a 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000648:	4b44      	ldr	r3, [pc, #272]	; (800075c <CS43_Init+0x21c>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	f023 030f 	bic.w	r3, r3, #15
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b42      	ldr	r3, [pc, #264]	; (800075c <CS43_Init+0x21c>)
 8000654:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000656:	4b41      	ldr	r3, [pc, #260]	; (800075c <CS43_Init+0x21c>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <CS43_Init+0x21c>)
 8000662:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000664:	493e      	ldr	r1, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000666:	2008      	movs	r0, #8
 8000668:	f7ff ff2a 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800066c:	493c      	ldr	r1, [pc, #240]	; (8000760 <CS43_Init+0x220>)
 800066e:	2009      	movs	r0, #9
 8000670:	f7ff ff44 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000674:	4b39      	ldr	r3, [pc, #228]	; (800075c <CS43_Init+0x21c>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <CS43_Init+0x21c>)
 8000680:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000682:	4b36      	ldr	r3, [pc, #216]	; (800075c <CS43_Init+0x21c>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <CS43_Init+0x21c>)
 800068e:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000690:	4933      	ldr	r1, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000692:	2009      	movs	r0, #9
 8000694:	f7ff ff14 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000698:	4931      	ldr	r1, [pc, #196]	; (8000760 <CS43_Init+0x220>)
 800069a:	200e      	movs	r0, #14
 800069c:	f7ff ff2e 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d123      	bne.n	80006f0 <CS43_Init+0x1b0>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <CS43_Init+0x21c>)
 80006aa:	785b      	ldrb	r3, [r3, #1]
 80006ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b2a      	ldr	r3, [pc, #168]	; (800075c <CS43_Init+0x21c>)
 80006b4:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <CS43_Init+0x21c>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <CS43_Init+0x21c>)
 80006c2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <CS43_Init+0x21c>)
 80006c6:	785b      	ldrb	r3, [r3, #1]
 80006c8:	f023 0320 	bic.w	r3, r3, #32
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <CS43_Init+0x21c>)
 80006d0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <CS43_Init+0x21c>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	f023 0310 	bic.w	r3, r3, #16
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <CS43_Init+0x21c>)
 80006de:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <CS43_Init+0x21c>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	f023 0308 	bic.w	r3, r3, #8
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <CS43_Init+0x21c>)
 80006ec:	705a      	strb	r2, [r3, #1]
 80006ee:	e006      	b.n	80006fe <CS43_Init+0x1be>
	}
	else if(outputMode == MODE_I2S)
 80006f0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <CS43_Init+0x1be>
	{
		iData[1] = 0x02;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <CS43_Init+0x21c>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006fe:	4918      	ldr	r1, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	200e      	movs	r0, #14
 8000702:	f7ff fedd 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000706:	4916      	ldr	r1, [pc, #88]	; (8000760 <CS43_Init+0x220>)
 8000708:	200f      	movs	r0, #15
 800070a:	f7ff fef7 	bl	80004fc <read_register>
	iData[1] = 0x00;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <CS43_Init+0x21c>)
 8000710:	2200      	movs	r2, #0
 8000712:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000714:	4912      	ldr	r1, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff fed2 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <CS43_Init+0x21c>)
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000722:	490f      	ldr	r1, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2014      	movs	r0, #20
 8000726:	f7ff fecb 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <CS43_Init+0x220>)
 800072c:	2015      	movs	r0, #21
 800072e:	f7ff fec7 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000732:	490b      	ldr	r1, [pc, #44]	; (8000760 <CS43_Init+0x220>)
 8000734:	201a      	movs	r0, #26
 8000736:	f7ff fec3 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800073a:	4909      	ldr	r1, [pc, #36]	; (8000760 <CS43_Init+0x220>)
 800073c:	201b      	movs	r0, #27
 800073e:	f7ff febf 	bl	80004c0 <write_register>
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800074a:	b004      	add	sp, #16
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200002ac 	.word	0x200002ac
 8000754:	40020c00 	.word	0x40020c00
 8000758:	200000b0 	.word	0x200000b0
 800075c:	200000ac 	.word	0x200000ac
 8000760:	200000ad 	.word	0x200000ad

08000764 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d837      	bhi.n	80007e4 <CS43_Enable_RightLeft+0x80>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <CS43_Enable_RightLeft+0x18>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	0800078d 	.word	0x0800078d
 8000780:	080007a3 	.word	0x080007a3
 8000784:	080007b9 	.word	0x080007b9
 8000788:	080007cf 	.word	0x080007cf
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 800078e:	22c0      	movs	r2, #192	; 0xc0
 8000790:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 800079e:	705a      	strb	r2, [r3, #1]
			break;
 80007a0:	e021      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007aa:	785b      	ldrb	r3, [r3, #1]
 80007ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007b4:	705a      	strb	r2, [r3, #1]
			break;
 80007b6:	e016      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007ba:	22c0      	movs	r2, #192	; 0xc0
 80007bc:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	f043 0320 	orr.w	r3, r3, #32
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007ca:	705a      	strb	r2, [r3, #1]
			break;
 80007cc:	e00b      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007e0:	705a      	strb	r2, [r3, #1]
			break;
 80007e2:	e000      	b.n	80007e6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007e8:	785b      	ldrb	r3, [r3, #1]
 80007ea:	f043 030c 	orr.w	r3, r3, #12
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007f2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	f043 0303 	orr.w	r3, r3, #3
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <CS43_Enable_RightLeft+0xb0>)
 8000800:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000802:	4905      	ldr	r1, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb4>)
 8000804:	2004      	movs	r0, #4
 8000806:	f7ff fe5b 	bl	80004c0 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000ac 	.word	0x200000ac
 8000818:	200000ad 	.word	0x200000ad

0800081c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	3b32      	subs	r3, #50	; 0x32
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <CS43_SetVolume+0x78>)
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000840:	4915      	ldr	r1, [pc, #84]	; (8000898 <CS43_SetVolume+0x7c>)
 8000842:	2014      	movs	r0, #20
 8000844:	f7ff fe3c 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000848:	4913      	ldr	r1, [pc, #76]	; (8000898 <CS43_SetVolume+0x7c>)
 800084a:	2015      	movs	r0, #21
 800084c:	f7ff fe38 	bl	80004c0 <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b64      	cmp	r3, #100	; 0x64
 8000854:	d80e      	bhi.n	8000874 <CS43_SetVolume+0x58>
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <CS43_SetVolume+0x80>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1152      	asrs	r2, r2, #5
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3b18      	subs	r3, #24
 8000870:	b2db      	uxtb	r3, r3
 8000872:	e000      	b.n	8000876 <CS43_SetVolume+0x5a>
 8000874:	2318      	movs	r3, #24
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <CS43_SetVolume+0x78>)
 8000878:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087a:	4907      	ldr	r1, [pc, #28]	; (8000898 <CS43_SetVolume+0x7c>)
 800087c:	2020      	movs	r0, #32
 800087e:	f7ff fe1f 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000882:	4905      	ldr	r1, [pc, #20]	; (8000898 <CS43_SetVolume+0x7c>)
 8000884:	2021      	movs	r0, #33	; 0x21
 8000886:	f7ff fe1b 	bl	80004c0 <write_register>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000ac 	.word	0x200000ac
 8000898:	200000ad 	.word	0x200000ad
 800089c:	51eb851f 	.word	0x51eb851f

080008a0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <CS43_Start+0x7c>)
 80008a6:	2299      	movs	r2, #153	; 0x99
 80008a8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008aa:	491d      	ldr	r1, [pc, #116]	; (8000920 <CS43_Start+0x80>)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fe07 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <CS43_Start+0x7c>)
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008b8:	4919      	ldr	r1, [pc, #100]	; (8000920 <CS43_Start+0x80>)
 80008ba:	2047      	movs	r0, #71	; 0x47
 80008bc:	f7ff fe00 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c0:	4917      	ldr	r1, [pc, #92]	; (8000920 <CS43_Start+0x80>)
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <CS43_Start+0x7c>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <CS43_Start+0x7c>)
 80008d4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008d6:	4912      	ldr	r1, [pc, #72]	; (8000920 <CS43_Start+0x80>)
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf1 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	4910      	ldr	r1, [pc, #64]	; (8000920 <CS43_Start+0x80>)
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f7ff fe0b 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <CS43_Start+0x7c>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <CS43_Start+0x7c>)
 80008f2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	490a      	ldr	r1, [pc, #40]	; (8000920 <CS43_Start+0x80>)
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f7ff fde2 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <CS43_Start+0x7c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000902:	4907      	ldr	r1, [pc, #28]	; (8000920 <CS43_Start+0x80>)
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fddb 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <CS43_Start+0x7c>)
 800090c:	229e      	movs	r2, #158	; 0x9e
 800090e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000910:	4903      	ldr	r1, [pc, #12]	; (8000920 <CS43_Start+0x80>)
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fdd4 	bl	80004c0 <write_register>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000ac 	.word	0x200000ac
 8000920:	200000ad 	.word	0x200000ad

08000924 <main>:
  * @retval int
  */
uint16_t rxBuf[8];
uint16_t txBuf[8];
int main(void)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b095      	sub	sp, #84	; 0x54
 8000928:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  sample_dt = F_OUT/F_SAMPLE;
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <main+0xfc>)
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <main+0x100>)
 800092e:	601a      	str	r2, [r3, #0]
  sample_N = F_SAMPLE/F_OUT;
 8000930:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <main+0x104>)
 8000932:	2264      	movs	r2, #100	; 0x64
 8000934:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fd91 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f887 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f9c3 	bl	8000cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000942:	f000 f999 	bl	8000c78 <MX_DMA_Init>
  MX_I2C1_Init();
 8000946:	f000 f903 	bl	8000b50 <MX_I2C1_Init>
  MX_I2S3_Init();
 800094a:	f000 f92f 	bl	8000bac <MX_I2S3_Init>
  MX_SPI1_Init();
 800094e:	f000 f95d 	bl	8000c0c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000952:	f008 fcad 	bl	80092b0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000956:	4c35      	ldr	r4, [pc, #212]	; (8000a2c <main+0x108>)
 8000958:	2300      	movs	r3, #0
 800095a:	9311      	str	r3, [sp, #68]	; 0x44
 800095c:	4668      	mov	r0, sp
 800095e:	f104 0310 	add.w	r3, r4, #16
 8000962:	2244      	movs	r2, #68	; 0x44
 8000964:	4619      	mov	r1, r3
 8000966:	f009 fd51 	bl	800a40c <memcpy>
 800096a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800096e:	f7ff fde7 	bl	8000540 <CS43_Init>
  CS43_SetVolume(25);
 8000972:	2019      	movs	r0, #25
 8000974:	f7ff ff52 	bl	800081c <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000978:	2003      	movs	r0, #3
 800097a:	f7ff fef3 	bl	8000764 <CS43_Enable_RightLeft>
  CS43_Start();
 800097e:	f7ff ff8f 	bl	80008a0 <CS43_Start>

  //Build Sine wave
  	for(uint16_t i=0; i<sample_N; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	e03d      	b.n	8000a04 <main+0xe0>
  	{
  		mySinVal = sinf(i*2*PI*sample_dt);
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000a30 <main+0x10c>
 8000998:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <main+0xfc>)
 800099e:	edd3 7a00 	vldr	s15, [r3]
 80009a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a6:	eeb0 0a67 	vmov.f32	s0, s15
 80009aa:	f008 ff89 	bl	80098c0 <sinf>
 80009ae:	eef0 7a40 	vmov.f32	s15, s0
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <main+0x110>)
 80009b4:	edc3 7a00 	vstr	s15, [r3]
  		dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <main+0x110>)
 80009ba:	edd3 7a00 	vldr	s15, [r3]
 80009be:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000a38 <main+0x114>
 80009c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ce:	ee17 2a90 	vmov	r2, s15
 80009d2:	b211      	sxth	r1, r2
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <main+0x118>)
 80009d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  		dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <main+0x110>)
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000a38 <main+0x114>
 80009e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3301      	adds	r3, #1
 80009ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f2:	ee17 2a90 	vmov	r2, s15
 80009f6:	b211      	sxth	r1, r2
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <main+0x118>)
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	for(uint16_t i=0; i<sample_N; i++)
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	3301      	adds	r3, #1
 8000a02:	80fb      	strh	r3, [r7, #6]
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <main+0x104>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3bc      	bcc.n	8000988 <main+0x64>
  	}

  HAL_I2SEx_TransmitReceive_DMA(&hi2s3, txBuf, rxBuf, 4);
 8000a0e:	2304      	movs	r3, #4
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <main+0x11c>)
 8000a12:	490c      	ldr	r1, [pc, #48]	; (8000a44 <main+0x120>)
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <main+0x124>)
 8000a16:	f004 fb2f 	bl	8005078 <HAL_I2SEx_TransmitReceive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a1a:	f008 fc6f 	bl	80092fc <MX_USB_HOST_Process>
 8000a1e:	e7fc      	b.n	8000a1a <main+0xf6>
 8000a20:	200002a8 	.word	0x200002a8
 8000a24:	3c23d70a 	.word	0x3c23d70a
 8000a28:	20000114 	.word	0x20000114
 8000a2c:	2000011c 	.word	0x2000011c
 8000a30:	40490fd0 	.word	0x40490fd0
 8000a34:	20000118 	.word	0x20000118
 8000a38:	45fa0000 	.word	0x45fa0000
 8000a3c:	200002f4 	.word	0x200002f4
 8000a40:	200001e0 	.word	0x200001e0
 8000a44:	20000170 	.word	0x20000170
 8000a48:	200002ac 	.word	0x200002ac

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b098      	sub	sp, #96	; 0x60
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a56:	2230      	movs	r2, #48	; 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f009 fce4 	bl	800a428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <SystemClock_Config+0xfc>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a30      	ldr	r2, [pc, #192]	; (8000b48 <SystemClock_Config+0xfc>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <SystemClock_Config+0xfc>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <SystemClock_Config+0x100>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <SystemClock_Config+0x100>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <SystemClock_Config+0x100>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aca:	2308      	movs	r3, #8
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ace:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 ff5d 	bl	80059a0 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000aec:	f000 fa5e 	bl	8000fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 f9be 	bl	8005e90 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b1a:	f000 fa47 	bl	8000fac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b22:	23c0      	movs	r3, #192	; 0xc0
 8000b24:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f005 fb96 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b3a:	f000 fa37 	bl	8000fac <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3760      	adds	r7, #96	; 0x60
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b8e:	f003 f897 	bl	8003cc0 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 fa08 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000011c 	.word	0x2000011c
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bb2:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <MX_I2S3_Init+0x58>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bbc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <MX_I2S3_Init+0x5c>)
 8000bd6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_I2S3_Init+0x54>)
 8000bec:	f003 fffe 	bl	8004bec <HAL_I2S_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000bf6:	f000 f9d9 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200002ac 	.word	0x200002ac
 8000c04:	40003c00 	.word	0x40003c00
 8000c08:	00017700 	.word	0x00017700

08000c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_SPI1_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c58:	220a      	movs	r2, #10
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_SPI1_Init+0x64>)
 8000c5e:	f005 fc3f 	bl	80064e0 <HAL_SPI_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c68:	f000 f9a0 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200001f0 	.word	0x200001f0
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_DMA_Init+0x4c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <MX_DMA_Init+0x4c>)
 8000c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <MX_DMA_Init+0x4c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	200b      	movs	r0, #11
 8000ca0:	f000 fd4d 	bl	800173e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca4:	200b      	movs	r0, #11
 8000ca6:	f000 fd66 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2010      	movs	r0, #16
 8000cb0:	f000 fd45 	bl	800173e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cb4:	2010      	movs	r0, #16
 8000cb6:	f000 fd5e 	bl	8001776 <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	4b71      	ldr	r3, [pc, #452]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a70      	ldr	r2, [pc, #448]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b6e      	ldr	r3, [pc, #440]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a69      	ldr	r2, [pc, #420]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a62      	ldr	r2, [pc, #392]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b60      	ldr	r3, [pc, #384]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b5c      	ldr	r3, [pc, #368]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a5b      	ldr	r2, [pc, #364]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b55      	ldr	r3, [pc, #340]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a54      	ldr	r2, [pc, #336]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <MX_GPIO_Init+0x1e0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4848      	ldr	r0, [pc, #288]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000d8c:	f001 fa1a 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2101      	movs	r1, #1
 8000d94:	4846      	ldr	r0, [pc, #280]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000d96:	f001 fa15 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000da0:	4844      	ldr	r0, [pc, #272]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000da2:	f001 fa0f 	bl	80021c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000da6:	2308      	movs	r3, #8
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	483b      	ldr	r0, [pc, #236]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000dbe:	f001 f865 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4835      	ldr	r0, [pc, #212]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000dda:	f001 f857 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dde:	2308      	movs	r3, #8
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dee:	2305      	movs	r3, #5
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	482d      	ldr	r0, [pc, #180]	; (8000eb0 <MX_GPIO_Init+0x1e8>)
 8000dfa:	f001 f847 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <MX_GPIO_Init+0x1f0>)
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	482a      	ldr	r0, [pc, #168]	; (8000ebc <MX_GPIO_Init+0x1f4>)
 8000e12:	f001 f83b 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e16:	2304      	movs	r3, #4
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <MX_GPIO_Init+0x1f8>)
 8000e2a:	f001 f82f 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e40:	2305      	movs	r3, #5
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <MX_GPIO_Init+0x1f8>)
 8000e4c:	f001 f81e 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e50:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e54:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000e6a:	f001 f80f 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_GPIO_Init+0x1ec>)
 8000e82:	f001 f803 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0x1f0>)
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_GPIO_Init+0x1e4>)
 8000e9a:	f000 fff7 	bl	8001e8c <HAL_GPIO_Init>

}
 8000e9e:	bf00      	nop
 8000ea0:	3730      	adds	r7, #48	; 0x30
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	10120000 	.word	0x10120000
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000ed4:	8852      	ldrh	r2, [r2, #2]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000edc:	889b      	ldrh	r3, [r3, #4]
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_I2SEx_TxRxHalfCpltCallback+0x6c>)
 8000ee2:	88d2      	ldrh	r2, [r2, #6]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample>>1;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	105b      	asrs	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	105b      	asrs	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60bb      	str	r3, [r7, #8]
	//run HP on left channel and LP on right channel
	/*lSample = Calc_IIR_Left(lSample);
	rSample = Calc_IIR_Right(rSample);*/

	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	0c1b      	lsrs	r3, r3, #16
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f08:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f10:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f1a:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_I2SEx_TxRxHalfCpltCallback+0x70>)
 8000f22:	80da      	strh	r2, [r3, #6]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	200001e0 	.word	0x200001e0
 8000f34:	20000170 	.word	0x20000170

08000f38 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f42:	891b      	ldrh	r3, [r3, #8]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f48:	8952      	ldrh	r2, [r2, #10]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f50:	899b      	ldrh	r3, [r3, #12]
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_I2SEx_TxRxCpltCallback+0x6c>)
 8000f56:	89d2      	ldrh	r2, [r2, #14]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample>>1;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	105b      	asrs	r3, r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
	rSample = rSample>>1;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	105b      	asrs	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	60bb      	str	r3, [r7, #8]
	//run HP on left channel and LP on right channel
	/*lSample = Calc_IIR_Left(lSample);
	rSample = Calc_IIR_Right(rSample);*/

	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f7c:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f84:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f8e:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_I2SEx_TxRxCpltCallback+0x70>)
 8000f96:	81da      	strh	r2, [r3, #14]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001e0 	.word	0x200001e0
 8000fa8:	20000170 	.word	0x20000170

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f000 fb96 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <HAL_I2C_MspInit+0x84>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d12c      	bne.n	8001084 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_I2C_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <HAL_I2C_MspInit+0x88>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_I2C_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001046:	f44f 7310 	mov.w	r3, #576	; 0x240
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001058:	2304      	movs	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <HAL_I2C_MspInit+0x8c>)
 8001064:	f000 ff12 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_I2C_MspInit+0x88>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_I2C_MspInit+0x88>)
 8001072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_I2C_MspInit+0x88>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40005400 	.word	0x40005400
 8001090:	40023800 	.word	0x40023800
 8001094:	40020400 	.word	0x40020400

08001098 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a60      	ldr	r2, [pc, #384]	; (8001238 <HAL_I2S_MspInit+0x1a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f040 80ba 	bne.w	8001230 <HAL_I2S_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a5d      	ldr	r2, [pc, #372]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b5b      	ldr	r3, [pc, #364]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
 80010e8:	4b54      	ldr	r3, [pc, #336]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b50      	ldr	r3, [pc, #320]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b4d      	ldr	r3, [pc, #308]	; (800123c <HAL_I2S_MspInit+0x1a4>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001110:	2310      	movs	r3, #16
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001120:	2306      	movs	r3, #6
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4845      	ldr	r0, [pc, #276]	; (8001240 <HAL_I2S_MspInit+0x1a8>)
 800112c:	f000 feae 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001130:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001142:	2306      	movs	r3, #6
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	483d      	ldr	r0, [pc, #244]	; (8001244 <HAL_I2S_MspInit+0x1ac>)
 800114e:	f000 fe9d 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8001164:	2305      	movs	r3, #5
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4835      	ldr	r0, [pc, #212]	; (8001244 <HAL_I2S_MspInit+0x1ac>)
 8001170:	f000 fe8c 	bl	8001e8c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8001174:	4b34      	ldr	r3, [pc, #208]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 8001176:	4a35      	ldr	r2, [pc, #212]	; (800124c <HAL_I2S_MspInit+0x1b4>)
 8001178:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 800117c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001180:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 80011a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a8:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 80011ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b0:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 80011b8:	4823      	ldr	r0, [pc, #140]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 80011ba:	f000 faf7 	bl	80017ac <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2S_MspInit+0x130>
    {
      Error_Handler();
 80011c4:	f7ff fef2 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ce:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <HAL_I2S_MspInit+0x1b0>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 80011d6:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <HAL_I2S_MspInit+0x1bc>)
 80011d8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 80011ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 8001202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001206:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 8001216:	f000 fac9 	bl	80017ac <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2S_MspInit+0x18c>
    {
      Error_Handler();
 8001220:	f7ff fec4 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_I2S_MspInit+0x1b8>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40003c00 	.word	0x40003c00
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020800 	.word	0x40020800
 8001248:	20000248 	.word	0x20000248
 800124c:	40026010 	.word	0x40026010
 8001250:	20000180 	.word	0x20000180
 8001254:	40026088 	.word	0x40026088

08001258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_SPI_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12b      	bne.n	80012d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 8001284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012b2:	23e0      	movs	r3, #224	; 0xe0
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c2:	2305      	movs	r3, #5
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 80012ce:	f000 fddd 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40013000 	.word	0x40013000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f8e4 	bl	8001500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <DMA1_Stream0_IRQHandler+0x10>)
 8001342:	f000 fb39 	bl	80019b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000248 	.word	0x20000248

08001350 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DMA1_Stream5_IRQHandler+0x10>)
 8001356:	f000 fb2f 	bl	80019b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000180 	.word	0x20000180

08001364 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <OTG_FS_IRQHandler+0x10>)
 800136a:	f001 f9af 	bl	80026cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000798 	.word	0x20000798

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f008 fff6 	bl	800a398 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20020000 	.word	0x20020000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000104 	.word	0x20000104
 80013e0:	20000ab0 	.word	0x20000ab0

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001424:	4c0b      	ldr	r4, [pc, #44]	; (8001454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001432:	f7ff ffd7 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f008 ffb5 	bl	800a3a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff fa73 	bl	8000924 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800144c:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 8001450:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001454:	20000aac 	.word	0x20000aac

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f94f 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fd92 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f967 	bl	8001792 <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f000 f92f 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008
 8001524:	200003bc 	.word	0x200003bc

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	200003bc 	.word	0x200003bc

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff ffee 	bl	8001528 <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffde 	bl	8001528 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff29 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff3e 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff31 	bl	80015ec <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff feb6 	bl	8001528 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e099      	b.n	80018fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e8:	e00f      	b.n	800180a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ea:	f7ff fe9d 	bl	8001528 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d908      	bls.n	800180a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2220      	movs	r2, #32
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2203      	movs	r2, #3
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e078      	b.n	80018fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e8      	bne.n	80017ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_DMA_Init+0x158>)
 8001824:	4013      	ands	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001836:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	2b04      	cmp	r3, #4
 8001862:	d107      	bne.n	8001874 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4313      	orrs	r3, r2
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f023 0307 	bic.w	r3, r3, #7
 800188a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	2b04      	cmp	r3, #4
 800189c:	d117      	bne.n	80018ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00e      	beq.n	80018ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fa6f 	bl	8001d94 <DMA_CheckFifoParam>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018ca:	2301      	movs	r3, #1
 80018cc:	e016      	b.n	80018fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fa26 	bl	8001d28 <DMA_CalcBaseAndBitshift>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	223f      	movs	r2, #63	; 0x3f
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	f010803f 	.word	0xf010803f

08001908 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_DMA_Start_IT+0x26>
 800192a:	2302      	movs	r3, #2
 800192c:	e040      	b.n	80019b0 <HAL_DMA_Start_IT+0xa8>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d12f      	bne.n	80019a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2202      	movs	r2, #2
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f9b8 	bl	8001ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	223f      	movs	r2, #63	; 0x3f
 8001962:	409a      	lsls	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0216 	orr.w	r2, r2, #22
 8001976:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0208 	orr.w	r2, r2, #8
 800198e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e005      	b.n	80019ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
 80019ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_DMA_IRQHandler+0x258>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a92      	ldr	r2, [pc, #584]	; (8001c14 <HAL_DMA_IRQHandler+0x25c>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0a9b      	lsrs	r3, r3, #10
 80019d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	2208      	movs	r2, #8
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01a      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2208      	movs	r2, #8
 8001a12:	409a      	lsls	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2201      	movs	r2, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	2204      	movs	r2, #4
 8001a60:	409a      	lsls	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d012      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a88:	f043 0204 	orr.w	r2, r3, #4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2210      	movs	r2, #16
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d043      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03c      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d018      	beq.n	8001afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d108      	bne.n	8001ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d024      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
 8001ae6:	e01f      	b.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
 8001af8:	e016      	b.n	8001b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0208 	bic.w	r2, r2, #8
 8001b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 808e 	beq.w	8001c56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8086 	beq.w	8001c56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	2220      	movs	r2, #32
 8001b50:	409a      	lsls	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d136      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0216 	bic.w	r2, r2, #22
 8001b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_DMA_IRQHandler+0x1da>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0208 	bic.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba6:	223f      	movs	r2, #63	; 0x3f
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d07d      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
        }
        return;
 8001bce:	e078      	b.n	8001cc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d01c      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d108      	bne.n	8001bfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d030      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
 8001bfc:	e02b      	b.n	8001c56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d027      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
 8001c0e:	e022      	b.n	8001c56 <HAL_DMA_IRQHandler+0x29e>
 8001c10:	20000000 	.word	0x20000000
 8001c14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0210 	bic.w	r2, r2, #16
 8001c34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d032      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d022      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3301      	adds	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d307      	bcc.n	8001c9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f2      	bne.n	8001c82 <HAL_DMA_IRQHandler+0x2ca>
 8001c9c:	e000      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cc2:	bf00      	nop
    }
  }
}
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop

08001ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b40      	cmp	r3, #64	; 0x40
 8001cf8:	d108      	bne.n	8001d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d0a:	e007      	b.n	8001d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3b10      	subs	r3, #16
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <DMA_CalcBaseAndBitshift+0x64>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <DMA_CalcBaseAndBitshift+0x68>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d909      	bls.n	8001d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d5e:	f023 0303 	bic.w	r3, r3, #3
 8001d62:	1d1a      	adds	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	659a      	str	r2, [r3, #88]	; 0x58
 8001d68:	e007      	b.n	8001d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	aaaaaaab 	.word	0xaaaaaaab
 8001d90:	0800a5fc 	.word	0x0800a5fc

08001d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d11f      	bne.n	8001dee <DMA_CheckFifoParam+0x5a>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d856      	bhi.n	8001e62 <DMA_CheckFifoParam+0xce>
 8001db4:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <DMA_CheckFifoParam+0x28>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	08001dcd 	.word	0x08001dcd
 8001dc0:	08001ddf 	.word	0x08001ddf
 8001dc4:	08001dcd 	.word	0x08001dcd
 8001dc8:	08001e63 	.word	0x08001e63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d046      	beq.n	8001e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ddc:	e043      	b.n	8001e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001de6:	d140      	bne.n	8001e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dec:	e03d      	b.n	8001e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df6:	d121      	bne.n	8001e3c <DMA_CheckFifoParam+0xa8>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d837      	bhi.n	8001e6e <DMA_CheckFifoParam+0xda>
 8001dfe:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <DMA_CheckFifoParam+0x70>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e1b 	.word	0x08001e1b
 8001e0c:	08001e15 	.word	0x08001e15
 8001e10:	08001e2d 	.word	0x08001e2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      break;
 8001e18:	e030      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d025      	beq.n	8001e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2a:	e022      	b.n	8001e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e34:	d11f      	bne.n	8001e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e3a:	e01c      	b.n	8001e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d903      	bls.n	8001e4a <DMA_CheckFifoParam+0xb6>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d003      	beq.n	8001e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e48:	e018      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4e:	e015      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00e      	beq.n	8001e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e60:	e00b      	b.n	8001e7a <DMA_CheckFifoParam+0xe6>
      break;
 8001e62:	bf00      	nop
 8001e64:	e00a      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e66:	bf00      	nop
 8001e68:	e008      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e006      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e004      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e72:	bf00      	nop
 8001e74:	e002      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e76:	bf00      	nop
 8001e78:	e000      	b.n	8001e7c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e16b      	b.n	8002180 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 815a 	bne.w	800217a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d005      	beq.n	8001ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d130      	bne.n	8001f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 0201 	and.w	r2, r3, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d017      	beq.n	8001f7c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d123      	bne.n	8001fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	69b9      	ldr	r1, [r7, #24]
 8001fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80b4 	beq.w	800217a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b60      	ldr	r3, [pc, #384]	; (8002198 <HAL_GPIO_Init+0x30c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a5f      	ldr	r2, [pc, #380]	; (8002198 <HAL_GPIO_Init+0x30c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b5d      	ldr	r3, [pc, #372]	; (8002198 <HAL_GPIO_Init+0x30c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202e:	4a5b      	ldr	r2, [pc, #364]	; (800219c <HAL_GPIO_Init+0x310>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_GPIO_Init+0x314>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <HAL_GPIO_Init+0x226>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x318>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d025      	beq.n	80020ae <HAL_GPIO_Init+0x222>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <HAL_GPIO_Init+0x31c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_GPIO_Init+0x21e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	; (80021ac <HAL_GPIO_Init+0x320>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x21a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <HAL_GPIO_Init+0x324>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x216>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4d      	ldr	r2, [pc, #308]	; (80021b4 <HAL_GPIO_Init+0x328>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x212>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4c      	ldr	r2, [pc, #304]	; (80021b8 <HAL_GPIO_Init+0x32c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x20e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <HAL_GPIO_Init+0x330>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x20a>
 8002092:	2307      	movs	r3, #7
 8002094:	e00e      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 8002096:	2308      	movs	r3, #8
 8002098:	e00c      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 800209a:	2306      	movs	r3, #6
 800209c:	e00a      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 800209e:	2305      	movs	r3, #5
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020a2:	2304      	movs	r3, #4
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x228>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c4:	4935      	ldr	r1, [pc, #212]	; (800219c <HAL_GPIO_Init+0x310>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d2:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <HAL_GPIO_Init+0x334>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f6:	4a32      	ldr	r2, [pc, #200]	; (80021c0 <HAL_GPIO_Init+0x334>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_GPIO_Init+0x334>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_GPIO_Init+0x334>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_GPIO_Init+0x334>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_GPIO_Init+0x334>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_GPIO_Init+0x334>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <HAL_GPIO_Init+0x334>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f ae90 	bls.w	8001ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40013800 	.word	0x40013800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40021400 	.word	0x40021400
 80021b8:	40021800 	.word	0x40021800
 80021bc:	40021c00 	.word	0x40021c00
 80021c0:	40013c00 	.word	0x40013c00

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e0:	e003      	b.n	80021ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	619a      	str	r2, [r3, #24]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80021f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f8:	b08f      	sub	sp, #60	; 0x3c
 80021fa:	af0a      	add	r7, sp, #40	; 0x28
 80021fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e054      	b.n	80022b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f007 f8a2 	bl	800936c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2203      	movs	r2, #3
 800222c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f004 fa45 	bl	80066d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	687e      	ldr	r6, [r7, #4]
 8002254:	466d      	mov	r5, sp
 8002256:	f106 0410 	add.w	r4, r6, #16
 800225a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002266:	e885 0003 	stmia.w	r5, {r0, r1}
 800226a:	1d33      	adds	r3, r6, #4
 800226c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	f004 f9bf 	bl	80065f2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fa3c 	bl	80066f8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	687e      	ldr	r6, [r7, #4]
 8002288:	466d      	mov	r5, sp
 800228a:	f106 0410 	add.w	r4, r6, #16
 800228e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002296:	e894 0003 	ldmia.w	r4, {r0, r1}
 800229a:	e885 0003 	stmia.w	r5, {r0, r1}
 800229e:	1d33      	adds	r3, r6, #4
 80022a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a2:	6838      	ldr	r0, [r7, #0]
 80022a4:	f004 fb4e 	bl	8006944 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022ba:	b590      	push	{r4, r7, lr}
 80022bc:	b089      	sub	sp, #36	; 0x24
 80022be:	af04      	add	r7, sp, #16
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	4608      	mov	r0, r1
 80022c4:	4611      	mov	r1, r2
 80022c6:	461a      	mov	r2, r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	70fb      	strb	r3, [r7, #3]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70bb      	strb	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_HCD_HC_Init+0x28>
 80022de:	2302      	movs	r3, #2
 80022e0:	e076      	b.n	80023d0 <HAL_HCD_HC_Init+0x116>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	333d      	adds	r3, #61	; 0x3d
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3338      	adds	r3, #56	; 0x38
 800230a:	787a      	ldrb	r2, [r7, #1]
 800230c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3340      	adds	r3, #64	; 0x40
 800231c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800231e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3339      	adds	r3, #57	; 0x39
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	333f      	adds	r3, #63	; 0x3f
 8002340:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002344:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	78ba      	ldrb	r2, [r7, #2]
 800234a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800234e:	b2d0      	uxtb	r0, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	333a      	adds	r3, #58	; 0x3a
 800235c:	4602      	mov	r2, r0
 800235e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002360:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002364:	2b00      	cmp	r3, #0
 8002366:	da09      	bge.n	800237c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	333b      	adds	r3, #59	; 0x3b
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e008      	b.n	800238e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	333b      	adds	r3, #59	; 0x3b
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	333c      	adds	r3, #60	; 0x3c
 800239c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023a0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	787c      	ldrb	r4, [r7, #1]
 80023a8:	78ba      	ldrb	r2, [r7, #2]
 80023aa:	78f9      	ldrb	r1, [r7, #3]
 80023ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4623      	mov	r3, r4
 80023be:	f004 fc43 	bl	8006c48 <USB_HC_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd90      	pop	{r4, r7, pc}

080023d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_HCD_HC_Halt+0x1e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e00f      	b.n	8002416 <HAL_HCD_HC_Halt+0x3e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f004 fe7f 	bl	800710a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4603      	mov	r3, r0
 8002430:	70fb      	strb	r3, [r7, #3]
 8002432:	460b      	mov	r3, r1
 8002434:	70bb      	strb	r3, [r7, #2]
 8002436:	4613      	mov	r3, r2
 8002438:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	333b      	adds	r3, #59	; 0x3b
 8002448:	78ba      	ldrb	r2, [r7, #2]
 800244a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	333f      	adds	r3, #63	; 0x3f
 800245a:	787a      	ldrb	r2, [r7, #1]
 800245c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800245e:	7c3b      	ldrb	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d112      	bne.n	800248a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3342      	adds	r3, #66	; 0x42
 8002472:	2203      	movs	r2, #3
 8002474:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	333d      	adds	r3, #61	; 0x3d
 8002484:	7f3a      	ldrb	r2, [r7, #28]
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e008      	b.n	800249c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3342      	adds	r3, #66	; 0x42
 8002498:	2202      	movs	r2, #2
 800249a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	f200 80c6 	bhi.w	8002630 <HAL_HCD_HC_SubmitRequest+0x210>
 80024a4:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	0800261d 	.word	0x0800261d
 80024b4:	08002521 	.word	0x08002521
 80024b8:	0800259f 	.word	0x0800259f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024bc:	7c3b      	ldrb	r3, [r7, #16]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	f040 80b8 	bne.w	8002634 <HAL_HCD_HC_SubmitRequest+0x214>
 80024c4:	78bb      	ldrb	r3, [r7, #2]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80b4 	bne.w	8002634 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80024cc:	8b3b      	ldrh	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d108      	bne.n	80024e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3355      	adds	r3, #85	; 0x55
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3355      	adds	r3, #85	; 0x55
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3342      	adds	r3, #66	; 0x42
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800250a:	e093      	b.n	8002634 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3342      	adds	r3, #66	; 0x42
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
      break;
 800251e:	e089      	b.n	8002634 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002520:	78bb      	ldrb	r3, [r7, #2]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11d      	bne.n	8002562 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3355      	adds	r3, #85	; 0x55
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3342      	adds	r3, #66	; 0x42
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800254c:	e073      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3342      	adds	r3, #66	; 0x42
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
      break;
 8002560:	e069      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3354      	adds	r3, #84	; 0x54
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	3342      	adds	r3, #66	; 0x42
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
      break;
 8002588:	e055      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3342      	adds	r3, #66	; 0x42
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
      break;
 800259c:	e04b      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800259e:	78bb      	ldrb	r3, [r7, #2]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11d      	bne.n	80025e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3355      	adds	r3, #85	; 0x55
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3342      	adds	r3, #66	; 0x42
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025ca:	e034      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3342      	adds	r3, #66	; 0x42
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]
      break;
 80025de:	e02a      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3354      	adds	r3, #84	; 0x54
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3342      	adds	r3, #66	; 0x42
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
      break;
 8002606:	e016      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3342      	adds	r3, #66	; 0x42
 8002616:	2202      	movs	r2, #2
 8002618:	701a      	strb	r2, [r3, #0]
      break;
 800261a:	e00c      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3342      	adds	r3, #66	; 0x42
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
      break;
 800262e:	e002      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002630:	bf00      	nop
 8002632:	e000      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002634:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3344      	adds	r3, #68	; 0x44
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	8b3a      	ldrh	r2, [r7, #24]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	202c      	movs	r0, #44	; 0x2c
 8002650:	fb00 f303 	mul.w	r3, r0, r3
 8002654:	440b      	add	r3, r1
 8002656:	334c      	adds	r3, #76	; 0x4c
 8002658:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3350      	adds	r3, #80	; 0x50
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3339      	adds	r3, #57	; 0x39
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	222c      	movs	r2, #44	; 0x2c
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	3338      	adds	r3, #56	; 0x38
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	18d1      	adds	r1, r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	f004 fbd2 	bl	8006e64 <USB_HC_StartXfer>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop

080026cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 f8eb 	bl	80068be <USB_GetMode>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	f040 80ef 	bne.w	80028ce <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 f8cf 	bl	8006898 <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80e5 	beq.w	80028cc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 f8c6 	bl	8006898 <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002716:	d104      	bne.n	8002722 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f004 f8b6 	bl	8006898 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002736:	d104      	bne.n	8002742 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002740:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f004 f8a6 	bl	8006898 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002756:	d104      	bne.n	8002762 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002760:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f004 f896 	bl	8006898 <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d103      	bne.n	800277e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2202      	movs	r2, #2
 800277c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f004 f888 	bl	8006898 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800278e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002792:	d115      	bne.n	80027c0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800279c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f006 fe5a 	bl	8009468 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 f97e 	bl	8006abc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f004 f867 	bl	8006898 <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d102      	bne.n	80027dc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f001 f9ff 	bl	8003bda <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 f859 	bl	8006898 <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d106      	bne.n	80027fe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f006 fe1d 	bl	8009430 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2208      	movs	r2, #8
 80027fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 f848 	bl	8006898 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b10      	cmp	r3, #16
 8002810:	d101      	bne.n	8002816 <HAL_HCD_IRQHandler+0x14a>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_HCD_IRQHandler+0x14c>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d012      	beq.n	8002842 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0210 	bic.w	r2, r2, #16
 800282a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f001 f902 	bl	8003a36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0210 	orr.w	r2, r2, #16
 8002840:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f004 f826 	bl	8006898 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002856:	d13a      	bne.n	80028ce <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f004 fc43 	bl	80070e8 <USB_HC_ReadInterrupt>
 8002862:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e025      	b.n	80028b6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d018      	beq.n	80028b0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002894:	d106      	bne.n	80028a4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f8ab 	bl	80029f8 <HCD_HC_IN_IRQHandler>
 80028a2:	e005      	b.n	80028b0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fcc6 	bl	800323c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3d4      	bcc.n	800286a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c8:	615a      	str	r2, [r3, #20]
 80028ca:	e000      	b.n	80028ce <HAL_HCD_IRQHandler+0x202>
      return;
 80028cc:	bf00      	nop
    }
  }
}
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_HCD_Start+0x16>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e013      	b.n	8002912 <HAL_HCD_Start+0x3e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fedc 	bl	80066b4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f004 f93e 	bl	8006b84 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_HCD_Stop+0x16>
 800292c:	2302      	movs	r3, #2
 800292e:	e00d      	b.n	800294c <HAL_HCD_Stop+0x32>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fd3d 	bl	80073bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f004 f8e5 	bl	8006b30 <USB_ResetPort>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	781b      	ldrb	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3350      	adds	r3, #80	; 0x50
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 f929 	bl	8006c24 <USB_GetCurrentFrame>
 80029d2:	4603      	mov	r3, r0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f004 f904 	bl	8006bf6 <USB_GetHostSpeed>
 80029ee:	4603      	mov	r3, r0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d119      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2304      	movs	r3, #4
 8002a38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	0151      	lsls	r1, r2, #5
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	440a      	add	r2, r1
 8002a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	60d3      	str	r3, [r2, #12]
 8002a5a:	e101      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a72:	d12b      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	2207      	movs	r2, #7
 8002a98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	0151      	lsls	r1, r2, #5
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	440a      	add	r2, r1
 8002ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fb20 	bl	800710a <USB_HC_Halt>
 8002aca:	e0c9      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d109      	bne.n	8002af6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	2320      	movs	r3, #32
 8002af2:	6093      	str	r3, [r2, #8]
 8002af4:	e0b4      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d133      	bne.n	8002b74 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3361      	adds	r3, #97	; 0x61
 8002b3a:	2205      	movs	r2, #5
 8002b3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2308      	movs	r3, #8
 8002b60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 facc 	bl	800710a <USB_HC_Halt>
 8002b72:	e075      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d134      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	0151      	lsls	r1, r2, #5
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	440a      	add	r2, r1
 8002ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	2208      	movs	r2, #8
 8002bbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2310      	movs	r3, #16
 8002bce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fa8b 	bl	800710a <USB_HC_Halt>
 8002bf4:	e034      	b.n	8002c60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d129      	bne.n	8002c60 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	0151      	lsls	r1, r2, #5
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	440a      	add	r2, r1
 8002c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3361      	adds	r3, #97	; 0x61
 8002c3a:	2206      	movs	r2, #6
 8002c3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f004 fa5e 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c76:	d122      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	0151      	lsls	r1, r2, #5
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	440a      	add	r2, r1
 8002c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fa31 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002cbc:	e2ba      	b.n	8003234 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	f040 811b 	bne.w	8002f0c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3348      	adds	r3, #72	; 0x48
 8002cec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	0159      	lsls	r1, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	440b      	add	r3, r1
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d00:	1ad2      	subs	r2, r2, r3
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	202c      	movs	r0, #44	; 0x2c
 8002d08:	fb00 f303 	mul.w	r3, r0, r3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3350      	adds	r3, #80	; 0x50
 8002d10:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3361      	adds	r3, #97	; 0x61
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	335c      	adds	r3, #92	; 0x5c
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	2301      	movs	r3, #1
 8002d46:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	333f      	adds	r3, #63	; 0x3f
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	333f      	adds	r3, #63	; 0x3f
 8002d6a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d121      	bne.n	8002db4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	0151      	lsls	r1, r2, #5
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	440a      	add	r2, r1
 8002d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 f9b5 	bl	800710a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	2310      	movs	r3, #16
 8002db0:	6093      	str	r3, [r2, #8]
 8002db2:	e066      	b.n	8002e82 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	333f      	adds	r3, #63	; 0x3f
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d127      	bne.n	8002e18 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	0151      	lsls	r1, r2, #5
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	440a      	add	r2, r1
 8002dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002de6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3360      	adds	r3, #96	; 0x60
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	b2d9      	uxtb	r1, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	202c      	movs	r0, #44	; 0x2c
 8002e04:	fb00 f303 	mul.w	r3, r0, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3360      	adds	r3, #96	; 0x60
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f006 fb37 	bl	8009484 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e16:	e034      	b.n	8002e82 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	333f      	adds	r3, #63	; 0x3f
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d12a      	bne.n	8002e82 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3354      	adds	r3, #84	; 0x54
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2d8      	uxtb	r0, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3354      	adds	r3, #84	; 0x54
 8002e62:	4602      	mov	r2, r0
 8002e64:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	b2d9      	uxtb	r1, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	202c      	movs	r0, #44	; 0x2c
 8002e70:	fb00 f303 	mul.w	r3, r0, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3360      	adds	r3, #96	; 0x60
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f006 fb01 	bl	8009484 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d12b      	bne.n	8002ee2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3348      	adds	r3, #72	; 0x48
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	202c      	movs	r0, #44	; 0x2c
 8002ea0:	fb00 f202 	mul.w	r2, r0, r2
 8002ea4:	440a      	add	r2, r1
 8002ea6:	3240      	adds	r2, #64	; 0x40
 8002ea8:	8812      	ldrh	r2, [r2, #0]
 8002eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 81be 	beq.w	8003234 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3354      	adds	r3, #84	; 0x54
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f083 0301 	eor.w	r3, r3, #1
 8002ecc:	b2d8      	uxtb	r0, r3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3354      	adds	r3, #84	; 0x54
 8002edc:	4602      	mov	r2, r0
 8002ede:	701a      	strb	r2, [r3, #0]
}
 8002ee0:	e1a8      	b.n	8003234 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3354      	adds	r3, #84	; 0x54
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	f083 0301 	eor.w	r3, r3, #1
 8002ef6:	b2d8      	uxtb	r0, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3354      	adds	r3, #84	; 0x54
 8002f06:	4602      	mov	r2, r0
 8002f08:	701a      	strb	r2, [r3, #0]
}
 8002f0a:	e193      	b.n	8003234 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	f040 8106 	bne.w	8003130 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	0151      	lsls	r1, r2, #5
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	440a      	add	r2, r1
 8002f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3e:	f023 0302 	bic.w	r3, r3, #2
 8002f42:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3361      	adds	r3, #97	; 0x61
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d109      	bne.n	8002f6c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3360      	adds	r3, #96	; 0x60
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e0c9      	b.n	8003100 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3361      	adds	r3, #97	; 0x61
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d109      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3360      	adds	r3, #96	; 0x60
 8002f8e:	2205      	movs	r2, #5
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e0b5      	b.n	8003100 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3361      	adds	r3, #97	; 0x61
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b06      	cmp	r3, #6
 8002fa6:	d009      	beq.n	8002fbc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3361      	adds	r3, #97	; 0x61
 8002fb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d150      	bne.n	800305e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	335c      	adds	r3, #92	; 0x5c
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	202c      	movs	r0, #44	; 0x2c
 8002fd4:	fb00 f303 	mul.w	r3, r0, r3
 8002fd8:	440b      	add	r3, r1
 8002fda:	335c      	adds	r3, #92	; 0x5c
 8002fdc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	335c      	adds	r3, #92	; 0x5c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d912      	bls.n	8003018 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	335c      	adds	r3, #92	; 0x5c
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3360      	adds	r3, #96	; 0x60
 8003012:	2204      	movs	r2, #4
 8003014:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003016:	e073      	b.n	8003100 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3360      	adds	r3, #96	; 0x60
 8003026:	2202      	movs	r2, #2
 8003028:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003040:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003048:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003056:	461a      	mov	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800305c:	e050      	b.n	8003100 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3361      	adds	r3, #97	; 0x61
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d122      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3360      	adds	r3, #96	; 0x60
 8003080:	2202      	movs	r2, #2
 8003082:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800309a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e023      	b.n	8003100 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3361      	adds	r3, #97	; 0x61
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b07      	cmp	r3, #7
 80030ca:	d119      	bne.n	8003100 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	335c      	adds	r3, #92	; 0x5c
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	202c      	movs	r0, #44	; 0x2c
 80030e4:	fb00 f303 	mul.w	r3, r0, r3
 80030e8:	440b      	add	r3, r1
 80030ea:	335c      	adds	r3, #92	; 0x5c
 80030ec:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3360      	adds	r3, #96	; 0x60
 80030fc:	2204      	movs	r2, #4
 80030fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	2302      	movs	r3, #2
 8003110:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	b2d9      	uxtb	r1, r3
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	202c      	movs	r0, #44	; 0x2c
 800311c:	fb00 f303 	mul.w	r3, r0, r3
 8003120:	4413      	add	r3, r2
 8003122:	3360      	adds	r3, #96	; 0x60
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f006 f9ab 	bl	8009484 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800312e:	e081      	b.n	8003234 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b10      	cmp	r3, #16
 8003144:	d176      	bne.n	8003234 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	212c      	movs	r1, #44	; 0x2c
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	333f      	adds	r3, #63	; 0x3f
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d121      	bne.n	800319e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	335c      	adds	r3, #92	; 0x5c
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	0151      	lsls	r1, r2, #5
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	440a      	add	r2, r1
 8003182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f003 ffb7 	bl	800710a <USB_HC_Halt>
 800319c:	e041      	b.n	8003222 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	333f      	adds	r3, #63	; 0x3f
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	333f      	adds	r3, #63	; 0x3f
 80031c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d12d      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	335c      	adds	r3, #92	; 0x5c
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d120      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3361      	adds	r3, #97	; 0x61
 80031ee:	2203      	movs	r2, #3
 80031f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	0151      	lsls	r1, r2, #5
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	440a      	add	r2, r1
 8003208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f003 ff74 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	461a      	mov	r2, r3
 8003230:	2310      	movs	r3, #16
 8003232:	6093      	str	r3, [r2, #8]
}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b04      	cmp	r3, #4
 800326a:	d119      	bne.n	80032a0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	461a      	mov	r2, r3
 800327a:	2304      	movs	r3, #4
 800327c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	0151      	lsls	r1, r2, #5
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	440a      	add	r2, r1
 8003294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800329e:	e3c6      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d13e      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	461a      	mov	r2, r3
 80032c4:	2320      	movs	r3, #32
 80032c6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	333d      	adds	r3, #61	; 0x3d
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 83a8 	bne.w	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	333d      	adds	r3, #61	; 0x3d
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3360      	adds	r3, #96	; 0x60
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	440a      	add	r2, r1
 8003318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f003 feec 	bl	800710a <USB_HC_Halt>
}
 8003332:	e37c      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334a:	d122      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	440a      	add	r2, r1
 8003362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003366:	f043 0302 	orr.w	r3, r3, #2
 800336a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fec7 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	461a      	mov	r2, r3
 800338a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338e:	6093      	str	r3, [r2, #8]
}
 8003390:	e34d      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d150      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	335c      	adds	r3, #92	; 0x5c
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d111      	bne.n	80033f4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	333d      	adds	r3, #61	; 0x3d
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	461a      	mov	r2, r3
 80033f0:	2340      	movs	r3, #64	; 0x40
 80033f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	440a      	add	r2, r1
 800340a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fe73 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	2301      	movs	r3, #1
 8003434:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	3361      	adds	r3, #97	; 0x61
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
}
 8003448:	e2f1      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	d13c      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3361      	adds	r3, #97	; 0x61
 800346e:	2204      	movs	r2, #4
 8003470:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	333d      	adds	r3, #61	; 0x3d
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	335c      	adds	r3, #92	; 0x5c
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4413      	add	r3, r2
 800349e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	0151      	lsls	r1, r2, #5
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	440a      	add	r2, r1
 80034ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f003 fe22 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	461a      	mov	r2, r3
 80034d4:	2340      	movs	r3, #64	; 0x40
 80034d6:	6093      	str	r3, [r2, #8]
}
 80034d8:	e2a9      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d12a      	bne.n	8003546 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	461a      	mov	r2, r3
 80034fe:	2308      	movs	r3, #8
 8003500:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	0151      	lsls	r1, r2, #5
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	440a      	add	r2, r1
 8003518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fdec 	bl	800710a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3361      	adds	r3, #97	; 0x61
 8003540:	2205      	movs	r2, #5
 8003542:	701a      	strb	r2, [r3, #0]
}
 8003544:	e273      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d150      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	335c      	adds	r3, #92	; 0x5c
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3361      	adds	r3, #97	; 0x61
 800357c:	2203      	movs	r2, #3
 800357e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	333d      	adds	r3, #61	; 0x3d
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d112      	bne.n	80035ba <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	333c      	adds	r3, #60	; 0x3c
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	333d      	adds	r3, #61	; 0x3d
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 fd90 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	461a      	mov	r2, r3
 80035f8:	2310      	movs	r3, #16
 80035fa:	6093      	str	r3, [r2, #8]
}
 80035fc:	e217      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d174      	bne.n	80036fe <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d121      	bne.n	8003660 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3361      	adds	r3, #97	; 0x61
 800362a:	2206      	movs	r2, #6
 800362c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	440a      	add	r2, r1
 8003644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f003 fd56 	bl	800710a <USB_HC_Halt>
 800365e:	e044      	b.n	80036ea <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	335c      	adds	r3, #92	; 0x5c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	202c      	movs	r0, #44	; 0x2c
 8003678:	fb00 f303 	mul.w	r3, r0, r3
 800367c:	440b      	add	r3, r1
 800367e:	335c      	adds	r3, #92	; 0x5c
 8003680:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	335c      	adds	r3, #92	; 0x5c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d920      	bls.n	80036d8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	335c      	adds	r3, #92	; 0x5c
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3360      	adds	r3, #96	; 0x60
 80036b6:	2204      	movs	r2, #4
 80036b8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	b2d9      	uxtb	r1, r3
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	202c      	movs	r0, #44	; 0x2c
 80036c4:	fb00 f303 	mul.w	r3, r0, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3360      	adds	r3, #96	; 0x60
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f005 fed7 	bl	8009484 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036d6:	e008      	b.n	80036ea <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	3360      	adds	r3, #96	; 0x60
 80036e6:	2202      	movs	r2, #2
 80036e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f6:	461a      	mov	r2, r3
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	6093      	str	r3, [r2, #8]
}
 80036fc:	e197      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003714:	d134      	bne.n	8003780 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	0151      	lsls	r1, r2, #5
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	440a      	add	r2, r1
 800372c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f003 fce2 	bl	800710a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	2310      	movs	r3, #16
 8003756:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800376a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3361      	adds	r3, #97	; 0x61
 800377a:	2208      	movs	r2, #8
 800377c:	701a      	strb	r2, [r3, #0]
}
 800377e:	e156      	b.n	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	f040 814b 	bne.w	8003a2e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b2:	f023 0302 	bic.w	r3, r3, #2
 80037b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3361      	adds	r3, #97	; 0x61
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d179      	bne.n	80038c0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3360      	adds	r3, #96	; 0x60
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	333f      	adds	r3, #63	; 0x3f
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d00a      	beq.n	8003808 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	333f      	adds	r3, #63	; 0x3f
 8003800:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	f040 80fc 	bne.w	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d142      	bne.n	8003896 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	334c      	adds	r3, #76	; 0x4c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80ed 	beq.w	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	334c      	adds	r3, #76	; 0x4c
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	202c      	movs	r0, #44	; 0x2c
 800383c:	fb00 f202 	mul.w	r2, r0, r2
 8003840:	440a      	add	r2, r1
 8003842:	3240      	adds	r2, #64	; 0x40
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	4413      	add	r3, r2
 8003848:	3b01      	subs	r3, #1
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	202c      	movs	r0, #44	; 0x2c
 8003850:	fb00 f202 	mul.w	r2, r0, r2
 8003854:	440a      	add	r2, r1
 8003856:	3240      	adds	r2, #64	; 0x40
 8003858:	8812      	ldrh	r2, [r2, #0]
 800385a:	fbb3 f3f2 	udiv	r3, r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80ca 	beq.w	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3355      	adds	r3, #85	; 0x55
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2d8      	uxtb	r0, r3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3355      	adds	r3, #85	; 0x55
 8003890:	4602      	mov	r2, r0
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e0b4      	b.n	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3355      	adds	r3, #85	; 0x55
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2d8      	uxtb	r0, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3355      	adds	r3, #85	; 0x55
 80038ba:	4602      	mov	r2, r0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e09f      	b.n	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3361      	adds	r3, #97	; 0x61
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d109      	bne.n	80038e8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3360      	adds	r3, #96	; 0x60
 80038e2:	2202      	movs	r2, #2
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e08b      	b.n	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3361      	adds	r3, #97	; 0x61
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d109      	bne.n	8003910 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3360      	adds	r3, #96	; 0x60
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e077      	b.n	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3361      	adds	r3, #97	; 0x61
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d109      	bne.n	8003938 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3360      	adds	r3, #96	; 0x60
 8003932:	2205      	movs	r2, #5
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e063      	b.n	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3361      	adds	r3, #97	; 0x61
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b06      	cmp	r3, #6
 800394a:	d009      	beq.n	8003960 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3361      	adds	r3, #97	; 0x61
 800395a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800395c:	2b08      	cmp	r3, #8
 800395e:	d14f      	bne.n	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	335c      	adds	r3, #92	; 0x5c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	202c      	movs	r0, #44	; 0x2c
 8003978:	fb00 f303 	mul.w	r3, r0, r3
 800397c:	440b      	add	r3, r1
 800397e:	335c      	adds	r3, #92	; 0x5c
 8003980:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	335c      	adds	r3, #92	; 0x5c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d912      	bls.n	80039bc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	335c      	adds	r3, #92	; 0x5c
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	2204      	movs	r2, #4
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e021      	b.n	8003a00 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3360      	adds	r3, #96	; 0x60
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039e4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039ec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	461a      	mov	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2302      	movs	r3, #2
 8003a10:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	b2d9      	uxtb	r1, r3
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	202c      	movs	r0, #44	; 0x2c
 8003a1c:	fb00 f303 	mul.w	r3, r0, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3360      	adds	r3, #96	; 0x60
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f005 fd2b 	bl	8009484 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a2e:	bf00      	nop
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b08a      	sub	sp, #40	; 0x28
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	0c5b      	lsrs	r3, r3, #17
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d004      	beq.n	8003a7c <HCD_RXQLVL_IRQHandler+0x46>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	f000 80a9 	beq.w	8003bcc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a7a:	e0aa      	b.n	8003bd2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80a6 	beq.w	8003bd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3344      	adds	r3, #68	; 0x44
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 809b 	beq.w	8003bd0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3350      	adds	r3, #80	; 0x50
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	441a      	add	r2, r3
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	202c      	movs	r0, #44	; 0x2c
 8003ab4:	fb00 f303 	mul.w	r3, r0, r3
 8003ab8:	440b      	add	r3, r1
 8003aba:	334c      	adds	r3, #76	; 0x4c
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d87a      	bhi.n	8003bb8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3344      	adds	r3, #68	; 0x44
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f002 feb3 	bl	8006846 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3344      	adds	r3, #68	; 0x44
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	441a      	add	r2, r3
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	202c      	movs	r0, #44	; 0x2c
 8003afa:	fb00 f303 	mul.w	r3, r0, r3
 8003afe:	440b      	add	r3, r1
 8003b00:	3344      	adds	r3, #68	; 0x44
 8003b02:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3350      	adds	r3, #80	; 0x50
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	441a      	add	r2, r3
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	202c      	movs	r0, #44	; 0x2c
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	440b      	add	r3, r1
 8003b24:	3350      	adds	r3, #80	; 0x50
 8003b26:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	0cdb      	lsrs	r3, r3, #19
 8003b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b3c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3340      	adds	r3, #64	; 0x40
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d13c      	bne.n	8003bd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d039      	beq.n	8003bd0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	3354      	adds	r3, #84	; 0x54
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2d8      	uxtb	r0, r3
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3354      	adds	r3, #84	; 0x54
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	701a      	strb	r2, [r3, #0]
      break;
 8003bb6:	e00b      	b.n	8003bd0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3360      	adds	r3, #96	; 0x60
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	701a      	strb	r2, [r3, #0]
      break;
 8003bca:	e001      	b.n	8003bd0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003bd0:	bf00      	nop
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3728      	adds	r7, #40	; 0x28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c06:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d10b      	bne.n	8003c2a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d102      	bne.n	8003c22 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f005 fc15 	bl	800944c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d132      	bne.n	8003c9a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f043 0308 	orr.w	r3, r3, #8
 8003c3a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d126      	bne.n	8003c94 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d113      	bne.n	8003c76 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c58:	d106      	bne.n	8003c68 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f002 ff2b 	bl	8006abc <USB_InitFSLSPClkSel>
 8003c66:	e011      	b.n	8003c8c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f002 ff24 	bl	8006abc <USB_InitFSLSPClkSel>
 8003c74:	e00a      	b.n	8003c8c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d106      	bne.n	8003c8c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c84:	461a      	mov	r2, r3
 8003c86:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c8a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f005 fc07 	bl	80094a0 <HAL_HCD_PortEnabled_Callback>
 8003c92:	e002      	b.n	8003c9a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f005 fc11 	bl	80094bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d103      	bne.n	8003cac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f043 0320 	orr.w	r3, r3, #32
 8003caa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6013      	str	r3, [r2, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e12b      	b.n	8003f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd f98e 	bl	8001008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d24:	f002 fa88 	bl	8006238 <HAL_RCC_GetPCLK1Freq>
 8003d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4a81      	ldr	r2, [pc, #516]	; (8003f34 <HAL_I2C_Init+0x274>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d807      	bhi.n	8003d44 <HAL_I2C_Init+0x84>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a80      	ldr	r2, [pc, #512]	; (8003f38 <HAL_I2C_Init+0x278>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	bf94      	ite	ls
 8003d3c:	2301      	movls	r3, #1
 8003d3e:	2300      	movhi	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e006      	b.n	8003d52 <HAL_I2C_Init+0x92>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a7d      	ldr	r2, [pc, #500]	; (8003f3c <HAL_I2C_Init+0x27c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	bf94      	ite	ls
 8003d4c:	2301      	movls	r3, #1
 8003d4e:	2300      	movhi	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0e7      	b.n	8003f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a78      	ldr	r2, [pc, #480]	; (8003f40 <HAL_I2C_Init+0x280>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0c9b      	lsrs	r3, r3, #18
 8003d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a6a      	ldr	r2, [pc, #424]	; (8003f34 <HAL_I2C_Init+0x274>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d802      	bhi.n	8003d94 <HAL_I2C_Init+0xd4>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3301      	adds	r3, #1
 8003d92:	e009      	b.n	8003da8 <HAL_I2C_Init+0xe8>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_I2C_Init+0x284>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	3301      	adds	r3, #1
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	495c      	ldr	r1, [pc, #368]	; (8003f34 <HAL_I2C_Init+0x274>)
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	d819      	bhi.n	8003dfc <HAL_I2C_Init+0x13c>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e59      	subs	r1, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd6:	1c59      	adds	r1, r3, #1
 8003dd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ddc:	400b      	ands	r3, r1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_I2C_Init+0x138>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1e59      	subs	r1, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df6:	e051      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	e04f      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d111      	bne.n	8003e28 <HAL_I2C_Init+0x168>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e58      	subs	r0, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	440b      	add	r3, r1
 8003e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e16:	3301      	adds	r3, #1
 8003e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e012      	b.n	8003e4e <HAL_I2C_Init+0x18e>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e58      	subs	r0, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	0099      	lsls	r1, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Init+0x196>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e022      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10e      	bne.n	8003e7c <HAL_I2C_Init+0x1bc>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1e58      	subs	r0, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	440b      	add	r3, r1
 8003e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7a:	e00f      	b.n	8003e9c <HAL_I2C_Init+0x1dc>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1e58      	subs	r0, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	0099      	lsls	r1, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	6809      	ldr	r1, [r1, #0]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6911      	ldr	r1, [r2, #16]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	000186a0 	.word	0x000186a0
 8003f38:	001e847f 	.word	0x001e847f
 8003f3c:	003d08ff 	.word	0x003d08ff
 8003f40:	431bde83 	.word	0x431bde83
 8003f44:	10624dd3 	.word	0x10624dd3

08003f48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	460b      	mov	r3, r1
 8003f56:	817b      	strh	r3, [r7, #10]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7fd fae4 	bl	8001528 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	f040 80e0 	bne.w	8004130 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2319      	movs	r3, #25
 8003f76:	2201      	movs	r2, #1
 8003f78:	4970      	ldr	r1, [pc, #448]	; (800413c <HAL_I2C_Master_Transmit+0x1f4>)
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fc58 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
 8003f88:	e0d3      	b.n	8004132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_I2C_Master_Transmit+0x50>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e0cc      	b.n	8004132 <HAL_I2C_Master_Transmit+0x1ea>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d007      	beq.n	8003fbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2221      	movs	r2, #33	; 0x21
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	893a      	ldrh	r2, [r7, #8]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a50      	ldr	r2, [pc, #320]	; (8004140 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004000:	8979      	ldrh	r1, [r7, #10]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	6a3a      	ldr	r2, [r7, #32]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fac2 	bl	8004590 <I2C_MasterRequestWrite>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e08d      	b.n	8004132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800402c:	e066      	b.n	80040fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	6a39      	ldr	r1, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fcd2 	bl	80049dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b04      	cmp	r3, #4
 8004044:	d107      	bne.n	8004056 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e06b      	b.n	8004132 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b04      	cmp	r3, #4
 8004096:	d11b      	bne.n	80040d0 <HAL_I2C_Master_Transmit+0x188>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d017      	beq.n	80040d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	6a39      	ldr	r1, [r7, #32]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fcc2 	bl	8004a5e <I2C_WaitOnBTFFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d107      	bne.n	80040f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e01a      	b.n	8004132 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d194      	bne.n	800402e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	e000      	b.n	8004132 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004130:	2302      	movs	r3, #2
  }
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	00100002 	.word	0x00100002
 8004140:	ffff0000 	.word	0xffff0000

08004144 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08c      	sub	sp, #48	; 0x30
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	461a      	mov	r2, r3
 8004150:	460b      	mov	r3, r1
 8004152:	817b      	strh	r3, [r7, #10]
 8004154:	4613      	mov	r3, r2
 8004156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7fd f9e6 	bl	8001528 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	f040 820b 	bne.w	8004582 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	2319      	movs	r3, #25
 8004172:	2201      	movs	r2, #1
 8004174:	497c      	ldr	r1, [pc, #496]	; (8004368 <HAL_I2C_Master_Receive+0x224>)
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fb5a 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	e1fe      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_I2C_Master_Receive+0x50>
 8004190:	2302      	movs	r3, #2
 8004192:	e1f7      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d007      	beq.n	80041ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2222      	movs	r2, #34	; 0x22
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2210      	movs	r2, #16
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	893a      	ldrh	r2, [r7, #8]
 80041ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a5c      	ldr	r2, [pc, #368]	; (800436c <HAL_I2C_Master_Receive+0x228>)
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041fc:	8979      	ldrh	r1, [r7, #10]
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fa46 	bl	8004694 <I2C_MasterRequestRead>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e1b8      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	2b00      	cmp	r3, #0
 8004218:	d113      	bne.n	8004242 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	623b      	str	r3, [r7, #32]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	623b      	str	r3, [r7, #32]
 800422e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e18c      	b.n	800455c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	2b01      	cmp	r3, #1
 8004248:	d11b      	bne.n	8004282 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e16c      	b.n	800455c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	2b02      	cmp	r3, #2
 8004288:	d11b      	bne.n	80042c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004298:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	e14c      	b.n	800455c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042e8:	e138      	b.n	800455c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	f200 80f1 	bhi.w	80044d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d123      	bne.n	8004344 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fbed 	bl	8004ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e139      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004342:	e10b      	b.n	800455c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	2b02      	cmp	r3, #2
 800434a:	d14e      	bne.n	80043ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2200      	movs	r2, #0
 8004354:	4906      	ldr	r1, [pc, #24]	; (8004370 <HAL_I2C_Master_Receive+0x22c>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fa6a 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e10e      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
 8004366:	bf00      	nop
 8004368:	00100002 	.word	0x00100002
 800436c:	ffff0000 	.word	0xffff0000
 8004370:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043e8:	e0b8      	b.n	800455c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	2200      	movs	r2, #0
 80043f2:	4966      	ldr	r1, [pc, #408]	; (800458c <HAL_I2C_Master_Receive+0x448>)
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fa1b 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0bf      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	2200      	movs	r2, #0
 800444e:	494f      	ldr	r1, [pc, #316]	; (800458c <HAL_I2C_Master_Receive+0x448>)
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9ed 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e091      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d4:	e042      	b.n	800455c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fb00 	bl	8004ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e04c      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b04      	cmp	r3, #4
 8004528:	d118      	bne.n	800455c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	f47f aec2 	bne.w	80042ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
  }
}
 8004584:	4618      	mov	r0, r3
 8004586:	3728      	adds	r7, #40	; 0x28
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	00010004 	.word	0x00010004

08004590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	460b      	mov	r3, r1
 800459e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d006      	beq.n	80045ba <I2C_MasterRequestWrite+0x2a>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d003      	beq.n	80045ba <I2C_MasterRequestWrite+0x2a>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b8:	d108      	bne.n	80045cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e00b      	b.n	80045e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b12      	cmp	r3, #18
 80045d2:	d107      	bne.n	80045e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f91d 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d103      	bne.n	8004614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e035      	b.n	8004684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004620:	d108      	bne.n	8004634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	e01b      	b.n	800466c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004634:	897b      	ldrh	r3, [r7, #10]
 8004636:	11db      	asrs	r3, r3, #7
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0306 	and.w	r3, r3, #6
 800463e:	b2db      	uxtb	r3, r3
 8004640:	f063 030f 	orn	r3, r3, #15
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	490e      	ldr	r1, [pc, #56]	; (800468c <I2C_MasterRequestWrite+0xfc>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f943 	bl	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e010      	b.n	8004684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4907      	ldr	r1, [pc, #28]	; (8004690 <I2C_MasterRequestWrite+0x100>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f933 	bl	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	00010008 	.word	0x00010008
 8004690:	00010002 	.word	0x00010002

08004694 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	460b      	mov	r3, r1
 80046a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d006      	beq.n	80046ce <I2C_MasterRequestRead+0x3a>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d003      	beq.n	80046ce <I2C_MasterRequestRead+0x3a>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046cc:	d108      	bne.n	80046e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e00b      	b.n	80046f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	2b11      	cmp	r3, #17
 80046e6:	d107      	bne.n	80046f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f893 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471e:	d103      	bne.n	8004728 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e079      	b.n	8004820 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004734:	d108      	bne.n	8004748 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004736:	897b      	ldrh	r3, [r7, #10]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	611a      	str	r2, [r3, #16]
 8004746:	e05f      	b.n	8004808 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004748:	897b      	ldrh	r3, [r7, #10]
 800474a:	11db      	asrs	r3, r3, #7
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0306 	and.w	r3, r3, #6
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f063 030f 	orn	r3, r3, #15
 8004758:	b2da      	uxtb	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4930      	ldr	r1, [pc, #192]	; (8004828 <I2C_MasterRequestRead+0x194>)
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f8b9 	bl	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e054      	b.n	8004820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4929      	ldr	r1, [pc, #164]	; (800482c <I2C_MasterRequestRead+0x198>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f8a9 	bl	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e044      	b.n	8004820 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f831 	bl	8004830 <I2C_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00d      	beq.n	80047f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	d103      	bne.n	80047ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e017      	b.n	8004820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047f0:	897b      	ldrh	r3, [r7, #10]
 80047f2:	11db      	asrs	r3, r3, #7
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f063 030e 	orn	r3, r3, #14
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4907      	ldr	r1, [pc, #28]	; (800482c <I2C_MasterRequestRead+0x198>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f865 	bl	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	00010008 	.word	0x00010008
 800482c:	00010002 	.word	0x00010002

08004830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004840:	e025      	b.n	800488e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d021      	beq.n	800488e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484a:	f7fc fe6d 	bl	8001528 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d116      	bne.n	800488e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f043 0220 	orr.w	r2, r3, #32
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e023      	b.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d10d      	bne.n	80048b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	e00c      	b.n	80048ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	43da      	mvns	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d0b6      	beq.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ec:	e051      	b.n	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fc:	d123      	bne.n	8004946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004916:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e046      	b.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d021      	beq.n	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fc fdeb 	bl	8001528 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d116      	bne.n	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e020      	b.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10c      	bne.n	80049b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	e00b      	b.n	80049ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	43da      	mvns	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4013      	ands	r3, r2
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d18d      	bne.n	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e8:	e02d      	b.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f8ce 	bl	8004b8c <I2C_IsAcknowledgeFailed>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e02d      	b.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d021      	beq.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a02:	f7fc fd91 	bl	8001528 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d116      	bne.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e007      	b.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a50:	2b80      	cmp	r3, #128	; 0x80
 8004a52:	d1ca      	bne.n	80049ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a6a:	e02d      	b.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f88d 	bl	8004b8c <I2C_IsAcknowledgeFailed>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e02d      	b.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d021      	beq.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a84:	f7fc fd50 	bl	8001528 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d302      	bcc.n	8004a9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d116      	bne.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f043 0220 	orr.w	r2, r3, #32
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e007      	b.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d1ca      	bne.n	8004a6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aec:	e042      	b.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d119      	bne.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0210 	mvn.w	r2, #16
 8004b04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e029      	b.n	8004b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b30:	f7fc fcfa 	bl	8001528 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d116      	bne.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e007      	b.n	8004b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d1b5      	bne.n	8004aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	d11b      	bne.n	8004bdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e128      	b.n	8004e50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a90      	ldr	r2, [pc, #576]	; (8004e58 <HAL_I2S_Init+0x26c>)
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fc fa3d 	bl	8001098 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c34:	f023 030f 	bic.w	r3, r3, #15
 8004c38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d060      	beq.n	8004d0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c52:	2310      	movs	r3, #16
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e001      	b.n	8004c5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d802      	bhi.n	8004c6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f001 fbda 	bl	8006424 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c70:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7a:	d125      	bne.n	8004cc8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d010      	beq.n	8004ca6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	3305      	adds	r3, #5
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	e01f      	b.n	8004ce6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	3305      	adds	r3, #5
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e00e      	b.n	8004ce6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	3305      	adds	r3, #5
 8004ce4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4a5c      	ldr	r2, [pc, #368]	; (8004e5c <HAL_I2S_Init+0x270>)
 8004cea:	fba2 2303 	umull	r2, r3, r2, r3
 8004cee:	08db      	lsrs	r3, r3, #3
 8004cf0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e003      	b.n	8004d14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d902      	bls.n	8004d20 <HAL_I2S_Init+0x134>
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	2bff      	cmp	r3, #255	; 0xff
 8004d1e:	d907      	bls.n	8004d30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	f043 0210 	orr.w	r2, r3, #16
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e08f      	b.n	8004e50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	ea42 0103 	orr.w	r1, r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d4e:	f023 030f 	bic.w	r3, r3, #15
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6851      	ldr	r1, [r2, #4]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	4311      	orrs	r1, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68d2      	ldr	r2, [r2, #12]
 8004d60:	4311      	orrs	r1, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6992      	ldr	r2, [r2, #24]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d161      	bne.n	8004e40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a38      	ldr	r2, [pc, #224]	; (8004e60 <HAL_I2S_Init+0x274>)
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a37      	ldr	r2, [pc, #220]	; (8004e64 <HAL_I2S_Init+0x278>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d101      	bne.n	8004d90 <HAL_I2S_Init+0x1a4>
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <HAL_I2S_Init+0x27c>)
 8004d8e:	e001      	b.n	8004d94 <HAL_I2S_Init+0x1a8>
 8004d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	4932      	ldr	r1, [pc, #200]	; (8004e64 <HAL_I2S_Init+0x278>)
 8004d9c:	428a      	cmp	r2, r1
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2S_Init+0x1b8>
 8004da0:	4a31      	ldr	r2, [pc, #196]	; (8004e68 <HAL_I2S_Init+0x27c>)
 8004da2:	e001      	b.n	8004da8 <HAL_I2S_Init+0x1bc>
 8004da4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004da8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004dac:	f023 030f 	bic.w	r3, r3, #15
 8004db0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <HAL_I2S_Init+0x278>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_I2S_Init+0x1d4>
 8004dbc:	4b2a      	ldr	r3, [pc, #168]	; (8004e68 <HAL_I2S_Init+0x27c>)
 8004dbe:	e001      	b.n	8004dc4 <HAL_I2S_Init+0x1d8>
 8004dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <HAL_I2S_Init+0x278>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <HAL_I2S_Init+0x1ea>
 8004dd2:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <HAL_I2S_Init+0x27c>)
 8004dd4:	e001      	b.n	8004dda <HAL_I2S_Init+0x1ee>
 8004dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de6:	d003      	beq.n	8004df0 <HAL_I2S_Init+0x204>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e001      	b.n	8004dfc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e06:	4313      	orrs	r3, r2
 8004e08:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e10:	4313      	orrs	r3, r2
 8004e12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	897b      	ldrh	r3, [r7, #10]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <HAL_I2S_Init+0x278>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d101      	bne.n	8004e38 <HAL_I2S_Init+0x24c>
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <HAL_I2S_Init+0x27c>)
 8004e36:	e001      	b.n	8004e3c <HAL_I2S_Init+0x250>
 8004e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e3c:	897a      	ldrh	r2, [r7, #10]
 8004e3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	08004f63 	.word	0x08004f63
 8004e5c:	cccccccd 	.word	0xcccccccd
 8004e60:	0800538d 	.word	0x0800538d
 8004e64:	40003800 	.word	0x40003800
 8004e68:	40003400 	.word	0x40003400

08004e6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10e      	bne.n	8004efc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004eec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ffb8 	bl	8004e6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	b292      	uxth	r2, r2
 8004f18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	1c9a      	adds	r2, r3, #2
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10e      	bne.n	8004f5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ff93 	bl	8004e80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d13a      	bne.n	8004ff4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d109      	bne.n	8004f9c <I2S_IRQHandler+0x3a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d102      	bne.n	8004f9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ffb4 	bl	8004f04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d126      	bne.n	8004ff4 <I2S_IRQHandler+0x92>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d11f      	bne.n	8004ff4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ff50 	bl	8004e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d136      	bne.n	800506e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d109      	bne.n	800501e <I2S_IRQHandler+0xbc>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d102      	bne.n	800501e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff ff45 	bl	8004ea8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d122      	bne.n	800506e <I2S_IRQHandler+0x10c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d11b      	bne.n	800506e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005044:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	f043 0204 	orr.w	r2, r3, #4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff ff13 	bl	8004e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d002      	beq.n	80050a4 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800509e:	2302      	movs	r3, #2
 80050a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050a2:	e160      	b.n	8005366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80050b0:	887b      	ldrh	r3, [r7, #2]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e15a      	b.n	8005370 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e152      	b.n	8005370 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d002      	beq.n	80050f6 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d114      	bne.n	8005120 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80050f6:	887b      	ldrh	r3, [r7, #2]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	865a      	strh	r2, [r3, #50]	; 0x32
 800511e:	e00b      	b.n	8005138 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	887a      	ldrh	r2, [r7, #2]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	887a      	ldrh	r2, [r7, #2]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	887a      	ldrh	r2, [r7, #2]
 8005136:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2205      	movs	r2, #5
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	4a8b      	ldr	r2, [pc, #556]	; (8005378 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800514c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	4a8a      	ldr	r2, [pc, #552]	; (800537c <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8005154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	4a89      	ldr	r2, [pc, #548]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800515c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	2200      	movs	r2, #0
 8005164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	2200      	movs	r2, #0
 800516c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	4a83      	ldr	r2, [pc, #524]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8005174:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005180:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005188:	d002      	beq.n	8005190 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d16b      	bne.n	8005268 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a79      	ldr	r2, [pc, #484]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80051a2:	4b79      	ldr	r3, [pc, #484]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80051a4:	e001      	b.n	80051aa <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80051a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051aa:	330c      	adds	r3, #12
 80051ac:	4619      	mov	r1, r3
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f7fc fba6 	bl	8001908 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a70      	ldr	r2, [pc, #448]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80051c6:	4b70      	ldr	r3, [pc, #448]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80051c8:	e001      	b.n	80051ce <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80051ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	496b      	ldr	r1, [pc, #428]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80051d6:	428b      	cmp	r3, r1
 80051d8:	d101      	bne.n	80051de <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80051da:	4b6b      	ldr	r3, [pc, #428]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80051dc:	e001      	b.n	80051e2 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80051de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80051e8:	f107 0308 	add.w	r3, r7, #8
 80051ec:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	461a      	mov	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005202:	b29b      	uxth	r3, r3
 8005204:	f7fc fb80 	bl	8001908 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0202 	orr.w	r2, r2, #2
 8005216:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005226:	f000 809e 	beq.w	8005366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a55      	ldr	r2, [pc, #340]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8005234:	4b54      	ldr	r3, [pc, #336]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005236:	e001      	b.n	800523c <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8005238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4950      	ldr	r1, [pc, #320]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005244:	428b      	cmp	r3, r1
 8005246:	d101      	bne.n	800524c <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8005248:	4b4f      	ldr	r3, [pc, #316]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800524a:	e001      	b.n	8005250 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 800524c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005254:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005264:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005266:	e07e      	b.n	8005366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005276:	d10a      	bne.n	800528e <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a38      	ldr	r2, [pc, #224]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80052a6:	4b38      	ldr	r3, [pc, #224]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80052a8:	e001      	b.n	80052ae <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80052aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ae:	330c      	adds	r3, #12
 80052b0:	461a      	mov	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f7fc fb26 	bl	8001908 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a30      	ldr	r2, [pc, #192]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80052c6:	4b30      	ldr	r3, [pc, #192]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80052c8:	e001      	b.n	80052ce <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80052ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	492b      	ldr	r1, [pc, #172]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80052d6:	428b      	cmp	r3, r1
 80052d8:	d101      	bne.n	80052de <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80052da:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80052dc:	e001      	b.n	80052e2 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80052de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052e2:	f042 0202 	orr.w	r2, r2, #2
 80052e6:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	4619      	mov	r1, r3
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005300:	b29b      	uxth	r3, r3
 8005302:	f7fc fb01 	bl	8001908 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d01e      	beq.n	8005364 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a16      	ldr	r2, [pc, #88]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005332:	e001      	b.n	8005338 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8005334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4911      	ldr	r1, [pc, #68]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005340:	428b      	cmp	r3, r1
 8005342:	d101      	bne.n	8005348 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005346:	e001      	b.n	800534c <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8005348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800534c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005350:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005360:	61da      	str	r2, [r3, #28]
 8005362:	e000      	b.n	8005366 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8005364:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800536e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08005635 	.word	0x08005635
 800537c:	08005651 	.word	0x08005651
 8005380:	08005729 	.word	0x08005729
 8005384:	40003800 	.word	0x40003800
 8005388:	40003400 	.word	0x40003400

0800538c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4aa2      	ldr	r2, [pc, #648]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80053a6:	4ba2      	ldr	r3, [pc, #648]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053a8:	e001      	b.n	80053ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80053aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a9b      	ldr	r2, [pc, #620]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d101      	bne.n	80053c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80053c4:	4b9a      	ldr	r3, [pc, #616]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053c6:	e001      	b.n	80053cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80053c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d8:	d004      	beq.n	80053e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 8099 	bne.w	8005516 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d107      	bne.n	80053fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f9d5 	bl	80057a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b01      	cmp	r3, #1
 8005406:	d107      	bne.n	8005418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa78 	bl	8005908 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d13a      	bne.n	8005498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d035      	beq.n	8005498 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a7e      	ldr	r2, [pc, #504]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005436:	4b7e      	ldr	r3, [pc, #504]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005438:	e001      	b.n	800543e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800543a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4979      	ldr	r1, [pc, #484]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005446:	428b      	cmp	r3, r1
 8005448:	d101      	bne.n	800544e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800544a:	4b79      	ldr	r3, [pc, #484]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800544c:	e001      	b.n	8005452 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800544e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005452:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005456:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005466:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	f043 0202 	orr.w	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fcfe 	bl	8004e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b08      	cmp	r3, #8
 80054a0:	f040 80be 	bne.w	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80b8 	beq.w	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a59      	ldr	r2, [pc, #356]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80054ca:	4b59      	ldr	r3, [pc, #356]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054cc:	e001      	b.n	80054d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80054ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4954      	ldr	r1, [pc, #336]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054da:	428b      	cmp	r3, r1
 80054dc:	d101      	bne.n	80054e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80054de:	4b54      	ldr	r3, [pc, #336]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054e0:	e001      	b.n	80054e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80054e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054ec:	2300      	movs	r3, #0
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	f043 0204 	orr.w	r2, r3, #4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fcc0 	bl	8004e94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005514:	e084      	b.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d107      	bne.n	8005530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f96e 	bl	800580c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f9ad 	bl	80058a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d12f      	bne.n	80055b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02a      	beq.n	80055b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800556c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2e      	ldr	r2, [pc, #184]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d101      	bne.n	800557c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005578:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800557a:	e001      	b.n	8005580 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800557c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4929      	ldr	r1, [pc, #164]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005588:	428b      	cmp	r3, r1
 800558a:	d101      	bne.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800558c:	4b28      	ldr	r3, [pc, #160]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800558e:	e001      	b.n	8005594 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005594:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005598:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	f043 0202 	orr.w	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fc70 	bl	8004e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d131      	bne.n	8005622 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02c      	beq.n	8005622 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d101      	bne.n	80055d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055d4:	e001      	b.n	80055da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80055d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4912      	ldr	r1, [pc, #72]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055e2:	428b      	cmp	r3, r1
 80055e4:	d101      	bne.n	80055ea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80055e6:	4b12      	ldr	r3, [pc, #72]	; (8005630 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055e8:	e001      	b.n	80055ee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80055ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005602:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005610:	f043 0204 	orr.w	r2, r3, #4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fc3b 	bl	8004e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800561e:	e000      	b.n	8005622 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005620:	bf00      	nop
}
 8005622:	bf00      	nop
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40003800 	.word	0x40003800
 8005630:	40003400 	.word	0x40003400

08005634 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7fb fc3e 	bl	8000ec4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d155      	bne.n	8005712 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d006      	beq.n	8005684 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8005680:	2b00      	cmp	r3, #0
 8005682:	d11e      	bne.n	80056c2 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a25      	ldr	r2, [pc, #148]	; (8005720 <I2SEx_TxRxDMACplt+0xd0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <I2SEx_TxRxDMACplt+0x42>
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <I2SEx_TxRxDMACplt+0xd4>)
 8005690:	e001      	b.n	8005696 <I2SEx_TxRxDMACplt+0x46>
 8005692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4920      	ldr	r1, [pc, #128]	; (8005720 <I2SEx_TxRxDMACplt+0xd0>)
 800569e:	428b      	cmp	r3, r1
 80056a0:	d101      	bne.n	80056a6 <I2SEx_TxRxDMACplt+0x56>
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <I2SEx_TxRxDMACplt+0xd4>)
 80056a4:	e001      	b.n	80056aa <I2SEx_TxRxDMACplt+0x5a>
 80056a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056aa:	f022 0201 	bic.w	r2, r2, #1
 80056ae:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0202 	bic.w	r2, r2, #2
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	e01d      	b.n	80056fe <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0201 	bic.w	r2, r2, #1
 80056d0:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <I2SEx_TxRxDMACplt+0xd0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d101      	bne.n	80056e0 <I2SEx_TxRxDMACplt+0x90>
 80056dc:	4b11      	ldr	r3, [pc, #68]	; (8005724 <I2SEx_TxRxDMACplt+0xd4>)
 80056de:	e001      	b.n	80056e4 <I2SEx_TxRxDMACplt+0x94>
 80056e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	490d      	ldr	r1, [pc, #52]	; (8005720 <I2SEx_TxRxDMACplt+0xd0>)
 80056ec:	428b      	cmp	r3, r1
 80056ee:	d101      	bne.n	80056f4 <I2SEx_TxRxDMACplt+0xa4>
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <I2SEx_TxRxDMACplt+0xd4>)
 80056f2:	e001      	b.n	80056f8 <I2SEx_TxRxDMACplt+0xa8>
 80056f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056f8:	f022 0202 	bic.w	r2, r2, #2
 80056fc:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7fb fc10 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40003800 	.word	0x40003800
 8005724:	40003400 	.word	0x40003400

08005728 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0203 	bic.w	r2, r2, #3
 8005744:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <I2SEx_TxRxDMAError+0x78>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d101      	bne.n	8005754 <I2SEx_TxRxDMAError+0x2c>
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <I2SEx_TxRxDMAError+0x7c>)
 8005752:	e001      	b.n	8005758 <I2SEx_TxRxDMAError+0x30>
 8005754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4910      	ldr	r1, [pc, #64]	; (80057a0 <I2SEx_TxRxDMAError+0x78>)
 8005760:	428b      	cmp	r3, r1
 8005762:	d101      	bne.n	8005768 <I2SEx_TxRxDMAError+0x40>
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <I2SEx_TxRxDMAError+0x7c>)
 8005766:	e001      	b.n	800576c <I2SEx_TxRxDMAError+0x44>
 8005768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800576c:	f022 0203 	bic.w	r2, r2, #3
 8005770:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	f043 0208 	orr.w	r2, r3, #8
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff fb7e 	bl	8004e94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005798:	bf00      	nop
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40003800 	.word	0x40003800
 80057a4:	40003400 	.word	0x40003400

080057a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	1c99      	adds	r1, r3, #2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6251      	str	r1, [r2, #36]	; 0x24
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d113      	bne.n	8005802 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fb fb9b 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	1c99      	adds	r1, r3, #2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6251      	str	r1, [r2, #36]	; 0x24
 800581e:	8819      	ldrh	r1, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1d      	ldr	r2, [pc, #116]	; (800589c <I2SEx_TxISR_I2SExt+0x90>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <I2SEx_TxISR_I2SExt+0x22>
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <I2SEx_TxISR_I2SExt+0x94>)
 800582c:	e001      	b.n	8005832 <I2SEx_TxISR_I2SExt+0x26>
 800582e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005832:	460a      	mov	r2, r1
 8005834:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d121      	bne.n	8005892 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a12      	ldr	r2, [pc, #72]	; (800589c <I2SEx_TxISR_I2SExt+0x90>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d101      	bne.n	800585c <I2SEx_TxISR_I2SExt+0x50>
 8005858:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <I2SEx_TxISR_I2SExt+0x94>)
 800585a:	e001      	b.n	8005860 <I2SEx_TxISR_I2SExt+0x54>
 800585c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	490d      	ldr	r1, [pc, #52]	; (800589c <I2SEx_TxISR_I2SExt+0x90>)
 8005868:	428b      	cmp	r3, r1
 800586a:	d101      	bne.n	8005870 <I2SEx_TxISR_I2SExt+0x64>
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <I2SEx_TxISR_I2SExt+0x94>)
 800586e:	e001      	b.n	8005874 <I2SEx_TxISR_I2SExt+0x68>
 8005870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005878:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fb fb53 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40003800 	.word	0x40003800
 80058a0:	40003400 	.word	0x40003400

080058a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68d8      	ldr	r0, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	1c99      	adds	r1, r3, #2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80058bc:	b282      	uxth	r2, r0
 80058be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d113      	bne.n	8005900 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb fb1c 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a20      	ldr	r2, [pc, #128]	; (8005998 <I2SEx_RxISR_I2SExt+0x90>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <I2SEx_RxISR_I2SExt+0x16>
 800591a:	4b20      	ldr	r3, [pc, #128]	; (800599c <I2SEx_RxISR_I2SExt+0x94>)
 800591c:	e001      	b.n	8005922 <I2SEx_RxISR_I2SExt+0x1a>
 800591e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005922:	68d8      	ldr	r0, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	1c99      	adds	r1, r3, #2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800592e:	b282      	uxth	r2, r0
 8005930:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d121      	bne.n	800598e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <I2SEx_RxISR_I2SExt+0x90>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d101      	bne.n	8005958 <I2SEx_RxISR_I2SExt+0x50>
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <I2SEx_RxISR_I2SExt+0x94>)
 8005956:	e001      	b.n	800595c <I2SEx_RxISR_I2SExt+0x54>
 8005958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	490d      	ldr	r1, [pc, #52]	; (8005998 <I2SEx_RxISR_I2SExt+0x90>)
 8005964:	428b      	cmp	r3, r1
 8005966:	d101      	bne.n	800596c <I2SEx_RxISR_I2SExt+0x64>
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <I2SEx_RxISR_I2SExt+0x94>)
 800596a:	e001      	b.n	8005970 <I2SEx_RxISR_I2SExt+0x68>
 800596c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005970:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005974:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fb fad5 	bl	8000f38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40003800 	.word	0x40003800
 800599c:	40003400 	.word	0x40003400

080059a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e264      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d075      	beq.n	8005aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059be:	4ba3      	ldr	r3, [pc, #652]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d00c      	beq.n	80059e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ca:	4ba0      	ldr	r3, [pc, #640]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d112      	bne.n	80059fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059d6:	4b9d      	ldr	r3, [pc, #628]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e2:	d10b      	bne.n	80059fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e4:	4b99      	ldr	r3, [pc, #612]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05b      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x108>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d157      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e23f      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a04:	d106      	bne.n	8005a14 <HAL_RCC_OscConfig+0x74>
 8005a06:	4b91      	ldr	r3, [pc, #580]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a90      	ldr	r2, [pc, #576]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e01d      	b.n	8005a50 <HAL_RCC_OscConfig+0xb0>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x98>
 8005a1e:	4b8b      	ldr	r3, [pc, #556]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a8a      	ldr	r2, [pc, #552]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	4b88      	ldr	r3, [pc, #544]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a87      	ldr	r2, [pc, #540]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	e00b      	b.n	8005a50 <HAL_RCC_OscConfig+0xb0>
 8005a38:	4b84      	ldr	r3, [pc, #528]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a83      	ldr	r2, [pc, #524]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	4b81      	ldr	r3, [pc, #516]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a80      	ldr	r2, [pc, #512]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d013      	beq.n	8005a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fb fd66 	bl	8001528 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fb fd62 	bl	8001528 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e204      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a72:	4b76      	ldr	r3, [pc, #472]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0xc0>
 8005a7e:	e014      	b.n	8005aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a80:	f7fb fd52 	bl	8001528 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a88:	f7fb fd4e 	bl	8001528 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	; 0x64
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e1f0      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a9a:	4b6c      	ldr	r3, [pc, #432]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0xe8>
 8005aa6:	e000      	b.n	8005aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d063      	beq.n	8005b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ab6:	4b65      	ldr	r3, [pc, #404]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac2:	4b62      	ldr	r3, [pc, #392]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d11c      	bne.n	8005b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ace:	4b5f      	ldr	r3, [pc, #380]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d116      	bne.n	8005b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ada:	4b5c      	ldr	r3, [pc, #368]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_RCC_OscConfig+0x152>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d001      	beq.n	8005af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e1c4      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af2:	4b56      	ldr	r3, [pc, #344]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4952      	ldr	r1, [pc, #328]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b06:	e03a      	b.n	8005b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d020      	beq.n	8005b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b10:	4b4f      	ldr	r3, [pc, #316]	; (8005c50 <HAL_RCC_OscConfig+0x2b0>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b16:	f7fb fd07 	bl	8001528 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b1e:	f7fb fd03 	bl	8001528 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e1a5      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b30:	4b46      	ldr	r3, [pc, #280]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0f0      	beq.n	8005b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3c:	4b43      	ldr	r3, [pc, #268]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4940      	ldr	r1, [pc, #256]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]
 8005b50:	e015      	b.n	8005b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b52:	4b3f      	ldr	r3, [pc, #252]	; (8005c50 <HAL_RCC_OscConfig+0x2b0>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fb fce6 	bl	8001528 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b60:	f7fb fce2 	bl	8001528 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e184      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b72:	4b36      	ldr	r3, [pc, #216]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d030      	beq.n	8005bec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b92:	4b30      	ldr	r3, [pc, #192]	; (8005c54 <HAL_RCC_OscConfig+0x2b4>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b98:	f7fb fcc6 	bl	8001528 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba0:	f7fb fcc2 	bl	8001528 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e164      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bb2:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x200>
 8005bbe:	e015      	b.n	8005bec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc0:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCC_OscConfig+0x2b4>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc6:	f7fb fcaf 	bl	8001528 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bce:	f7fb fcab 	bl	8001528 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e14d      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80a0 	beq.w	8005d3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c18:	6413      	str	r3, [r2, #64]	; 0x40
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_RCC_OscConfig+0x2b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d121      	bne.n	8005c7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c36:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <HAL_RCC_OscConfig+0x2b8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a07      	ldr	r2, [pc, #28]	; (8005c58 <HAL_RCC_OscConfig+0x2b8>)
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c42:	f7fb fc71 	bl	8001528 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c48:	e011      	b.n	8005c6e <HAL_RCC_OscConfig+0x2ce>
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	42470000 	.word	0x42470000
 8005c54:	42470e80 	.word	0x42470e80
 8005c58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5c:	f7fb fc64 	bl	8001528 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e106      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	4b85      	ldr	r3, [pc, #532]	; (8005e84 <HAL_RCC_OscConfig+0x4e4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d106      	bne.n	8005c90 <HAL_RCC_OscConfig+0x2f0>
 8005c82:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	4a80      	ldr	r2, [pc, #512]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8e:	e01c      	b.n	8005cca <HAL_RCC_OscConfig+0x32a>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b05      	cmp	r3, #5
 8005c96:	d10c      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x312>
 8005c98:	4b7b      	ldr	r3, [pc, #492]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9c:	4a7a      	ldr	r2, [pc, #488]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005c9e:	f043 0304 	orr.w	r3, r3, #4
 8005ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca4:	4b78      	ldr	r3, [pc, #480]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca8:	4a77      	ldr	r2, [pc, #476]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb0:	e00b      	b.n	8005cca <HAL_RCC_OscConfig+0x32a>
 8005cb2:	4b75      	ldr	r3, [pc, #468]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a74      	ldr	r2, [pc, #464]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbe:	4b72      	ldr	r3, [pc, #456]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	4a71      	ldr	r2, [pc, #452]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
 8005cc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d015      	beq.n	8005cfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd2:	f7fb fc29 	bl	8001528 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cda:	f7fb fc25 	bl	8001528 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e0c5      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf0:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0ee      	beq.n	8005cda <HAL_RCC_OscConfig+0x33a>
 8005cfc:	e014      	b.n	8005d28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfe:	f7fb fc13 	bl	8001528 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d04:	e00a      	b.n	8005d1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d06:	f7fb fc0f 	bl	8001528 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e0af      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d1c:	4b5a      	ldr	r3, [pc, #360]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ee      	bne.n	8005d06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d105      	bne.n	8005d3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2e:	4b56      	ldr	r3, [pc, #344]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	4a55      	ldr	r2, [pc, #340]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 809b 	beq.w	8005e7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d44:	4b50      	ldr	r3, [pc, #320]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 030c 	and.w	r3, r3, #12
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d05c      	beq.n	8005e0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d141      	bne.n	8005ddc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d58:	4b4c      	ldr	r3, [pc, #304]	; (8005e8c <HAL_RCC_OscConfig+0x4ec>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5e:	f7fb fbe3 	bl	8001528 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d66:	f7fb fbdf 	bl	8001528 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e081      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d78:	4b43      	ldr	r3, [pc, #268]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1f0      	bne.n	8005d66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	019b      	lsls	r3, r3, #6
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	4937      	ldr	r1, [pc, #220]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dae:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <HAL_RCC_OscConfig+0x4ec>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db4:	f7fb fbb8 	bl	8001528 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dbc:	f7fb fbb4 	bl	8001528 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e056      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCC_OscConfig+0x41c>
 8005dda:	e04e      	b.n	8005e7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ddc:	4b2b      	ldr	r3, [pc, #172]	; (8005e8c <HAL_RCC_OscConfig+0x4ec>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de2:	f7fb fba1 	bl	8001528 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dea:	f7fb fb9d 	bl	8001528 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e03f      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <HAL_RCC_OscConfig+0x44a>
 8005e08:	e037      	b.n	8005e7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e032      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <HAL_RCC_OscConfig+0x4e8>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d028      	beq.n	8005e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d121      	bne.n	8005e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d11a      	bne.n	8005e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e46:	4013      	ands	r3, r2
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d111      	bne.n	8005e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d107      	bne.n	8005e76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d001      	beq.n	8005e7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40007000 	.word	0x40007000
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	42470060 	.word	0x42470060

08005e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0cc      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea4:	4b68      	ldr	r3, [pc, #416]	; (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d90c      	bls.n	8005ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb2:	4b65      	ldr	r3, [pc, #404]	; (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b63      	ldr	r3, [pc, #396]	; (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0b8      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee4:	4b59      	ldr	r3, [pc, #356]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4a58      	ldr	r2, [pc, #352]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005efc:	4b53      	ldr	r3, [pc, #332]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4a52      	ldr	r2, [pc, #328]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f08:	4b50      	ldr	r3, [pc, #320]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	494d      	ldr	r1, [pc, #308]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d044      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d107      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d119      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e07f      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d107      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4e:	4b3f      	ldr	r3, [pc, #252]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d109      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e06f      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e067      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f6e:	4b37      	ldr	r3, [pc, #220]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f023 0203 	bic.w	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4934      	ldr	r1, [pc, #208]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f80:	f7fb fad2 	bl	8001528 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f86:	e00a      	b.n	8005f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f88:	f7fb face 	bl	8001528 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e04f      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9e:	4b2b      	ldr	r3, [pc, #172]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 020c 	and.w	r2, r3, #12
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d1eb      	bne.n	8005f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb0:	4b25      	ldr	r3, [pc, #148]	; (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d20c      	bcs.n	8005fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbe:	4b22      	ldr	r3, [pc, #136]	; (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	4b20      	ldr	r3, [pc, #128]	; (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e032      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4916      	ldr	r1, [pc, #88]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	490e      	ldr	r1, [pc, #56]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006016:	f000 f821 	bl	800605c <HAL_RCC_GetSysClockFreq>
 800601a:	4602      	mov	r2, r0
 800601c:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	091b      	lsrs	r3, r3, #4
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	490a      	ldr	r1, [pc, #40]	; (8006050 <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	5ccb      	ldrb	r3, [r1, r3]
 800602a:	fa22 f303 	lsr.w	r3, r2, r3
 800602e:	4a09      	ldr	r2, [pc, #36]	; (8006054 <HAL_RCC_ClockConfig+0x1c4>)
 8006030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <HAL_RCC_ClockConfig+0x1c8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fb fa32 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40023c00 	.word	0x40023c00
 800604c:	40023800 	.word	0x40023800
 8006050:	0800a5e4 	.word	0x0800a5e4
 8006054:	20000000 	.word	0x20000000
 8006058:	20000004 	.word	0x20000004

0800605c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800605c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	2300      	movs	r3, #0
 800606e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006074:	4b67      	ldr	r3, [pc, #412]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b08      	cmp	r3, #8
 800607e:	d00d      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0x40>
 8006080:	2b08      	cmp	r3, #8
 8006082:	f200 80bd 	bhi.w	8006200 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0x34>
 800608a:	2b04      	cmp	r3, #4
 800608c:	d003      	beq.n	8006096 <HAL_RCC_GetSysClockFreq+0x3a>
 800608e:	e0b7      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006090:	4b61      	ldr	r3, [pc, #388]	; (8006218 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006092:	60bb      	str	r3, [r7, #8]
       break;
 8006094:	e0b7      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006096:	4b61      	ldr	r3, [pc, #388]	; (800621c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006098:	60bb      	str	r3, [r7, #8]
      break;
 800609a:	e0b4      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800609c:	4b5d      	ldr	r3, [pc, #372]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060a6:	4b5b      	ldr	r3, [pc, #364]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d04d      	beq.n	800614e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b2:	4b58      	ldr	r3, [pc, #352]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	461a      	mov	r2, r3
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	ea02 0800 	and.w	r8, r2, r0
 80060ca:	ea03 0901 	and.w	r9, r3, r1
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	014b      	lsls	r3, r1, #5
 80060dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060e0:	0142      	lsls	r2, r0, #5
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	ebb0 0008 	subs.w	r0, r0, r8
 80060ea:	eb61 0109 	sbc.w	r1, r1, r9
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	018b      	lsls	r3, r1, #6
 80060f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060fc:	0182      	lsls	r2, r0, #6
 80060fe:	1a12      	subs	r2, r2, r0
 8006100:	eb63 0301 	sbc.w	r3, r3, r1
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f04f 0100 	mov.w	r1, #0
 800610c:	00d9      	lsls	r1, r3, #3
 800610e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006112:	00d0      	lsls	r0, r2, #3
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	eb12 0208 	adds.w	r2, r2, r8
 800611c:	eb43 0309 	adc.w	r3, r3, r9
 8006120:	f04f 0000 	mov.w	r0, #0
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	0259      	lsls	r1, r3, #9
 800612a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800612e:	0250      	lsls	r0, r2, #9
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	461a      	mov	r2, r3
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	f7fa f842 	bl	80001c8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4613      	mov	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	e04a      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614e:	4b31      	ldr	r3, [pc, #196]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	099b      	lsrs	r3, r3, #6
 8006154:	461a      	mov	r2, r3
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	ea02 0400 	and.w	r4, r2, r0
 8006166:	ea03 0501 	and.w	r5, r3, r1
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	014b      	lsls	r3, r1, #5
 8006178:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800617c:	0142      	lsls	r2, r0, #5
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	1b00      	subs	r0, r0, r4
 8006184:	eb61 0105 	sbc.w	r1, r1, r5
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	018b      	lsls	r3, r1, #6
 8006192:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006196:	0182      	lsls	r2, r0, #6
 8006198:	1a12      	subs	r2, r2, r0
 800619a:	eb63 0301 	sbc.w	r3, r3, r1
 800619e:	f04f 0000 	mov.w	r0, #0
 80061a2:	f04f 0100 	mov.w	r1, #0
 80061a6:	00d9      	lsls	r1, r3, #3
 80061a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ac:	00d0      	lsls	r0, r2, #3
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	1912      	adds	r2, r2, r4
 80061b4:	eb45 0303 	adc.w	r3, r5, r3
 80061b8:	f04f 0000 	mov.w	r0, #0
 80061bc:	f04f 0100 	mov.w	r1, #0
 80061c0:	0299      	lsls	r1, r3, #10
 80061c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061c6:	0290      	lsls	r0, r2, #10
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4610      	mov	r0, r2
 80061ce:	4619      	mov	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	f7f9 fff6 	bl	80001c8 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4613      	mov	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	3301      	adds	r3, #1
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	60bb      	str	r3, [r7, #8]
      break;
 80061fe:	e002      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006202:	60bb      	str	r3, [r7, #8]
      break;
 8006204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006206:	68bb      	ldr	r3, [r7, #8]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800
 8006218:	00f42400 	.word	0x00f42400
 800621c:	007a1200 	.word	0x007a1200

08006220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <HAL_RCC_GetHCLKFreq+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000000 	.word	0x20000000

08006238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800623c:	f7ff fff0 	bl	8006220 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0a9b      	lsrs	r3, r3, #10
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	; (800625c <HAL_RCC_GetPCLK1Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	0800a5f4 	.word	0x0800a5f4

08006260 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006284:	2b00      	cmp	r3, #0
 8006286:	d035      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006288:	4b62      	ldr	r3, [pc, #392]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800628e:	f7fb f94b 	bl	8001528 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006294:	e008      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006296:	f7fb f947 	bl	8001528 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e0b0      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a8:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f0      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	019a      	lsls	r2, r3, #6
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	071b      	lsls	r3, r3, #28
 80062c0:	4955      	ldr	r1, [pc, #340]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062c8:	4b52      	ldr	r3, [pc, #328]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062ce:	f7fb f92b 	bl	8001528 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062d4:	e008      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062d6:	f7fb f927 	bl	8001528 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e090      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062e8:	4b4b      	ldr	r3, [pc, #300]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8083 	beq.w	8006408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	4b44      	ldr	r3, [pc, #272]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	4a43      	ldr	r2, [pc, #268]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006310:	6413      	str	r3, [r2, #64]	; 0x40
 8006312:	4b41      	ldr	r3, [pc, #260]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800631e:	4b3f      	ldr	r3, [pc, #252]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a3e      	ldr	r2, [pc, #248]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800632a:	f7fb f8fd 	bl	8001528 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006332:	f7fb f8f9 	bl	8001528 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e062      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006344:	4b35      	ldr	r3, [pc, #212]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006350:	4b31      	ldr	r3, [pc, #196]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006358:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d02f      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d028      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006376:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006378:	4b29      	ldr	r3, [pc, #164]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800637e:	4b28      	ldr	r3, [pc, #160]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006384:	4a24      	ldr	r2, [pc, #144]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800638a:	4b23      	ldr	r3, [pc, #140]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b01      	cmp	r3, #1
 8006394:	d114      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006396:	f7fb f8c7 	bl	8001528 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800639c:	e00a      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800639e:	f7fb f8c3 	bl	8001528 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e02a      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b4:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ee      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063cc:	d10d      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e2:	490d      	ldr	r1, [pc, #52]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	608b      	str	r3, [r1, #8]
 80063e8:	e005      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063f4:	6093      	str	r3, [r2, #8]
 80063f6:	4b08      	ldr	r3, [pc, #32]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006402:	4905      	ldr	r1, [pc, #20]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006404:	4313      	orrs	r3, r2
 8006406:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	42470068 	.word	0x42470068
 8006418:	40023800 	.word	0x40023800
 800641c:	40007000 	.word	0x40007000
 8006420:	42470e40 	.word	0x42470e40

08006424 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d13e      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006442:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d12f      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800645a:	617b      	str	r3, [r7, #20]
          break;
 800645c:	e02f      	b.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800645e:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800646a:	d108      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800646c:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006474:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e007      	b.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006486:	4a15      	ldr	r2, [pc, #84]	; (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006488:	fbb2 f3f3 	udiv	r3, r2, r3
 800648c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006494:	099b      	lsrs	r3, r3, #6
 8006496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a8:	0f1b      	lsrs	r3, r3, #28
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]
          break;
 80064b6:	e002      	b.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
          break;
 80064bc:	bf00      	nop
        }
      }
      break;
 80064be:	bf00      	nop
    }
  }
  return frequency;
 80064c0:	697b      	ldr	r3, [r7, #20]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800
 80064d4:	00bb8000 	.word	0x00bb8000
 80064d8:	007a1200 	.word	0x007a1200
 80064dc:	00f42400 	.word	0x00f42400

080064e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e07b      	b.n	80065ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006502:	d009      	beq.n	8006518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	61da      	str	r2, [r3, #28]
 800650a:	e005      	b.n	8006518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fa fe90 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	ea42 0103 	orr.w	r1, r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	f003 0104 	and.w	r1, r3, #4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	f003 0210 	and.w	r2, r3, #16
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065f2:	b084      	sub	sp, #16
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	f107 001c 	add.w	r0, r7, #28
 8006600:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	2b01      	cmp	r3, #1
 8006608:	d122      	bne.n	8006650 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800661e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d105      	bne.n	8006644 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f949 	bl	80068dc <USB_CoreReset>
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	e01a      	b.n	8006686 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f93d 	bl	80068dc <USB_CoreReset>
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
 8006678:	e005      	b.n	8006686 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10b      	bne.n	80066a4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f043 0206 	orr.w	r2, r3, #6
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066b0:	b004      	add	sp, #16
 80066b2:	4770      	bx	lr

080066b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f023 0201 	bic.w	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d106      	bne.n	8006724 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	e00b      	b.n	800673c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	e001      	b.n	800673c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e003      	b.n	8006744 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800673c:	2032      	movs	r0, #50	; 0x32
 800673e:	f7fa feff 	bl	8001540 <HAL_Delay>

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	019b      	lsls	r3, r3, #6
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a09      	ldr	r2, [pc, #36]	; (8006794 <USB_FlushTxFifo+0x48>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d901      	bls.n	8006778 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e006      	b.n	8006786 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b20      	cmp	r3, #32
 8006782:	d0f0      	beq.n	8006766 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	00030d40 	.word	0x00030d40

08006798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2210      	movs	r2, #16
 80067a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <USB_FlushRxFifo+0x40>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e006      	b.n	80067ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	d0f0      	beq.n	80067aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	00030d40 	.word	0x00030d40

080067dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067dc:	b480      	push	{r7}
 80067de:	b089      	sub	sp, #36	; 0x24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	460b      	mov	r3, r1
 80067ec:	71fb      	strb	r3, [r7, #7]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80067fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d11a      	bne.n	8006838 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006802:	88bb      	ldrh	r3, [r7, #4]
 8006804:	3303      	adds	r3, #3
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800680a:	2300      	movs	r3, #0
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	e00f      	b.n	8006830 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	031a      	lsls	r2, r3, #12
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4413      	add	r3, r2
 8006818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681c:	461a      	mov	r2, r3
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	3304      	adds	r3, #4
 8006828:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	3301      	adds	r3, #1
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	d3eb      	bcc.n	8006810 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3724      	adds	r7, #36	; 0x24
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006846:	b480      	push	{r7}
 8006848:	b089      	sub	sp, #36	; 0x24
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	4613      	mov	r3, r2
 8006852:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	3303      	adds	r3, #3
 8006860:	089b      	lsrs	r3, r3, #2
 8006862:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006864:	2300      	movs	r3, #0
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	e00b      	b.n	8006882 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	601a      	str	r2, [r3, #0]
    pDest++;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3304      	adds	r3, #4
 800687a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	3301      	adds	r3, #1
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	429a      	cmp	r2, r3
 8006888:	d3ef      	bcc.n	800686a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800688a:	69fb      	ldr	r3, [r7, #28]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3724      	adds	r7, #36	; 0x24
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4013      	ands	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068b0:	68fb      	ldr	r3, [r7, #12]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0301 	and.w	r3, r3, #1
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <USB_CoreReset+0x64>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e01b      	b.n	8006932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	daf2      	bge.n	80068e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f043 0201 	orr.w	r2, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <USB_CoreReset+0x64>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d901      	bls.n	8006924 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e006      	b.n	8006932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d0f0      	beq.n	8006912 <USB_CoreReset+0x36>

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	00030d40 	.word	0x00030d40

08006944 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006944:	b084      	sub	sp, #16
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	f107 001c 	add.w	r0, r7, #28
 8006952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d018      	beq.n	80069c8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	2b01      	cmp	r3, #1
 800699a:	d10a      	bne.n	80069b2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069aa:	f043 0304 	orr.w	r3, r3, #4
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e014      	b.n	80069dc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069c0:	f023 0304 	bic.w	r3, r3, #4
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e009      	b.n	80069dc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069d6:	f023 0304 	bic.w	r3, r3, #4
 80069da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80069dc:	2110      	movs	r1, #16
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff feb4 	bl	800674c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff fed7 	bl	8006798 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e015      	b.n	8006a1c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fc:	461a      	mov	r2, r3
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006a02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	461a      	mov	r2, r3
 8006a12:	2300      	movs	r3, #0
 8006a14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d3e5      	bcc.n	80069f0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006a24:	2101      	movs	r1, #1
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8ac 	bl	8006b84 <USB_DriveVbus>

  HAL_Delay(200U);
 8006a2c:	20c8      	movs	r0, #200	; 0xc8
 8006a2e:	f7fa fd87 	bl	8001540 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <USB_HostInit+0x164>)
 8006a58:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <USB_HostInit+0x168>)
 8006a5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a62:	e009      	b.n	8006a78 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a10      	ldr	r2, [pc, #64]	; (8006ab0 <USB_HostInit+0x16c>)
 8006a6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <USB_HostInit+0x170>)
 8006a74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f043 0210 	orr.w	r2, r3, #16
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <USB_HostInit+0x174>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aa2:	b004      	add	sp, #16
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	01000200 	.word	0x01000200
 8006aac:	00e00300 	.word	0x00e00300
 8006ab0:	00600080 	.word	0x00600080
 8006ab4:	004000e0 	.word	0x004000e0
 8006ab8:	a3200008 	.word	0xa3200008

08006abc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d107      	bne.n	8006b0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b04:	461a      	mov	r2, r3
 8006b06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b0a:	6053      	str	r3, [r2, #4]
 8006b0c:	e009      	b.n	8006b22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d106      	bne.n	8006b22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b60:	2064      	movs	r0, #100	; 0x64
 8006b62:	f7fa fced 	bl	8001540 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006b74:	200a      	movs	r0, #10
 8006b76:	f7fa fce3 	bl	8001540 <HAL_Delay>

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ba8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <USB_DriveVbus+0x44>
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d106      	bne.n	8006bc8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bc6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd2:	d109      	bne.n	8006be8 <USB_DriveVbus+0x64>
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	0c5b      	lsrs	r3, r3, #17
 8006c14:	f003 0303 	and.w	r3, r3, #3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	b29b      	uxth	r3, r3
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	70fb      	strb	r3, [r7, #3]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	70bb      	strb	r3, [r7, #2]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c76:	461a      	mov	r2, r3
 8006c78:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d87e      	bhi.n	8006d84 <USB_HC_Init+0x13c>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USB_HC_Init+0x44>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006d47 	.word	0x08006d47
 8006c94:	08006c9d 	.word	0x08006c9d
 8006c98:	08006d09 	.word	0x08006d09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f240 439d 	movw	r3, #1181	; 0x49d
 8006cae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006cb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	da10      	bge.n	8006cda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006cd8:	e057      	b.n	8006d8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d051      	beq.n	8006d8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d04:	60d3      	str	r3, [r2, #12]
      break;
 8006d06:	e040      	b.n	8006d8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d14:	461a      	mov	r2, r3
 8006d16:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	da34      	bge.n	8006d8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d44:	e023      	b.n	8006d8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d52:	461a      	mov	r2, r3
 8006d54:	f240 2325 	movw	r3, #549	; 0x225
 8006d58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da17      	bge.n	8006d92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d82:	e006      	b.n	8006d92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	77fb      	strb	r3, [r7, #31]
      break;
 8006d88:	e004      	b.n	8006d94 <USB_HC_Init+0x14c>
      break;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <USB_HC_Init+0x14c>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <USB_HC_Init+0x14c>
      break;
 8006d92:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	2101      	movs	r1, #1
 8006da4:	fa01 f303 	lsl.w	r3, r1, r3
 8006da8:	6939      	ldr	r1, [r7, #16]
 8006daa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dae:	4313      	orrs	r3, r2
 8006db0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006dbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da03      	bge.n	8006dce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	e001      	b.n	8006dd2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff ff0f 	bl	8006bf6 <USB_GetHostSpeed>
 8006dd8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006dda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d106      	bne.n	8006df0 <USB_HC_Init+0x1a8>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d003      	beq.n	8006df0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	e001      	b.n	8006df4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006df4:	787b      	ldrb	r3, [r7, #1]
 8006df6:	059b      	lsls	r3, r3, #22
 8006df8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dfc:	78bb      	ldrb	r3, [r7, #2]
 8006dfe:	02db      	lsls	r3, r3, #11
 8006e00:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e04:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e0a:	049b      	lsls	r3, r3, #18
 8006e0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	0159      	lsls	r1, r3, #5
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	440b      	add	r3, r1
 8006e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e30:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006e32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d10f      	bne.n	8006e5a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e58:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08c      	sub	sp, #48	; 0x30
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d02d      	beq.n	8006eea <USB_HC_StartXfer+0x86>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	791b      	ldrb	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d129      	bne.n	8006eea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d117      	bne.n	8006ecc <USB_HC_StartXfer+0x68>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	79db      	ldrb	r3, [r3, #7]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <USB_HC_StartXfer+0x48>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	79db      	ldrb	r3, [r3, #7]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d10f      	bne.n	8006ecc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	6a3a      	ldr	r2, [r7, #32]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <USB_HC_StartXfer+0x86>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	795b      	ldrb	r3, [r3, #5]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d107      	bne.n	8006eea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	785b      	ldrb	r3, [r3, #1]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fa2f 	bl	8007344 <USB_DoPing>
      return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e0f8      	b.n	80070dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d018      	beq.n	8006f24 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	8912      	ldrh	r2, [r2, #8]
 8006efa:	4413      	add	r3, r2
 8006efc:	3b01      	subs	r3, #1
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	8912      	ldrh	r2, [r2, #8]
 8006f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f06:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006f08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f0a:	8b7b      	ldrh	r3, [r7, #26]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d90b      	bls.n	8006f28 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006f10:	8b7b      	ldrh	r3, [r7, #26]
 8006f12:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	8912      	ldrh	r2, [r2, #8]
 8006f1a:	fb02 f203 	mul.w	r2, r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	611a      	str	r2, [r3, #16]
 8006f22:	e001      	b.n	8006f28 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006f24:	2301      	movs	r3, #1
 8006f26:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	78db      	ldrb	r3, [r3, #3]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	8912      	ldrh	r2, [r2, #8]
 8006f36:	fb02 f203 	mul.w	r2, r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	611a      	str	r2, [r3, #16]
 8006f3e:	e003      	b.n	8006f48 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f52:	04d9      	lsls	r1, r3, #19
 8006f54:	4b63      	ldr	r3, [pc, #396]	; (80070e4 <USB_HC_StartXfer+0x280>)
 8006f56:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f58:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	7a9b      	ldrb	r3, [r3, #10]
 8006f5e:	075b      	lsls	r3, r3, #29
 8006f60:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	0148      	lsls	r0, r1, #5
 8006f68:	6a39      	ldr	r1, [r7, #32]
 8006f6a:	4401      	add	r1, r0
 8006f6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f70:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f72:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	68d9      	ldr	r1, [r3, #12]
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	6a3a      	ldr	r2, [r7, #32]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fc4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	7e7b      	ldrb	r3, [r7, #25]
 8006fd6:	075b      	lsls	r3, r3, #29
 8006fd8:	69f9      	ldr	r1, [r7, #28]
 8006fda:	0148      	lsls	r0, r1, #5
 8006fdc:	6a39      	ldr	r1, [r7, #32]
 8006fde:	4401      	add	r1, r0
 8006fe0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ffe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	78db      	ldrb	r3, [r3, #3]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d004      	beq.n	8007012 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	e003      	b.n	800701a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007018:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007020:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	4413      	add	r3, r2
 800702a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702e:	461a      	mov	r2, r3
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e04e      	b.n	80070dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	78db      	ldrb	r3, [r3, #3]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d149      	bne.n	80070da <USB_HC_StartXfer+0x276>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d045      	beq.n	80070da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	79db      	ldrb	r3, [r3, #7]
 8007052:	2b03      	cmp	r3, #3
 8007054:	d830      	bhi.n	80070b8 <USB_HC_StartXfer+0x254>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <USB_HC_StartXfer+0x1f8>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	0800706d 	.word	0x0800706d
 8007060:	08007091 	.word	0x08007091
 8007064:	0800706d 	.word	0x0800706d
 8007068:	08007091 	.word	0x08007091
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	3303      	adds	r3, #3
 8007072:	089b      	lsrs	r3, r3, #2
 8007074:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007076:	8afa      	ldrh	r2, [r7, #22]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	b29b      	uxth	r3, r3
 800707e:	429a      	cmp	r2, r3
 8007080:	d91c      	bls.n	80070bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f043 0220 	orr.w	r2, r3, #32
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	619a      	str	r2, [r3, #24]
        }
        break;
 800708e:	e015      	b.n	80070bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	3303      	adds	r3, #3
 8007096:	089b      	lsrs	r3, r3, #2
 8007098:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800709a:	8afa      	ldrh	r2, [r7, #22]
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d90a      	bls.n	80070c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80070b6:	e003      	b.n	80070c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80070b8:	bf00      	nop
 80070ba:	e002      	b.n	80070c2 <USB_HC_StartXfer+0x25e>
        break;
 80070bc:	bf00      	nop
 80070be:	e000      	b.n	80070c2 <USB_HC_StartXfer+0x25e>
        break;
 80070c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	68d9      	ldr	r1, [r3, #12]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	785a      	ldrb	r2, [r3, #1]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2000      	movs	r0, #0
 80070d2:	9000      	str	r0, [sp, #0]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fb81 	bl	80067dc <USB_WritePacket>
  }

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3728      	adds	r7, #40	; 0x28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	1ff80000 	.word	0x1ff80000

080070e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	b29b      	uxth	r3, r3
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800710a:	b480      	push	{r7}
 800710c:	b089      	sub	sp, #36	; 0x24
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	4413      	add	r3, r2
 800712a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	0c9b      	lsrs	r3, r3, #18
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	0fdb      	lsrs	r3, r3, #31
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b20      	cmp	r3, #32
 8007158:	d104      	bne.n	8007164 <USB_HC_Halt+0x5a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e0e8      	b.n	8007336 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <USB_HC_Halt+0x66>
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b02      	cmp	r3, #2
 800716e:	d173      	bne.n	8007258 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	4413      	add	r3, r2
 8007178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	440a      	add	r2, r1
 8007186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800718a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800718e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	f040 80cb 	bne.w	8007334 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d143      	bne.n	8007232 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007204:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007208:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	3301      	adds	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007216:	d81d      	bhi.n	8007254 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	4413      	add	r3, r2
 8007220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800722a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800722e:	d0ec      	beq.n	800720a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007230:	e080      	b.n	8007334 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	4413      	add	r3, r2
 800723a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	0151      	lsls	r1, r2, #5
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	440a      	add	r2, r1
 8007248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007250:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007252:	e06f      	b.n	8007334 <USB_HC_Halt+0x22a>
            break;
 8007254:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007256:	e06d      	b.n	8007334 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	4413      	add	r3, r2
 8007260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	440a      	add	r2, r1
 800726e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007276:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d143      	bne.n	8007310 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	4413      	add	r3, r2
 8007290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	440a      	add	r2, r1
 800729e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	0151      	lsls	r1, r2, #5
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	440a      	add	r2, r1
 80072be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	3301      	adds	r3, #1
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072f4:	d81d      	bhi.n	8007332 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800730c:	d0ec      	beq.n	80072e8 <USB_HC_Halt+0x1de>
 800730e:	e011      	b.n	8007334 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	4413      	add	r3, r2
 8007318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	440a      	add	r2, r1
 8007326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800732a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	e000      	b.n	8007334 <USB_HC_Halt+0x22a>
          break;
 8007332:	bf00      	nop
    }
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3724      	adds	r7, #36	; 0x24
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007358:	2301      	movs	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	04da      	lsls	r2, r3, #19
 8007360:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <USB_DoPing+0x74>)
 8007362:	4013      	ands	r3, r2
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	440a      	add	r2, r1
 800736c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007374:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	4413      	add	r3, r2
 800737e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800738c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007394:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	1ff80000 	.word	0x1ff80000

080073bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff f982 	bl	80066d6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80073d2:	2110      	movs	r1, #16
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff f9b9 	bl	800674c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff f9dc 	bl	8006798 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80073e0:	2300      	movs	r3, #0
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	e01f      	b.n	8007426 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007404:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800740c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741a:	461a      	mov	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	3301      	adds	r3, #1
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b0f      	cmp	r3, #15
 800742a:	d9dc      	bls.n	80073e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	e034      	b.n	800749c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007448:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007450:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007458:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	461a      	mov	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	3301      	adds	r3, #1
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007478:	d80c      	bhi.n	8007494 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800748c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007490:	d0ec      	beq.n	800746c <USB_StopHost+0xb0>
 8007492:	e000      	b.n	8007496 <USB_StopHost+0xda>
        break;
 8007494:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3301      	adds	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b0f      	cmp	r3, #15
 80074a0:	d9c7      	bls.n	8007432 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074a8:	461a      	mov	r2, r3
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff f8fb 	bl	80066b4 <USB_EnableGlobalInt>

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b089      	sub	sp, #36	; 0x24
 80074cc:	af04      	add	r7, sp, #16
 80074ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80074d0:	2301      	movs	r3, #1
 80074d2:	2202      	movs	r2, #2
 80074d4:	2102      	movs	r1, #2
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fc66 	bl	8007da8 <USBH_FindInterface>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	2bff      	cmp	r3, #255	; 0xff
 80074e4:	d002      	beq.n	80074ec <USBH_CDC_InterfaceInit+0x24>
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d901      	bls.n	80074f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074ec:	2302      	movs	r3, #2
 80074ee:	e13d      	b.n	800776c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fc3b 	bl	8007d70 <USBH_SelectInterface>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007504:	2302      	movs	r3, #2
 8007506:	e131      	b.n	800776c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800750e:	2050      	movs	r0, #80	; 0x50
 8007510:	f002 ff6c 	bl	800a3ec <malloc>
 8007514:	4603      	mov	r3, r0
 8007516:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007528:	2302      	movs	r3, #2
 800752a:	e11f      	b.n	800776c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800752c:	2250      	movs	r2, #80	; 0x50
 800752e:	2100      	movs	r1, #0
 8007530:	68b8      	ldr	r0, [r7, #8]
 8007532:	f002 ff79 	bl	800a428 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	211a      	movs	r1, #26
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b25b      	sxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	da15      	bge.n	800757a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	211a      	movs	r1, #26
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	4413      	add	r3, r2
 800755a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	211a      	movs	r1, #26
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	4413      	add	r3, r2
 8007570:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007574:	881a      	ldrh	r2, [r3, #0]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fe32 	bl	80091ea <USBH_AllocPipe>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	7819      	ldrb	r1, [r3, #0]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	7858      	ldrb	r0, [r3, #1]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	8952      	ldrh	r2, [r2, #10]
 80075a6:	9202      	str	r2, [sp, #8]
 80075a8:	2203      	movs	r2, #3
 80075aa:	9201      	str	r2, [sp, #4]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	4623      	mov	r3, r4
 80075b0:	4602      	mov	r2, r0
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 fdea 	bl	800918c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2200      	movs	r2, #0
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f002 f8f9 	bl	80097b8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075c6:	2300      	movs	r3, #0
 80075c8:	2200      	movs	r2, #0
 80075ca:	210a      	movs	r1, #10
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fbeb 	bl	8007da8 <USBH_FindInterface>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	2bff      	cmp	r3, #255	; 0xff
 80075da:	d002      	beq.n	80075e2 <USBH_CDC_InterfaceInit+0x11a>
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d901      	bls.n	80075e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075e2:	2302      	movs	r3, #2
 80075e4:	e0c2      	b.n	800776c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	211a      	movs	r1, #26
 80075ec:	fb01 f303 	mul.w	r3, r1, r3
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b25b      	sxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	da16      	bge.n	800762c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	211a      	movs	r1, #26
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	4413      	add	r3, r2
 800760a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	211a      	movs	r1, #26
 800761a:	fb01 f303 	mul.w	r3, r1, r3
 800761e:	4413      	add	r3, r2
 8007620:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007624:	881a      	ldrh	r2, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	835a      	strh	r2, [r3, #26]
 800762a:	e015      	b.n	8007658 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	211a      	movs	r1, #26
 8007632:	fb01 f303 	mul.w	r3, r1, r3
 8007636:	4413      	add	r3, r2
 8007638:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	211a      	movs	r1, #26
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	4413      	add	r3, r2
 800764e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007652:	881a      	ldrh	r2, [r3, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	211a      	movs	r1, #26
 800765e:	fb01 f303 	mul.w	r3, r1, r3
 8007662:	4413      	add	r3, r2
 8007664:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b25b      	sxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	da16      	bge.n	800769e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	211a      	movs	r1, #26
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	4413      	add	r3, r2
 800767c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007680:	781a      	ldrb	r2, [r3, #0]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	211a      	movs	r1, #26
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	4413      	add	r3, r2
 8007692:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007696:	881a      	ldrh	r2, [r3, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	835a      	strh	r2, [r3, #26]
 800769c:	e015      	b.n	80076ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	211a      	movs	r1, #26
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	211a      	movs	r1, #26
 80076ba:	fb01 f303 	mul.w	r3, r1, r3
 80076be:	4413      	add	r3, r2
 80076c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076c4:	881a      	ldrh	r2, [r3, #0]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	7b9b      	ldrb	r3, [r3, #14]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fd8a 	bl	80091ea <USBH_AllocPipe>
 80076d6:	4603      	mov	r3, r0
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	7bdb      	ldrb	r3, [r3, #15]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fd80 	bl	80091ea <USBH_AllocPipe>
 80076ea:	4603      	mov	r3, r0
 80076ec:	461a      	mov	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	7b59      	ldrb	r1, [r3, #13]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	7b98      	ldrb	r0, [r3, #14]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	8b12      	ldrh	r2, [r2, #24]
 800770a:	9202      	str	r2, [sp, #8]
 800770c:	2202      	movs	r2, #2
 800770e:	9201      	str	r2, [sp, #4]
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4623      	mov	r3, r4
 8007714:	4602      	mov	r2, r0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fd38 	bl	800918c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	7b19      	ldrb	r1, [r3, #12]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	7bd8      	ldrb	r0, [r3, #15]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	8b52      	ldrh	r2, [r2, #26]
 8007734:	9202      	str	r2, [sp, #8]
 8007736:	2202      	movs	r2, #2
 8007738:	9201      	str	r2, [sp, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	4623      	mov	r3, r4
 800773e:	4602      	mov	r2, r0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 fd23 	bl	800918c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	7b5b      	ldrb	r3, [r3, #13]
 8007752:	2200      	movs	r2, #0
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f002 f82e 	bl	80097b8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	7b1b      	ldrb	r3, [r3, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f002 f827 	bl	80097b8 <USBH_LL_SetToggle>

  return USBH_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	bd90      	pop	{r4, r7, pc}

08007774 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fd18 	bl	80091ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 fd43 	bl	800922c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	7b1b      	ldrb	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00e      	beq.n	80077d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	7b1b      	ldrb	r3, [r3, #12]
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fd05 	bl	80091ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7b1b      	ldrb	r3, [r3, #12]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 fd30 	bl	800922c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	7b5b      	ldrb	r3, [r3, #13]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00e      	beq.n	80077f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	7b5b      	ldrb	r3, [r3, #13]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 fcf2 	bl	80091ca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	7b5b      	ldrb	r3, [r3, #13]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fd1d 	bl	800922c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	4618      	mov	r0, r3
 800780e:	f002 fdf5 	bl	800a3fc <free>
    phost->pActiveClass->pData = 0U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007818:	2200      	movs	r2, #0
 800781a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3340      	adds	r3, #64	; 0x40
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8b1 	bl	80079a6 <GetLineCoding>
 8007844:	4603      	mov	r3, r0
 8007846:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d105      	bne.n	800785a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007854:	2102      	movs	r1, #2
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800785a:	7afb      	ldrb	r3, [r7, #11]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007884:	2b04      	cmp	r3, #4
 8007886:	d877      	bhi.n	8007978 <USBH_CDC_Process+0x114>
 8007888:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <USBH_CDC_Process+0x2c>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078a5 	.word	0x080078a5
 8007894:	080078ab 	.word	0x080078ab
 8007898:	080078db 	.word	0x080078db
 800789c:	0800794f 	.word	0x0800794f
 80078a0:	0800795d 	.word	0x0800795d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
      break;
 80078a8:	e06d      	b.n	8007986 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f897 	bl	80079e4 <SetLineCoding>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078c8:	e058      	b.n	800797c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d055      	beq.n	800797c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2204      	movs	r2, #4
 80078d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078d8:	e050      	b.n	800797c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	3340      	adds	r3, #64	; 0x40
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f860 	bl	80079a6 <GetLineCoding>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d126      	bne.n	800793e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007902:	791b      	ldrb	r3, [r3, #4]
 8007904:	429a      	cmp	r2, r3
 8007906:	d13b      	bne.n	8007980 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007912:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007914:	429a      	cmp	r2, r3
 8007916:	d133      	bne.n	8007980 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007924:	429a      	cmp	r2, r3
 8007926:	d12b      	bne.n	8007980 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007930:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007932:	429a      	cmp	r2, r3
 8007934:	d124      	bne.n	8007980 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f958 	bl	8007bec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800793c:	e020      	b.n	8007980 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d01d      	beq.n	8007980 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2204      	movs	r2, #4
 8007948:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800794c:	e018      	b.n	8007980 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f867 	bl	8007a22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8da 	bl	8007b0e <CDC_ProcessReception>
      break;
 800795a:	e014      	b.n	8007986 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 ffe3 	bl	800892a <USBH_ClrFeature>
 8007964:	4603      	mov	r3, r0
 8007966:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007976:	e005      	b.n	8007984 <USBH_CDC_Process+0x120>

    default:
      break;
 8007978:	bf00      	nop
 800797a:	e004      	b.n	8007986 <USBH_CDC_Process+0x122>
      break;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <USBH_CDC_Process+0x122>
      break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <USBH_CDC_Process+0x122>
      break;
 8007984:	bf00      	nop

  }

  return status;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	22a1      	movs	r2, #161	; 0xa1
 80079b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2221      	movs	r2, #33	; 0x21
 80079ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2207      	movs	r2, #7
 80079cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2207      	movs	r2, #7
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f988 	bl	8008cea <USBH_CtlReq>
 80079da:	4603      	mov	r3, r0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2221      	movs	r2, #33	; 0x21
 80079f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2207      	movs	r2, #7
 8007a0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2207      	movs	r2, #7
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 f969 	bl	8008cea <USBH_CtlReq>
 8007a18:	4603      	mov	r3, r0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af02      	add	r7, sp, #8
 8007a28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a34:	2300      	movs	r3, #0
 8007a36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d002      	beq.n	8007a48 <CDC_ProcessTransmission+0x26>
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d023      	beq.n	8007a8e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a46:	e05e      	b.n	8007b06 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	8b12      	ldrh	r2, [r2, #24]
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d90b      	bls.n	8007a6c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	69d9      	ldr	r1, [r3, #28]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8b1a      	ldrh	r2, [r3, #24]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	7b5b      	ldrb	r3, [r3, #13]
 8007a60:	2001      	movs	r0, #1
 8007a62:	9000      	str	r0, [sp, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fb4e 	bl	8009106 <USBH_BulkSendData>
 8007a6a:	e00b      	b.n	8007a84 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	7b5b      	ldrb	r3, [r3, #13]
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	9000      	str	r0, [sp, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fb41 	bl	8009106 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a8c:	e03b      	b.n	8007b06 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	7b5b      	ldrb	r3, [r3, #13]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 fe65 	bl	8009764 <USBH_LL_GetURBState>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d128      	bne.n	8007af6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	8b12      	ldrh	r2, [r2, #24]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d90e      	bls.n	8007ace <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	8b12      	ldrh	r2, [r2, #24]
 8007ab8:	1a9a      	subs	r2, r3, r2
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	8b12      	ldrh	r2, [r2, #24]
 8007ac6:	441a      	add	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	61da      	str	r2, [r3, #28]
 8007acc:	e002      	b.n	8007ad4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d004      	beq.n	8007ae6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ae4:	e00e      	b.n	8007b04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f868 	bl	8007bc4 <USBH_CDC_TransmitCallback>
      break;
 8007af4:	e006      	b.n	8007b04 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007af6:	7afb      	ldrb	r3, [r7, #11]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d103      	bne.n	8007b04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b04:	bf00      	nop
  }
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b20:	2300      	movs	r3, #0
 8007b22:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d002      	beq.n	8007b34 <CDC_ProcessReception+0x26>
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d00e      	beq.n	8007b50 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b32:	e043      	b.n	8007bbc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	6a19      	ldr	r1, [r3, #32]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	8b5a      	ldrh	r2, [r3, #26]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	7b1b      	ldrb	r3, [r3, #12]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fb05 	bl	8009150 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2204      	movs	r2, #4
 8007b4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b4e:	e035      	b.n	8007bbc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	7b1b      	ldrb	r3, [r3, #12]
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fe04 	bl	8009764 <USBH_LL_GetURBState>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b60:	7cfb      	ldrb	r3, [r7, #19]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d129      	bne.n	8007bba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	7b1b      	ldrb	r3, [r3, #12]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 fd67 	bl	8009640 <USBH_LL_GetLastXferSize>
 8007b72:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d016      	beq.n	8007bac <CDC_ProcessReception+0x9e>
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	8b5b      	ldrh	r3, [r3, #26]
 8007b82:	461a      	mov	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d910      	bls.n	8007bac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad2      	subs	r2, r2, r3
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	6a1a      	ldr	r2, [r3, #32]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	441a      	add	r2, r3
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007baa:	e006      	b.n	8007bba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f80f 	bl	8007bd8 <USBH_CDC_ReceiveCallback>
      break;
 8007bba:	bf00      	nop
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c14:	2302      	movs	r3, #2
 8007c16:	e029      	b.n	8007c6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	79fa      	ldrb	r2, [r7, #7]
 8007c1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f81f 	bl	8007c74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f001 fc37 	bl	80094d8 <USBH_LL_Init>

  return USBH_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e009      	b.n	8007c9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	33e0      	adds	r3, #224	; 0xe0
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	2200      	movs	r2, #0
 8007c92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b0e      	cmp	r3, #14
 8007c9e:	d9f2      	bls.n	8007c86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	e009      	b.n	8007cba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc0:	d3f1      	bcc.n	8007ca6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2240      	movs	r2, #64	; 0x40
 8007ce6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d016      	beq.n	8007d5e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10e      	bne.n	8007d58 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d40:	1c59      	adds	r1, r3, #1
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	33de      	adds	r3, #222	; 0xde
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
 8007d56:	e004      	b.n	8007d62 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	73fb      	strb	r3, [r7, #15]
 8007d5c:	e001      	b.n	8007d62 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d5e:	2302      	movs	r3, #2
 8007d60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d204      	bcs.n	8007d96 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007d94:	e001      	b.n	8007d9a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d96:	2302      	movs	r3, #2
 8007d98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	4608      	mov	r0, r1
 8007db2:	4611      	mov	r1, r2
 8007db4:	461a      	mov	r2, r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	70fb      	strb	r3, [r7, #3]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70bb      	strb	r3, [r7, #2]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007dd0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007dd2:	e025      	b.n	8007e20 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	221a      	movs	r2, #26
 8007dd8:	fb02 f303 	mul.w	r3, r2, r3
 8007ddc:	3308      	adds	r3, #8
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4413      	add	r3, r2
 8007de2:	3302      	adds	r3, #2
 8007de4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	795b      	ldrb	r3, [r3, #5]
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <USBH_FindInterface+0x4e>
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	2bff      	cmp	r3, #255	; 0xff
 8007df4:	d111      	bne.n	8007e1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007dfa:	78ba      	ldrb	r2, [r7, #2]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d002      	beq.n	8007e06 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e00:	78bb      	ldrb	r3, [r7, #2]
 8007e02:	2bff      	cmp	r3, #255	; 0xff
 8007e04:	d109      	bne.n	8007e1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e0a:	787a      	ldrb	r2, [r7, #1]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e10:	787b      	ldrb	r3, [r7, #1]
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d101      	bne.n	8007e1a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	e006      	b.n	8007e28 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d9d6      	bls.n	8007dd4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e26:	23ff      	movs	r3, #255	; 0xff
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fb87 	bl	8009550 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007e42:	2101      	movs	r1, #1
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fca0 	bl	800978a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af04      	add	r7, sp, #16
 8007e5a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d102      	bne.n	8007e76 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2203      	movs	r2, #3
 8007e74:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b0b      	cmp	r3, #11
 8007e7e:	f200 81b3 	bhi.w	80081e8 <USBH_Process+0x394>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <USBH_Process+0x34>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007eb9 	.word	0x08007eb9
 8007e8c:	08007eeb 	.word	0x08007eeb
 8007e90:	08007f53 	.word	0x08007f53
 8007e94:	08008183 	.word	0x08008183
 8007e98:	080081e9 	.word	0x080081e9
 8007e9c:	08007ff7 	.word	0x08007ff7
 8007ea0:	08008129 	.word	0x08008129
 8007ea4:	0800802d 	.word	0x0800802d
 8007ea8:	0800804d 	.word	0x0800804d
 8007eac:	0800806d 	.word	0x0800806d
 8007eb0:	0800809b 	.word	0x0800809b
 8007eb4:	0800816b 	.word	0x0800816b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8193 	beq.w	80081ec <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ecc:	20c8      	movs	r0, #200	; 0xc8
 8007ece:	f001 fca3 	bl	8009818 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fb99 	bl	800960a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ee8:	e180      	b.n	80081ec <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d107      	bne.n	8007f04 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f02:	e182      	b.n	800820a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f0e:	d914      	bls.n	8007f3a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f16:	3301      	adds	r3, #1
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d903      	bls.n	8007f32 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	220d      	movs	r2, #13
 8007f2e:	701a      	strb	r2, [r3, #0]
      break;
 8007f30:	e16b      	b.n	800820a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
      break;
 8007f38:	e167      	b.n	800820a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f40:	f103 020a 	add.w	r2, r3, #10
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f4a:	200a      	movs	r0, #10
 8007f4c:	f001 fc64 	bl	8009818 <USBH_Delay>
      break;
 8007f50:	e15b      	b.n	800820a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f62:	2104      	movs	r1, #4
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f68:	2064      	movs	r0, #100	; 0x64
 8007f6a:	f001 fc55 	bl	8009818 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fb24 	bl	80095bc <USBH_LL_GetSpeed>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2205      	movs	r2, #5
 8007f82:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f92f 	bl	80091ea <USBH_AllocPipe>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	461a      	mov	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f94:	2180      	movs	r1, #128	; 0x80
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 f927 	bl	80091ea <USBH_AllocPipe>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	7919      	ldrb	r1, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fb8:	b292      	uxth	r2, r2
 8007fba:	9202      	str	r2, [sp, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	9201      	str	r2, [sp, #4]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2280      	movs	r2, #128	; 0x80
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 f8e0 	bl	800918c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	7959      	ldrb	r1, [r3, #5]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007fe0:	b292      	uxth	r2, r2
 8007fe2:	9202      	str	r2, [sp, #8]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	9201      	str	r2, [sp, #4]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	4603      	mov	r3, r0
 8007fec:	2200      	movs	r2, #0
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 f8cc 	bl	800918c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ff4:	e109      	b.n	800820a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f90c 	bl	8008214 <USBH_HandleEnum>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	f040 80f3 	bne.w	80081f0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008018:	2b01      	cmp	r3, #1
 800801a:	d103      	bne.n	8008024 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2208      	movs	r2, #8
 8008020:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008022:	e0e5      	b.n	80081f0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2207      	movs	r2, #7
 8008028:	701a      	strb	r2, [r3, #0]
      break;
 800802a:	e0e1      	b.n	80081f0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80de 	beq.w	80081f4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800803e:	2101      	movs	r1, #1
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2208      	movs	r2, #8
 8008048:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800804a:	e0d3      	b.n	80081f4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008052:	b29b      	uxth	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fc20 	bl	800889c <USBH_SetCfg>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	f040 80ca 	bne.w	80081f8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2209      	movs	r2, #9
 8008068:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800806a:	e0c5      	b.n	80081f8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00b      	beq.n	8008092 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800807a:	2101      	movs	r1, #1
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc30 	bl	80088e2 <USBH_SetFeature>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	f040 80b9 	bne.w	80081fc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	220a      	movs	r2, #10
 800808e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008090:	e0b4      	b.n	80081fc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	220a      	movs	r2, #10
 8008096:	701a      	strb	r2, [r3, #0]
      break;
 8008098:	e0b0      	b.n	80081fc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80ad 	beq.w	8008200 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
 80080b2:	e016      	b.n	80080e2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80080b4:	7bfa      	ldrb	r2, [r7, #15]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32de      	adds	r2, #222	; 0xde
 80080ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080be:	791a      	ldrb	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d108      	bne.n	80080dc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80080ca:	7bfa      	ldrb	r2, [r7, #15]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	32de      	adds	r2, #222	; 0xde
 80080d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80080da:	e005      	b.n	80080e8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	3301      	adds	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0e5      	beq.n	80080b4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d016      	beq.n	8008120 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2206      	movs	r2, #6
 8008108:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008110:	2103      	movs	r1, #3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008116:	e073      	b.n	8008200 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	220d      	movs	r2, #13
 800811c:	701a      	strb	r2, [r3, #0]
      break;
 800811e:	e06f      	b.n	8008200 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	220d      	movs	r2, #13
 8008124:	701a      	strb	r2, [r3, #0]
      break;
 8008126:	e06b      	b.n	8008200 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d017      	beq.n	8008162 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d103      	bne.n	8008152 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	220b      	movs	r2, #11
 800814e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008150:	e058      	b.n	8008204 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d154      	bne.n	8008204 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	220d      	movs	r2, #13
 800815e:	701a      	strb	r2, [r3, #0]
      break;
 8008160:	e050      	b.n	8008204 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	220d      	movs	r2, #13
 8008166:	701a      	strb	r2, [r3, #0]
      break;
 8008168:	e04c      	b.n	8008204 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d049      	beq.n	8008208 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
      }
      break;
 8008180:	e042      	b.n	8008208 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fd72 	bl	8007c74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d009      	beq.n	80081ae <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081be:	2105      	movs	r1, #5
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d107      	bne.n	80081e0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fe2b 	bl	8007e34 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081de:	e014      	b.n	800820a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f9b5 	bl	8009550 <USBH_LL_Start>
      break;
 80081e6:	e010      	b.n	800820a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80081e8:	bf00      	nop
 80081ea:	e00e      	b.n	800820a <USBH_Process+0x3b6>
      break;
 80081ec:	bf00      	nop
 80081ee:	e00c      	b.n	800820a <USBH_Process+0x3b6>
      break;
 80081f0:	bf00      	nop
 80081f2:	e00a      	b.n	800820a <USBH_Process+0x3b6>
    break;
 80081f4:	bf00      	nop
 80081f6:	e008      	b.n	800820a <USBH_Process+0x3b6>
      break;
 80081f8:	bf00      	nop
 80081fa:	e006      	b.n	800820a <USBH_Process+0x3b6>
      break;
 80081fc:	bf00      	nop
 80081fe:	e004      	b.n	800820a <USBH_Process+0x3b6>
      break;
 8008200:	bf00      	nop
 8008202:	e002      	b.n	800820a <USBH_Process+0x3b6>
      break;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <USBH_Process+0x3b6>
      break;
 8008208:	bf00      	nop
  }
  return USBH_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af04      	add	r7, sp, #16
 800821a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008220:	2301      	movs	r3, #1
 8008222:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	2b07      	cmp	r3, #7
 800822a:	f200 81c1 	bhi.w	80085b0 <USBH_HandleEnum+0x39c>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <USBH_HandleEnum+0x20>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008255 	.word	0x08008255
 8008238:	08008313 	.word	0x08008313
 800823c:	0800837d 	.word	0x0800837d
 8008240:	0800840b 	.word	0x0800840b
 8008244:	08008475 	.word	0x08008475
 8008248:	080084e5 	.word	0x080084e5
 800824c:	0800852b 	.word	0x0800852b
 8008250:	08008571 	.word	0x08008571
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008254:	2108      	movs	r1, #8
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa50 	bl	80086fc <USBH_Get_DevDesc>
 800825c:	4603      	mov	r3, r0
 800825e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d130      	bne.n	80082c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7919      	ldrb	r1, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800828a:	b292      	uxth	r2, r2
 800828c:	9202      	str	r2, [sp, #8]
 800828e:	2200      	movs	r2, #0
 8008290:	9201      	str	r2, [sp, #4]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	4603      	mov	r3, r0
 8008296:	2280      	movs	r2, #128	; 0x80
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 ff77 	bl	800918c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7959      	ldrb	r1, [r3, #5]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082b2:	b292      	uxth	r2, r2
 80082b4:	9202      	str	r2, [sp, #8]
 80082b6:	2200      	movs	r2, #0
 80082b8:	9201      	str	r2, [sp, #4]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4603      	mov	r3, r0
 80082be:	2200      	movs	r2, #0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 ff63 	bl	800918c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082c6:	e175      	b.n	80085b4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	f040 8172 	bne.w	80085b4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082d6:	3301      	adds	r3, #1
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d903      	bls.n	80082f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	220d      	movs	r2, #13
 80082ee:	701a      	strb	r2, [r3, #0]
      break;
 80082f0:	e160      	b.n	80085b4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	795b      	ldrb	r3, [r3, #5]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 ff97 	bl	800922c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	791b      	ldrb	r3, [r3, #4]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 ff91 	bl	800922c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
      break;
 8008310:	e150      	b.n	80085b4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008312:	2112      	movs	r1, #18
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f9f1 	bl	80086fc <USBH_Get_DevDesc>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800832a:	e145      	b.n	80085b8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b03      	cmp	r3, #3
 8008330:	f040 8142 	bne.w	80085b8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800833a:	3301      	adds	r3, #1
 800833c:	b2da      	uxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800834a:	2b03      	cmp	r3, #3
 800834c:	d903      	bls.n	8008356 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	220d      	movs	r2, #13
 8008352:	701a      	strb	r2, [r3, #0]
      break;
 8008354:	e130      	b.n	80085b8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	795b      	ldrb	r3, [r3, #5]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 ff65 	bl	800922c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	791b      	ldrb	r3, [r3, #4]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 ff5f 	bl	800922c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	701a      	strb	r2, [r3, #0]
      break;
 800837a:	e11d      	b.n	80085b8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800837c:	2101      	movs	r1, #1
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa68 	bl	8008854 <USBH_SetAddress>
 8008384:	4603      	mov	r3, r0
 8008386:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d132      	bne.n	80083f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800838e:	2002      	movs	r0, #2
 8008390:	f001 fa42 	bl	8009818 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2203      	movs	r2, #3
 80083a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7919      	ldrb	r1, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083b6:	b292      	uxth	r2, r2
 80083b8:	9202      	str	r2, [sp, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	9201      	str	r2, [sp, #4]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	4603      	mov	r3, r0
 80083c2:	2280      	movs	r2, #128	; 0x80
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fee1 	bl	800918c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7959      	ldrb	r1, [r3, #5]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083de:	b292      	uxth	r2, r2
 80083e0:	9202      	str	r2, [sp, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	9201      	str	r2, [sp, #4]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	4603      	mov	r3, r0
 80083ea:	2200      	movs	r2, #0
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fecd 	bl	800918c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083f2:	e0e3      	b.n	80085bc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	f040 80e0 	bne.w	80085bc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	220d      	movs	r2, #13
 8008400:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	705a      	strb	r2, [r3, #1]
      break;
 8008408:	e0d8      	b.n	80085bc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800840a:	2109      	movs	r1, #9
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f99d 	bl	800874c <USBH_Get_CfgDesc>
 8008412:	4603      	mov	r3, r0
 8008414:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d103      	bne.n	8008424 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2204      	movs	r2, #4
 8008420:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008422:	e0cd      	b.n	80085c0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b03      	cmp	r3, #3
 8008428:	f040 80ca 	bne.w	80085c0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008432:	3301      	adds	r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008442:	2b03      	cmp	r3, #3
 8008444:	d903      	bls.n	800844e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	220d      	movs	r2, #13
 800844a:	701a      	strb	r2, [r3, #0]
      break;
 800844c:	e0b8      	b.n	80085c0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fee9 	bl	800922c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	791b      	ldrb	r3, [r3, #4]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fee3 	bl	800922c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
      break;
 8008472:	e0a5      	b.n	80085c0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f965 	bl	800874c <USBH_Get_CfgDesc>
 8008482:	4603      	mov	r3, r0
 8008484:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d103      	bne.n	8008494 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2205      	movs	r2, #5
 8008490:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008492:	e097      	b.n	80085c4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b03      	cmp	r3, #3
 8008498:	f040 8094 	bne.w	80085c4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084a2:	3301      	adds	r3, #1
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d903      	bls.n	80084be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	220d      	movs	r2, #13
 80084ba:	701a      	strb	r2, [r3, #0]
      break;
 80084bc:	e082      	b.n	80085c4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	795b      	ldrb	r3, [r3, #5]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 feb1 	bl	800922c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	791b      	ldrb	r3, [r3, #4]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 feab 	bl	800922c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
      break;
 80084e2:	e06f      	b.n	80085c4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d019      	beq.n	8008522 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084fa:	23ff      	movs	r3, #255	; 0xff
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f949 	bl	8008794 <USBH_Get_StringDesc>
 8008502:	4603      	mov	r3, r0
 8008504:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2206      	movs	r2, #6
 8008510:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008512:	e059      	b.n	80085c8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d156      	bne.n	80085c8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2206      	movs	r2, #6
 800851e:	705a      	strb	r2, [r3, #1]
      break;
 8008520:	e052      	b.n	80085c8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2206      	movs	r2, #6
 8008526:	705a      	strb	r2, [r3, #1]
      break;
 8008528:	e04e      	b.n	80085c8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008530:	2b00      	cmp	r3, #0
 8008532:	d019      	beq.n	8008568 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008540:	23ff      	movs	r3, #255	; 0xff
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f926 	bl	8008794 <USBH_Get_StringDesc>
 8008548:	4603      	mov	r3, r0
 800854a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2207      	movs	r2, #7
 8008556:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008558:	e038      	b.n	80085cc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b03      	cmp	r3, #3
 800855e:	d135      	bne.n	80085cc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2207      	movs	r2, #7
 8008564:	705a      	strb	r2, [r3, #1]
      break;
 8008566:	e031      	b.n	80085cc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2207      	movs	r2, #7
 800856c:	705a      	strb	r2, [r3, #1]
      break;
 800856e:	e02d      	b.n	80085cc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008576:	2b00      	cmp	r3, #0
 8008578:	d017      	beq.n	80085aa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008586:	23ff      	movs	r3, #255	; 0xff
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f903 	bl	8008794 <USBH_Get_StringDesc>
 800858e:	4603      	mov	r3, r0
 8008590:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800859c:	e018      	b.n	80085d0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d115      	bne.n	80085d0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]
      break;
 80085a8:	e012      	b.n	80085d0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
      break;
 80085ae:	e00f      	b.n	80085d0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80085b0:	bf00      	nop
 80085b2:	e00e      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085b4:	bf00      	nop
 80085b6:	e00c      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085b8:	bf00      	nop
 80085ba:	e00a      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085bc:	bf00      	nop
 80085be:	e008      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085c0:	bf00      	nop
 80085c2:	e006      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085c4:	bf00      	nop
 80085c6:	e004      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085c8:	bf00      	nop
 80085ca:	e002      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085cc:	bf00      	nop
 80085ce:	e000      	b.n	80085d2 <USBH_HandleEnum+0x3be>
      break;
 80085d0:	bf00      	nop
  }
  return Status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f804 	bl	800861e <USBH_HandleSof>
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b0b      	cmp	r3, #11
 800862e:	d10a      	bne.n	8008646 <USBH_HandleSof+0x28>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
  }
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800865e:	bf00      	nop
}
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800867a:	bf00      	nop
}
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 ff56 	bl	8009586 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	791b      	ldrb	r3, [r3, #4]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fda3 	bl	800922c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	795b      	ldrb	r3, [r3, #5]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fd9d 	bl	800922c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af02      	add	r7, sp, #8
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	b29b      	uxth	r3, r3
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4613      	mov	r3, r2
 8008716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800871a:	2100      	movs	r1, #0
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f864 	bl	80087ea <USBH_GetDescriptor>
 8008722:	4603      	mov	r3, r0
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	b292      	uxth	r2, r2
 800873c:	4619      	mov	r1, r3
 800873e:	f000 f918 	bl	8008972 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008742:	7bfb      	ldrb	r3, [r7, #15]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af02      	add	r7, sp, #8
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	331c      	adds	r3, #28
 800875c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800875e:	887b      	ldrh	r3, [r7, #2]
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008768:	2100      	movs	r1, #0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f83d 	bl	80087ea <USBH_GetDescriptor>
 8008770:	4603      	mov	r3, r0
 8008772:	72fb      	strb	r3, [r7, #11]
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d107      	bne.n	800878a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008780:	887a      	ldrh	r2, [r7, #2]
 8008782:	68f9      	ldr	r1, [r7, #12]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f964 	bl	8008a52 <USBH_ParseCfgDesc>
  }

  return status;
 800878a:	7afb      	ldrb	r3, [r7, #11]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af02      	add	r7, sp, #8
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	461a      	mov	r2, r3
 80087a0:	460b      	mov	r3, r1
 80087a2:	72fb      	strb	r3, [r7, #11]
 80087a4:	4613      	mov	r3, r2
 80087a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80087a8:	7afb      	ldrb	r3, [r7, #11]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80087b0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80087b8:	893b      	ldrh	r3, [r7, #8]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	460b      	mov	r3, r1
 80087be:	2100      	movs	r1, #0
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f812 	bl	80087ea <USBH_GetDescriptor>
 80087c6:	4603      	mov	r3, r0
 80087c8:	75fb      	strb	r3, [r7, #23]
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d107      	bne.n	80087e0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087d6:	893a      	ldrh	r2, [r7, #8]
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fa37 	bl	8008c4e <USBH_ParseStringDesc>
  }

  return status;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	607b      	str	r3, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	72fb      	strb	r3, [r7, #11]
 80087f8:	4613      	mov	r3, r2
 80087fa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	789b      	ldrb	r3, [r3, #2]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d11c      	bne.n	800883e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008804:	7afb      	ldrb	r3, [r7, #11]
 8008806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800880a:	b2da      	uxtb	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2206      	movs	r2, #6
 8008814:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	893a      	ldrh	r2, [r7, #8]
 800881a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800881c:	893b      	ldrh	r3, [r7, #8]
 800881e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008826:	d104      	bne.n	8008832 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f240 4209 	movw	r2, #1033	; 0x409
 800882e:	829a      	strh	r2, [r3, #20]
 8008830:	e002      	b.n	8008838 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8b3a      	ldrh	r2, [r7, #24]
 800883c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800883e:	8b3b      	ldrh	r3, [r7, #24]
 8008840:	461a      	mov	r2, r3
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fa50 	bl	8008cea <USBH_CtlReq>
 800884a:	4603      	mov	r3, r0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	789b      	ldrb	r3, [r3, #2]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d10f      	bne.n	8008888 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2205      	movs	r2, #5
 8008872:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008888:	2200      	movs	r2, #0
 800888a:	2100      	movs	r1, #0
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa2c 	bl	8008cea <USBH_CtlReq>
 8008892:	4603      	mov	r3, r0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d10e      	bne.n	80088ce <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2209      	movs	r2, #9
 80088ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	887a      	ldrh	r2, [r7, #2]
 80088c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa09 	bl	8008cea <USBH_CtlReq>
 80088d8:	4603      	mov	r3, r0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	789b      	ldrb	r3, [r3, #2]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d10f      	bne.n	8008916 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2203      	movs	r2, #3
 8008900:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008916:	2200      	movs	r2, #0
 8008918:	2100      	movs	r1, #0
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f9e5 	bl	8008cea <USBH_CtlReq>
 8008920:	4603      	mov	r3, r0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	789b      	ldrb	r3, [r3, #2]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d10f      	bne.n	800895e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2202      	movs	r2, #2
 8008942:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9c1 	bl	8008cea <USBH_CtlReq>
 8008968:	4603      	mov	r3, r0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008972:	b480      	push	{r7}
 8008974:	b085      	sub	sp, #20
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	4613      	mov	r3, r2
 800897e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	785a      	ldrb	r2, [r3, #1]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3302      	adds	r3, #2
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	b29a      	uxth	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	3303      	adds	r3, #3
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	791a      	ldrb	r2, [r3, #4]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	795a      	ldrb	r2, [r3, #5]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	799a      	ldrb	r2, [r3, #6]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	79da      	ldrb	r2, [r3, #7]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80089cc:	88fb      	ldrh	r3, [r7, #6]
 80089ce:	2b08      	cmp	r3, #8
 80089d0:	d939      	bls.n	8008a46 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	3308      	adds	r3, #8
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	3309      	adds	r3, #9
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	330a      	adds	r3, #10
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	330b      	adds	r3, #11
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	4313      	orrs	r3, r2
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	330d      	adds	r3, #13
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	021b      	lsls	r3, r3, #8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	7b9a      	ldrb	r2, [r3, #14]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	7bda      	ldrb	r2, [r3, #15]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	7c1a      	ldrb	r2, [r3, #16]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	7c5a      	ldrb	r2, [r3, #17]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	745a      	strb	r2, [r3, #17]
  }
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b08a      	sub	sp, #40	; 0x28
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	785a      	ldrb	r2, [r3, #1]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3302      	adds	r3, #2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3303      	adds	r3, #3
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	791a      	ldrb	r2, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	795a      	ldrb	r2, [r3, #5]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	799a      	ldrb	r2, [r3, #6]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	79da      	ldrb	r2, [r3, #7]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	7a1a      	ldrb	r2, [r3, #8]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	2b09      	cmp	r3, #9
 8008acc:	d95f      	bls.n	8008b8e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008ace:	2309      	movs	r3, #9
 8008ad0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ad6:	e051      	b.n	8008b7c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ad8:	f107 0316 	add.w	r3, r7, #22
 8008adc:	4619      	mov	r1, r3
 8008ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ae0:	f000 f8e8 	bl	8008cb4 <USBH_GetNextDesc>
 8008ae4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d146      	bne.n	8008b7c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008af2:	221a      	movs	r2, #26
 8008af4:	fb02 f303 	mul.w	r3, r2, r3
 8008af8:	3308      	adds	r3, #8
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4413      	add	r3, r2
 8008afe:	3302      	adds	r3, #2
 8008b00:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b04:	69f8      	ldr	r0, [r7, #28]
 8008b06:	f000 f846 	bl	8008b96 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b14:	e022      	b.n	8008b5c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b16:	f107 0316 	add.w	r3, r7, #22
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b1e:	f000 f8c9 	bl	8008cb4 <USBH_GetNextDesc>
 8008b22:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	d117      	bne.n	8008b5c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b34:	3201      	adds	r2, #1
 8008b36:	00d2      	lsls	r2, r2, #3
 8008b38:	211a      	movs	r1, #26
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	4413      	add	r3, r2
 8008b40:	3308      	adds	r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	3304      	adds	r3, #4
 8008b48:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b4c:	69b8      	ldr	r0, [r7, #24]
 8008b4e:	f000 f851 	bl	8008bf4 <USBH_ParseEPDesc>
            ep_ix++;
 8008b52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008b56:	3301      	adds	r3, #1
 8008b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	791b      	ldrb	r3, [r3, #4]
 8008b60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d204      	bcs.n	8008b72 <USBH_ParseCfgDesc+0x120>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	885a      	ldrh	r2, [r3, #2]
 8008b6c:	8afb      	ldrh	r3, [r7, #22]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d8d1      	bhi.n	8008b16 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b76:	3301      	adds	r3, #1
 8008b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d804      	bhi.n	8008b8e <USBH_ParseCfgDesc+0x13c>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	885a      	ldrh	r2, [r3, #2]
 8008b88:	8afb      	ldrh	r3, [r7, #22]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d8a4      	bhi.n	8008ad8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008b8e:	bf00      	nop
 8008b90:	3728      	adds	r7, #40	; 0x28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781a      	ldrb	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	785a      	ldrb	r2, [r3, #1]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	789a      	ldrb	r2, [r3, #2]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	78da      	ldrb	r2, [r3, #3]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	791a      	ldrb	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	795a      	ldrb	r2, [r3, #5]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	799a      	ldrb	r2, [r3, #6]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	79da      	ldrb	r2, [r3, #7]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	7a1a      	ldrb	r2, [r3, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	721a      	strb	r2, [r3, #8]
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	785a      	ldrb	r2, [r3, #1]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	789a      	ldrb	r2, [r3, #2]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	78da      	ldrb	r2, [r3, #3]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	3304      	adds	r3, #4
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	3305      	adds	r3, #5
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	021b      	lsls	r3, r3, #8
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	4313      	orrs	r3, r2
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	799a      	ldrb	r2, [r3, #6]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	719a      	strb	r2, [r3, #6]
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b087      	sub	sp, #28
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d120      	bne.n	8008ca8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	1e9a      	subs	r2, r3, #2
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	bf28      	it	cs
 8008c72:	4613      	movcs	r3, r2
 8008c74:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3302      	adds	r3, #2
 8008c7a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	82fb      	strh	r3, [r7, #22]
 8008c80:	e00b      	b.n	8008c9a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c82:	8afb      	ldrh	r3, [r7, #22]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4413      	add	r3, r2
 8008c88:	781a      	ldrb	r2, [r3, #0]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3301      	adds	r3, #1
 8008c92:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c94:	8afb      	ldrh	r3, [r7, #22]
 8008c96:	3302      	adds	r3, #2
 8008c98:	82fb      	strh	r3, [r7, #22]
 8008c9a:	8afa      	ldrh	r2, [r7, #22]
 8008c9c:	8abb      	ldrh	r3, [r7, #20]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d3ef      	bcc.n	8008c82 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	881a      	ldrh	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	4413      	add	r3, r2
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b086      	sub	sp, #24
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	789b      	ldrb	r3, [r3, #2]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d002      	beq.n	8008d0a <USBH_CtlReq+0x20>
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d00f      	beq.n	8008d28 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008d08:	e027      	b.n	8008d5a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	88fa      	ldrh	r2, [r7, #6]
 8008d14:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d22:	2301      	movs	r3, #1
 8008d24:	75fb      	strb	r3, [r7, #23]
      break;
 8008d26:	e018      	b.n	8008d5a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 f81b 	bl	8008d64 <USBH_HandleControl>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <USBH_CtlReq+0x54>
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d106      	bne.n	8008d4c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	761a      	strb	r2, [r3, #24]
      break;
 8008d4a:	e005      	b.n	8008d58 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d102      	bne.n	8008d58 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	709a      	strb	r2, [r3, #2]
      break;
 8008d58:	bf00      	nop
  }
  return status;
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	7e1b      	ldrb	r3, [r3, #24]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	2b0a      	cmp	r3, #10
 8008d7c:	f200 8156 	bhi.w	800902c <USBH_HandleControl+0x2c8>
 8008d80:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <USBH_HandleControl+0x24>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008db5 	.word	0x08008db5
 8008d8c:	08008dcf 	.word	0x08008dcf
 8008d90:	08008e39 	.word	0x08008e39
 8008d94:	08008e5f 	.word	0x08008e5f
 8008d98:	08008e97 	.word	0x08008e97
 8008d9c:	08008ec1 	.word	0x08008ec1
 8008da0:	08008f13 	.word	0x08008f13
 8008da4:	08008f35 	.word	0x08008f35
 8008da8:	08008f71 	.word	0x08008f71
 8008dac:	08008f97 	.word	0x08008f97
 8008db0:	08008fd5 	.word	0x08008fd5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f103 0110 	add.w	r1, r3, #16
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	795b      	ldrb	r3, [r3, #5]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f943 	bl	800904c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	761a      	strb	r2, [r3, #24]
      break;
 8008dcc:	e139      	b.n	8009042 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	795b      	ldrb	r3, [r3, #5]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fcc5 	bl	8009764 <USBH_LL_GetURBState>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d11e      	bne.n	8008e22 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7c1b      	ldrb	r3, [r3, #16]
 8008de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	8adb      	ldrh	r3, [r3, #22]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00a      	beq.n	8008e0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008df6:	7b7b      	ldrb	r3, [r7, #13]
 8008df8:	2b80      	cmp	r3, #128	; 0x80
 8008dfa:	d103      	bne.n	8008e04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2203      	movs	r2, #3
 8008e00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e02:	e115      	b.n	8009030 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2205      	movs	r2, #5
 8008e08:	761a      	strb	r2, [r3, #24]
      break;
 8008e0a:	e111      	b.n	8009030 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008e0c:	7b7b      	ldrb	r3, [r7, #13]
 8008e0e:	2b80      	cmp	r3, #128	; 0x80
 8008e10:	d103      	bne.n	8008e1a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2209      	movs	r2, #9
 8008e16:	761a      	strb	r2, [r3, #24]
      break;
 8008e18:	e10a      	b.n	8009030 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2207      	movs	r2, #7
 8008e1e:	761a      	strb	r2, [r3, #24]
      break;
 8008e20:	e106      	b.n	8009030 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d003      	beq.n	8008e30 <USBH_HandleControl+0xcc>
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	f040 8100 	bne.w	8009030 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	220b      	movs	r2, #11
 8008e34:	761a      	strb	r2, [r3, #24]
      break;
 8008e36:	e0fb      	b.n	8009030 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6899      	ldr	r1, [r3, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	899a      	ldrh	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	791b      	ldrb	r3, [r3, #4]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f93a 	bl	80090ca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2204      	movs	r2, #4
 8008e5a:	761a      	strb	r2, [r3, #24]
      break;
 8008e5c:	e0f1      	b.n	8009042 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	791b      	ldrb	r3, [r3, #4]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc7d 	bl	8009764 <USBH_LL_GetURBState>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d102      	bne.n	8008e7a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2209      	movs	r2, #9
 8008e78:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b05      	cmp	r3, #5
 8008e7e:	d102      	bne.n	8008e86 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e80:	2303      	movs	r3, #3
 8008e82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e84:	e0d6      	b.n	8009034 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b04      	cmp	r3, #4
 8008e8a:	f040 80d3 	bne.w	8009034 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	220b      	movs	r2, #11
 8008e92:	761a      	strb	r2, [r3, #24]
      break;
 8008e94:	e0ce      	b.n	8009034 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6899      	ldr	r1, [r3, #8]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	899a      	ldrh	r2, [r3, #12]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	795b      	ldrb	r3, [r3, #5]
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	9000      	str	r0, [sp, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f8ea 	bl	8009080 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2206      	movs	r2, #6
 8008ebc:	761a      	strb	r2, [r3, #24]
      break;
 8008ebe:	e0c0      	b.n	8009042 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	795b      	ldrb	r3, [r3, #5]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc4c 	bl	8009764 <USBH_LL_GetURBState>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d103      	bne.n	8008ede <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2207      	movs	r2, #7
 8008eda:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008edc:	e0ac      	b.n	8009038 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b05      	cmp	r3, #5
 8008ee2:	d105      	bne.n	8008ef0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	220c      	movs	r2, #12
 8008ee8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008eea:	2303      	movs	r3, #3
 8008eec:	73fb      	strb	r3, [r7, #15]
      break;
 8008eee:	e0a3      	b.n	8009038 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d103      	bne.n	8008efe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2205      	movs	r2, #5
 8008efa:	761a      	strb	r2, [r3, #24]
      break;
 8008efc:	e09c      	b.n	8009038 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	f040 8099 	bne.w	8009038 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	220b      	movs	r2, #11
 8008f0a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	e092      	b.n	8009038 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	791b      	ldrb	r3, [r3, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f8d5 	bl	80090ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2208      	movs	r2, #8
 8008f30:	761a      	strb	r2, [r3, #24]

      break;
 8008f32:	e086      	b.n	8009042 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	791b      	ldrb	r3, [r3, #4]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fc12 	bl	8009764 <USBH_LL_GetURBState>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d105      	bne.n	8008f56 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	220d      	movs	r2, #13
 8008f4e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f54:	e072      	b.n	800903c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d103      	bne.n	8008f64 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	220b      	movs	r2, #11
 8008f60:	761a      	strb	r2, [r3, #24]
      break;
 8008f62:	e06b      	b.n	800903c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b05      	cmp	r3, #5
 8008f68:	d168      	bne.n	800903c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f6e:	e065      	b.n	800903c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	795b      	ldrb	r3, [r3, #5]
 8008f74:	2201      	movs	r2, #1
 8008f76:	9200      	str	r2, [sp, #0]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f87f 	bl	8009080 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	220a      	movs	r2, #10
 8008f92:	761a      	strb	r2, [r3, #24]
      break;
 8008f94:	e055      	b.n	8009042 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	795b      	ldrb	r3, [r3, #5]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fbe1 	bl	8009764 <USBH_LL_GetURBState>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d105      	bne.n	8008fb8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	220d      	movs	r2, #13
 8008fb4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fb6:	e043      	b.n	8009040 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d103      	bne.n	8008fc6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2209      	movs	r2, #9
 8008fc2:	761a      	strb	r2, [r3, #24]
      break;
 8008fc4:	e03c      	b.n	8009040 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	d139      	bne.n	8009040 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	220b      	movs	r2, #11
 8008fd0:	761a      	strb	r2, [r3, #24]
      break;
 8008fd2:	e035      	b.n	8009040 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	7e5b      	ldrb	r3, [r3, #25]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	765a      	strb	r2, [r3, #25]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7e5b      	ldrb	r3, [r3, #25]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d806      	bhi.n	8008ff6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ff4:	e025      	b.n	8009042 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ffc:	2106      	movs	r1, #6
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	795b      	ldrb	r3, [r3, #5]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f90c 	bl	800922c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	791b      	ldrb	r3, [r3, #4]
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f906 	bl	800922c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009026:	2302      	movs	r3, #2
 8009028:	73fb      	strb	r3, [r7, #15]
      break;
 800902a:	e00a      	b.n	8009042 <USBH_HandleControl+0x2de>

    default:
      break;
 800902c:	bf00      	nop
 800902e:	e008      	b.n	8009042 <USBH_HandleControl+0x2de>
      break;
 8009030:	bf00      	nop
 8009032:	e006      	b.n	8009042 <USBH_HandleControl+0x2de>
      break;
 8009034:	bf00      	nop
 8009036:	e004      	b.n	8009042 <USBH_HandleControl+0x2de>
      break;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <USBH_HandleControl+0x2de>
      break;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <USBH_HandleControl+0x2de>
      break;
 8009040:	bf00      	nop
  }

  return status;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af04      	add	r7, sp, #16
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800905a:	79f9      	ldrb	r1, [r7, #7]
 800905c:	2300      	movs	r3, #0
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	2308      	movs	r3, #8
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	2300      	movs	r3, #0
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2300      	movs	r3, #0
 800906e:	2200      	movs	r2, #0
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fb46 	bl	8009702 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af04      	add	r7, sp, #16
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4611      	mov	r1, r2
 800908c:	461a      	mov	r2, r3
 800908e:	460b      	mov	r3, r1
 8009090:	80fb      	strh	r3, [r7, #6]
 8009092:	4613      	mov	r3, r2
 8009094:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80090a4:	7979      	ldrb	r1, [r7, #5]
 80090a6:	7e3b      	ldrb	r3, [r7, #24]
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	9302      	str	r3, [sp, #8]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	2301      	movs	r3, #1
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	2300      	movs	r3, #0
 80090b8:	2200      	movs	r2, #0
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fb21 	bl	8009702 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b088      	sub	sp, #32
 80090ce:	af04      	add	r7, sp, #16
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	4611      	mov	r1, r2
 80090d6:	461a      	mov	r2, r3
 80090d8:	460b      	mov	r3, r1
 80090da:	80fb      	strh	r3, [r7, #6]
 80090dc:	4613      	mov	r3, r2
 80090de:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80090e0:	7979      	ldrb	r1, [r7, #5]
 80090e2:	2300      	movs	r3, #0
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	9302      	str	r3, [sp, #8]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	2301      	movs	r3, #1
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	2300      	movs	r3, #0
 80090f4:	2201      	movs	r2, #1
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fb03 	bl	8009702 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80090fc:	2300      	movs	r3, #0

}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b088      	sub	sp, #32
 800910a:	af04      	add	r7, sp, #16
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	4611      	mov	r1, r2
 8009112:	461a      	mov	r2, r3
 8009114:	460b      	mov	r3, r1
 8009116:	80fb      	strh	r3, [r7, #6]
 8009118:	4613      	mov	r3, r2
 800911a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800912a:	7979      	ldrb	r1, [r7, #5]
 800912c:	7e3b      	ldrb	r3, [r7, #24]
 800912e:	9303      	str	r3, [sp, #12]
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	9302      	str	r3, [sp, #8]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	2301      	movs	r3, #1
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	2302      	movs	r3, #2
 800913e:	2200      	movs	r2, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fade 	bl	8009702 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af04      	add	r7, sp, #16
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	4611      	mov	r1, r2
 800915c:	461a      	mov	r2, r3
 800915e:	460b      	mov	r3, r1
 8009160:	80fb      	strh	r3, [r7, #6]
 8009162:	4613      	mov	r3, r2
 8009164:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009166:	7979      	ldrb	r1, [r7, #5]
 8009168:	2300      	movs	r3, #0
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	88fb      	ldrh	r3, [r7, #6]
 800916e:	9302      	str	r3, [sp, #8]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	2301      	movs	r3, #1
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	2302      	movs	r3, #2
 800917a:	2201      	movs	r2, #1
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 fac0 	bl	8009702 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af04      	add	r7, sp, #16
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	4608      	mov	r0, r1
 8009196:	4611      	mov	r1, r2
 8009198:	461a      	mov	r2, r3
 800919a:	4603      	mov	r3, r0
 800919c:	70fb      	strb	r3, [r7, #3]
 800919e:	460b      	mov	r3, r1
 80091a0:	70bb      	strb	r3, [r7, #2]
 80091a2:	4613      	mov	r3, r2
 80091a4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80091a6:	7878      	ldrb	r0, [r7, #1]
 80091a8:	78ba      	ldrb	r2, [r7, #2]
 80091aa:	78f9      	ldrb	r1, [r7, #3]
 80091ac:	8b3b      	ldrh	r3, [r7, #24]
 80091ae:	9302      	str	r3, [sp, #8]
 80091b0:	7d3b      	ldrb	r3, [r7, #20]
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	7c3b      	ldrb	r3, [r7, #16]
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	4603      	mov	r3, r0
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa53 	bl	8009666 <USBH_LL_OpenPipe>

  return USBH_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80091d6:	78fb      	ldrb	r3, [r7, #3]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa72 	bl	80096c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f836 	bl	8009268 <USBH_GetFreePipe>
 80091fc:	4603      	mov	r3, r0
 80091fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009200:	89fb      	ldrh	r3, [r7, #14]
 8009202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009206:	4293      	cmp	r3, r2
 8009208:	d00a      	beq.n	8009220 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	33e0      	adds	r3, #224	; 0xe0
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009220:	89fb      	ldrh	r3, [r7, #14]
 8009222:	b2db      	uxtb	r3, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	2b0a      	cmp	r3, #10
 800923c:	d80d      	bhi.n	800925a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	33e0      	adds	r3, #224	; 0xe0
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	33e0      	adds	r3, #224	; 0xe0
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	440b      	add	r3, r1
 8009258:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
 8009278:	e00f      	b.n	800929a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	33e0      	adds	r3, #224	; 0xe0
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d102      	bne.n	8009294 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	b29b      	uxth	r3, r3
 8009292:	e007      	b.n	80092a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	3301      	adds	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b0a      	cmp	r3, #10
 800929e:	d9ec      	bls.n	800927a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80092a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80092b4:	2201      	movs	r2, #1
 80092b6:	490e      	ldr	r1, [pc, #56]	; (80092f0 <MX_USB_HOST_Init+0x40>)
 80092b8:	480e      	ldr	r0, [pc, #56]	; (80092f4 <MX_USB_HOST_Init+0x44>)
 80092ba:	f7fe fca1 	bl	8007c00 <USBH_Init>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80092c4:	f7f7 fe72 	bl	8000fac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80092c8:	490b      	ldr	r1, [pc, #44]	; (80092f8 <MX_USB_HOST_Init+0x48>)
 80092ca:	480a      	ldr	r0, [pc, #40]	; (80092f4 <MX_USB_HOST_Init+0x44>)
 80092cc:	f7fe fd26 	bl	8007d1c <USBH_RegisterClass>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80092d6:	f7f7 fe69 	bl	8000fac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80092da:	4806      	ldr	r0, [pc, #24]	; (80092f4 <MX_USB_HOST_Init+0x44>)
 80092dc:	f7fe fdaa 	bl	8007e34 <USBH_Start>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80092e6:	f7f7 fe61 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80092ea:	bf00      	nop
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	08009311 	.word	0x08009311
 80092f4:	200003c0 	.word	0x200003c0
 80092f8:	2000000c 	.word	0x2000000c

080092fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009300:	4802      	ldr	r0, [pc, #8]	; (800930c <MX_USB_HOST_Process+0x10>)
 8009302:	f7fe fda7 	bl	8007e54 <USBH_Process>
}
 8009306:	bf00      	nop
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	200003c0 	.word	0x200003c0

08009310 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	3b01      	subs	r3, #1
 8009320:	2b04      	cmp	r3, #4
 8009322:	d819      	bhi.n	8009358 <USBH_UserProcess+0x48>
 8009324:	a201      	add	r2, pc, #4	; (adr r2, 800932c <USBH_UserProcess+0x1c>)
 8009326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932a:	bf00      	nop
 800932c:	08009359 	.word	0x08009359
 8009330:	08009349 	.word	0x08009349
 8009334:	08009359 	.word	0x08009359
 8009338:	08009351 	.word	0x08009351
 800933c:	08009341 	.word	0x08009341
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009340:	4b09      	ldr	r3, [pc, #36]	; (8009368 <USBH_UserProcess+0x58>)
 8009342:	2203      	movs	r2, #3
 8009344:	701a      	strb	r2, [r3, #0]
  break;
 8009346:	e008      	b.n	800935a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009348:	4b07      	ldr	r3, [pc, #28]	; (8009368 <USBH_UserProcess+0x58>)
 800934a:	2202      	movs	r2, #2
 800934c:	701a      	strb	r2, [r3, #0]
  break;
 800934e:	e004      	b.n	800935a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <USBH_UserProcess+0x58>)
 8009352:	2201      	movs	r2, #1
 8009354:	701a      	strb	r2, [r3, #0]
  break;
 8009356:	e000      	b.n	800935a <USBH_UserProcess+0x4a>

  default:
  break;
 8009358:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20000108 	.word	0x20000108

0800936c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08a      	sub	sp, #40	; 0x28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009374:	f107 0314 	add.w	r3, r7, #20
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	605a      	str	r2, [r3, #4]
 800937e:	609a      	str	r2, [r3, #8]
 8009380:	60da      	str	r2, [r3, #12]
 8009382:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800938c:	d147      	bne.n	800941e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800938e:	2300      	movs	r3, #0
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	4b25      	ldr	r3, [pc, #148]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	4a24      	ldr	r2, [pc, #144]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 8009398:	f043 0301 	orr.w	r3, r3, #1
 800939c:	6313      	str	r3, [r2, #48]	; 0x30
 800939e:	4b22      	ldr	r3, [pc, #136]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80093aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093b0:	2300      	movs	r3, #0
 80093b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80093b8:	f107 0314 	add.w	r3, r7, #20
 80093bc:	4619      	mov	r1, r3
 80093be:	481b      	ldr	r0, [pc, #108]	; (800942c <HAL_HCD_MspInit+0xc0>)
 80093c0:	f7f8 fd64 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80093c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80093c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ca:	2302      	movs	r3, #2
 80093cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093d2:	2300      	movs	r3, #0
 80093d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093d6:	230a      	movs	r3, #10
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093da:	f107 0314 	add.w	r3, r7, #20
 80093de:	4619      	mov	r1, r3
 80093e0:	4812      	ldr	r0, [pc, #72]	; (800942c <HAL_HCD_MspInit+0xc0>)
 80093e2:	f7f8 fd53 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093e6:	4b10      	ldr	r3, [pc, #64]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 80093e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ea:	4a0f      	ldr	r2, [pc, #60]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 80093ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f0:	6353      	str	r3, [r2, #52]	; 0x34
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 80093f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fa:	4a0b      	ldr	r2, [pc, #44]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 80093fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009400:	6453      	str	r3, [r2, #68]	; 0x44
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <HAL_HCD_MspInit+0xbc>)
 8009404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800940e:	2200      	movs	r2, #0
 8009410:	2100      	movs	r1, #0
 8009412:	2043      	movs	r0, #67	; 0x43
 8009414:	f7f8 f993 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009418:	2043      	movs	r0, #67	; 0x43
 800941a:	f7f8 f9ac 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800941e:	bf00      	nop
 8009420:	3728      	adds	r7, #40	; 0x28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40023800 	.word	0x40023800
 800942c:	40020000 	.word	0x40020000

08009430 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff f8db 	bl	80085fa <USBH_LL_IncTimer>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff f913 	bl	8008686 <USBH_LL_Connect>
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff f91c 	bl	80086b4 <USBH_LL_Disconnect>
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
 8009490:	4613      	mov	r3, r2
 8009492:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f8cd 	bl	800864e <USBH_LL_PortEnabled>
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff f8cd 	bl	800866a <USBH_LL_PortDisabled>
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d12a      	bne.n	8009540 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80094ea:	4a18      	ldr	r2, [pc, #96]	; (800954c <USBH_LL_Init+0x74>)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a15      	ldr	r2, [pc, #84]	; (800954c <USBH_LL_Init+0x74>)
 80094f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094fa:	4b14      	ldr	r3, [pc, #80]	; (800954c <USBH_LL_Init+0x74>)
 80094fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009500:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <USBH_LL_Init+0x74>)
 8009504:	2208      	movs	r2, #8
 8009506:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009508:	4b10      	ldr	r3, [pc, #64]	; (800954c <USBH_LL_Init+0x74>)
 800950a:	2201      	movs	r2, #1
 800950c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800950e:	4b0f      	ldr	r3, [pc, #60]	; (800954c <USBH_LL_Init+0x74>)
 8009510:	2200      	movs	r2, #0
 8009512:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009514:	4b0d      	ldr	r3, [pc, #52]	; (800954c <USBH_LL_Init+0x74>)
 8009516:	2202      	movs	r2, #2
 8009518:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800951a:	4b0c      	ldr	r3, [pc, #48]	; (800954c <USBH_LL_Init+0x74>)
 800951c:	2200      	movs	r2, #0
 800951e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009520:	480a      	ldr	r0, [pc, #40]	; (800954c <USBH_LL_Init+0x74>)
 8009522:	f7f8 fe68 	bl	80021f6 <HAL_HCD_Init>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800952c:	f7f7 fd3e 	bl	8000fac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009530:	4806      	ldr	r0, [pc, #24]	; (800954c <USBH_LL_Init+0x74>)
 8009532:	f7f9 fa45 	bl	80029c0 <HAL_HCD_GetCurrentFrame>
 8009536:	4603      	mov	r3, r0
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff f84e 	bl	80085dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000798 	.word	0x20000798

08009550 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009566:	4618      	mov	r0, r3
 8009568:	f7f9 f9b4 	bl	80028d4 <HAL_HCD_Start>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 f95c 	bl	8009830 <USBH_Get_USB_Status>
 8009578:	4603      	mov	r3, r0
 800957a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800957c:	7bbb      	ldrb	r3, [r7, #14]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800959c:	4618      	mov	r0, r3
 800959e:	f7f9 f9bc 	bl	800291a <HAL_HCD_Stop>
 80095a2:	4603      	mov	r3, r0
 80095a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 f941 	bl	8009830 <USBH_Get_USB_Status>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f9 fa04 	bl	80029dc <HAL_HCD_GetCurrentSpeed>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d00c      	beq.n	80095f4 <USBH_LL_GetSpeed+0x38>
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d80d      	bhi.n	80095fa <USBH_LL_GetSpeed+0x3e>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <USBH_LL_GetSpeed+0x2c>
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d003      	beq.n	80095ee <USBH_LL_GetSpeed+0x32>
 80095e6:	e008      	b.n	80095fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
    break;
 80095ec:	e008      	b.n	8009600 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80095ee:	2301      	movs	r3, #1
 80095f0:	73fb      	strb	r3, [r7, #15]
    break;
 80095f2:	e005      	b.n	8009600 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80095f4:	2302      	movs	r3, #2
 80095f6:	73fb      	strb	r3, [r7, #15]
    break;
 80095f8:	e002      	b.n	8009600 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80095fa:	2301      	movs	r3, #1
 80095fc:	73fb      	strb	r3, [r7, #15]
    break;
 80095fe:	bf00      	nop
  }
  return  speed;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009620:	4618      	mov	r0, r3
 8009622:	f7f9 f997 	bl	8002954 <HAL_HCD_ResetPort>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	4618      	mov	r0, r3
 800962e:	f000 f8ff 	bl	8009830 <USBH_Get_USB_Status>
 8009632:	4603      	mov	r3, r0
 8009634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009636:	7bbb      	ldrb	r3, [r7, #14]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7f9 f99e 	bl	8002998 <HAL_HCD_HC_GetXferCount>
 800965c:	4603      	mov	r3, r0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009666:	b590      	push	{r4, r7, lr}
 8009668:	b089      	sub	sp, #36	; 0x24
 800966a:	af04      	add	r7, sp, #16
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	4608      	mov	r0, r1
 8009670:	4611      	mov	r1, r2
 8009672:	461a      	mov	r2, r3
 8009674:	4603      	mov	r3, r0
 8009676:	70fb      	strb	r3, [r7, #3]
 8009678:	460b      	mov	r3, r1
 800967a:	70bb      	strb	r3, [r7, #2]
 800967c:	4613      	mov	r3, r2
 800967e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800968e:	787c      	ldrb	r4, [r7, #1]
 8009690:	78ba      	ldrb	r2, [r7, #2]
 8009692:	78f9      	ldrb	r1, [r7, #3]
 8009694:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009696:	9302      	str	r3, [sp, #8]
 8009698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	4623      	mov	r3, r4
 80096a6:	f7f8 fe08 	bl	80022ba <HAL_HCD_HC_Init>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f8bd 	bl	8009830 <USBH_Get_USB_Status>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd90      	pop	{r4, r7, pc}

080096c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096de:	78fa      	ldrb	r2, [r7, #3]
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f8 fe78 	bl	80023d8 <HAL_HCD_HC_Halt>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f89e 	bl	8009830 <USBH_Get_USB_Status>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009702:	b590      	push	{r4, r7, lr}
 8009704:	b089      	sub	sp, #36	; 0x24
 8009706:	af04      	add	r7, sp, #16
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	4608      	mov	r0, r1
 800970c:	4611      	mov	r1, r2
 800970e:	461a      	mov	r2, r3
 8009710:	4603      	mov	r3, r0
 8009712:	70fb      	strb	r3, [r7, #3]
 8009714:	460b      	mov	r3, r1
 8009716:	70bb      	strb	r3, [r7, #2]
 8009718:	4613      	mov	r3, r2
 800971a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800972a:	787c      	ldrb	r4, [r7, #1]
 800972c:	78ba      	ldrb	r2, [r7, #2]
 800972e:	78f9      	ldrb	r1, [r7, #3]
 8009730:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009734:	9303      	str	r3, [sp, #12]
 8009736:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009738:	9302      	str	r3, [sp, #8]
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	4623      	mov	r3, r4
 8009746:	f7f8 fe6b 	bl	8002420 <HAL_HCD_HC_SubmitRequest>
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	4618      	mov	r0, r3
 8009752:	f000 f86d 	bl	8009830 <USBH_Get_USB_Status>
 8009756:	4603      	mov	r3, r0
 8009758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800975a:	7bbb      	ldrb	r3, [r7, #14]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	bd90      	pop	{r4, r7, pc}

08009764 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009776:	78fa      	ldrb	r2, [r7, #3]
 8009778:	4611      	mov	r1, r2
 800977a:	4618      	mov	r0, r3
 800977c:	f7f9 f8f8 	bl	8002970 <HAL_HCD_HC_GetURBState>
 8009780:	4603      	mov	r3, r0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	460b      	mov	r3, r1
 8009794:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800979c:	2b01      	cmp	r3, #1
 800979e:	d103      	bne.n	80097a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f870 	bl	8009888 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80097a8:	20c8      	movs	r0, #200	; 0xc8
 80097aa:	f7f7 fec9 	bl	8001540 <HAL_Delay>
  return USBH_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
 80097c4:	4613      	mov	r3, r2
 80097c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	212c      	movs	r1, #44	; 0x2c
 80097d6:	fb01 f303 	mul.w	r3, r1, r3
 80097da:	4413      	add	r3, r2
 80097dc:	333b      	adds	r3, #59	; 0x3b
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d009      	beq.n	80097f8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80097e4:	78fb      	ldrb	r3, [r7, #3]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	212c      	movs	r1, #44	; 0x2c
 80097ea:	fb01 f303 	mul.w	r3, r1, r3
 80097ee:	4413      	add	r3, r2
 80097f0:	3354      	adds	r3, #84	; 0x54
 80097f2:	78ba      	ldrb	r2, [r7, #2]
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	e008      	b.n	800980a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	212c      	movs	r1, #44	; 0x2c
 80097fe:	fb01 f303 	mul.w	r3, r1, r3
 8009802:	4413      	add	r3, r2
 8009804:	3355      	adds	r3, #85	; 0x55
 8009806:	78ba      	ldrb	r2, [r7, #2]
 8009808:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7f7 fe8d 	bl	8001540 <HAL_Delay>
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	2b03      	cmp	r3, #3
 8009842:	d817      	bhi.n	8009874 <USBH_Get_USB_Status+0x44>
 8009844:	a201      	add	r2, pc, #4	; (adr r2, 800984c <USBH_Get_USB_Status+0x1c>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	0800985d 	.word	0x0800985d
 8009850:	08009863 	.word	0x08009863
 8009854:	08009869 	.word	0x08009869
 8009858:	0800986f 	.word	0x0800986f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
    break;
 8009860:	e00b      	b.n	800987a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009862:	2302      	movs	r3, #2
 8009864:	73fb      	strb	r3, [r7, #15]
    break;
 8009866:	e008      	b.n	800987a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
    break;
 800986c:	e005      	b.n	800987a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800986e:	2302      	movs	r3, #2
 8009870:	73fb      	strb	r3, [r7, #15]
    break;
 8009872:	e002      	b.n	800987a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009874:	2302      	movs	r3, #2
 8009876:	73fb      	strb	r3, [r7, #15]
    break;
 8009878:	bf00      	nop
  }
  return usb_status;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800989c:	2301      	movs	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]
 80098a0:	e001      	b.n	80098a6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	461a      	mov	r2, r3
 80098aa:	2101      	movs	r1, #1
 80098ac:	4803      	ldr	r0, [pc, #12]	; (80098bc <MX_DriverVbusFS+0x34>)
 80098ae:	f7f8 fc89 	bl	80021c4 <HAL_GPIO_WritePin>
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	40020800 	.word	0x40020800

080098c0 <sinf>:
 80098c0:	ee10 3a10 	vmov	r3, s0
 80098c4:	b507      	push	{r0, r1, r2, lr}
 80098c6:	4a1d      	ldr	r2, [pc, #116]	; (800993c <sinf+0x7c>)
 80098c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098cc:	4293      	cmp	r3, r2
 80098ce:	dc05      	bgt.n	80098dc <sinf+0x1c>
 80098d0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8009940 <sinf+0x80>
 80098d4:	2000      	movs	r0, #0
 80098d6:	f000 fc5b 	bl	800a190 <__kernel_sinf>
 80098da:	e004      	b.n	80098e6 <sinf+0x26>
 80098dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80098e0:	db04      	blt.n	80098ec <sinf+0x2c>
 80098e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80098e6:	b003      	add	sp, #12
 80098e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80098ec:	4668      	mov	r0, sp
 80098ee:	f000 f829 	bl	8009944 <__ieee754_rem_pio2f>
 80098f2:	f000 0003 	and.w	r0, r0, #3
 80098f6:	2801      	cmp	r0, #1
 80098f8:	d008      	beq.n	800990c <sinf+0x4c>
 80098fa:	2802      	cmp	r0, #2
 80098fc:	d00d      	beq.n	800991a <sinf+0x5a>
 80098fe:	b9b0      	cbnz	r0, 800992e <sinf+0x6e>
 8009900:	eddd 0a01 	vldr	s1, [sp, #4]
 8009904:	ed9d 0a00 	vldr	s0, [sp]
 8009908:	2001      	movs	r0, #1
 800990a:	e7e4      	b.n	80098d6 <sinf+0x16>
 800990c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009910:	ed9d 0a00 	vldr	s0, [sp]
 8009914:	f000 f952 	bl	8009bbc <__kernel_cosf>
 8009918:	e7e5      	b.n	80098e6 <sinf+0x26>
 800991a:	eddd 0a01 	vldr	s1, [sp, #4]
 800991e:	ed9d 0a00 	vldr	s0, [sp]
 8009922:	2001      	movs	r0, #1
 8009924:	f000 fc34 	bl	800a190 <__kernel_sinf>
 8009928:	eeb1 0a40 	vneg.f32	s0, s0
 800992c:	e7db      	b.n	80098e6 <sinf+0x26>
 800992e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009932:	ed9d 0a00 	vldr	s0, [sp]
 8009936:	f000 f941 	bl	8009bbc <__kernel_cosf>
 800993a:	e7f5      	b.n	8009928 <sinf+0x68>
 800993c:	3f490fd8 	.word	0x3f490fd8
 8009940:	00000000 	.word	0x00000000

08009944 <__ieee754_rem_pio2f>:
 8009944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009946:	ee10 6a10 	vmov	r6, s0
 800994a:	4b8e      	ldr	r3, [pc, #568]	; (8009b84 <__ieee754_rem_pio2f+0x240>)
 800994c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009950:	429d      	cmp	r5, r3
 8009952:	b087      	sub	sp, #28
 8009954:	eef0 7a40 	vmov.f32	s15, s0
 8009958:	4604      	mov	r4, r0
 800995a:	dc05      	bgt.n	8009968 <__ieee754_rem_pio2f+0x24>
 800995c:	2300      	movs	r3, #0
 800995e:	ed80 0a00 	vstr	s0, [r0]
 8009962:	6043      	str	r3, [r0, #4]
 8009964:	2000      	movs	r0, #0
 8009966:	e01a      	b.n	800999e <__ieee754_rem_pio2f+0x5a>
 8009968:	4b87      	ldr	r3, [pc, #540]	; (8009b88 <__ieee754_rem_pio2f+0x244>)
 800996a:	429d      	cmp	r5, r3
 800996c:	dc46      	bgt.n	80099fc <__ieee754_rem_pio2f+0xb8>
 800996e:	2e00      	cmp	r6, #0
 8009970:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009b8c <__ieee754_rem_pio2f+0x248>
 8009974:	4b86      	ldr	r3, [pc, #536]	; (8009b90 <__ieee754_rem_pio2f+0x24c>)
 8009976:	f025 050f 	bic.w	r5, r5, #15
 800997a:	dd1f      	ble.n	80099bc <__ieee754_rem_pio2f+0x78>
 800997c:	429d      	cmp	r5, r3
 800997e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009982:	d00e      	beq.n	80099a2 <__ieee754_rem_pio2f+0x5e>
 8009984:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009b94 <__ieee754_rem_pio2f+0x250>
 8009988:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800998c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009990:	ed80 0a00 	vstr	s0, [r0]
 8009994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009998:	2001      	movs	r0, #1
 800999a:	edc4 7a01 	vstr	s15, [r4, #4]
 800999e:	b007      	add	sp, #28
 80099a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009b98 <__ieee754_rem_pio2f+0x254>
 80099a6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009b9c <__ieee754_rem_pio2f+0x258>
 80099aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80099ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80099b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099b6:	edc0 6a00 	vstr	s13, [r0]
 80099ba:	e7eb      	b.n	8009994 <__ieee754_rem_pio2f+0x50>
 80099bc:	429d      	cmp	r5, r3
 80099be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80099c2:	d00e      	beq.n	80099e2 <__ieee754_rem_pio2f+0x9e>
 80099c4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009b94 <__ieee754_rem_pio2f+0x250>
 80099c8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80099cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80099d0:	ed80 0a00 	vstr	s0, [r0]
 80099d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80099e0:	e7dd      	b.n	800999e <__ieee754_rem_pio2f+0x5a>
 80099e2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009b98 <__ieee754_rem_pio2f+0x254>
 80099e6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009b9c <__ieee754_rem_pio2f+0x258>
 80099ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80099ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 80099f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80099f6:	edc0 6a00 	vstr	s13, [r0]
 80099fa:	e7eb      	b.n	80099d4 <__ieee754_rem_pio2f+0x90>
 80099fc:	4b68      	ldr	r3, [pc, #416]	; (8009ba0 <__ieee754_rem_pio2f+0x25c>)
 80099fe:	429d      	cmp	r5, r3
 8009a00:	dc72      	bgt.n	8009ae8 <__ieee754_rem_pio2f+0x1a4>
 8009a02:	f000 fc0d 	bl	800a220 <fabsf>
 8009a06:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009ba4 <__ieee754_rem_pio2f+0x260>
 8009a0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009a0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a1a:	ee17 0a90 	vmov	r0, s15
 8009a1e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009b8c <__ieee754_rem_pio2f+0x248>
 8009a22:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009a26:	281f      	cmp	r0, #31
 8009a28:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009b94 <__ieee754_rem_pio2f+0x250>
 8009a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a30:	eeb1 6a47 	vneg.f32	s12, s14
 8009a34:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009a38:	ee16 2a90 	vmov	r2, s13
 8009a3c:	dc1c      	bgt.n	8009a78 <__ieee754_rem_pio2f+0x134>
 8009a3e:	495a      	ldr	r1, [pc, #360]	; (8009ba8 <__ieee754_rem_pio2f+0x264>)
 8009a40:	1e47      	subs	r7, r0, #1
 8009a42:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8009a46:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009a4a:	428b      	cmp	r3, r1
 8009a4c:	d014      	beq.n	8009a78 <__ieee754_rem_pio2f+0x134>
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	ed94 7a00 	vldr	s14, [r4]
 8009a54:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009a58:	2e00      	cmp	r6, #0
 8009a5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a5e:	ed84 0a01 	vstr	s0, [r4, #4]
 8009a62:	da9c      	bge.n	800999e <__ieee754_rem_pio2f+0x5a>
 8009a64:	eeb1 7a47 	vneg.f32	s14, s14
 8009a68:	eeb1 0a40 	vneg.f32	s0, s0
 8009a6c:	ed84 7a00 	vstr	s14, [r4]
 8009a70:	ed84 0a01 	vstr	s0, [r4, #4]
 8009a74:	4240      	negs	r0, r0
 8009a76:	e792      	b.n	800999e <__ieee754_rem_pio2f+0x5a>
 8009a78:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009a7c:	15eb      	asrs	r3, r5, #23
 8009a7e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009a82:	2d08      	cmp	r5, #8
 8009a84:	dde3      	ble.n	8009a4e <__ieee754_rem_pio2f+0x10a>
 8009a86:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009b98 <__ieee754_rem_pio2f+0x254>
 8009a8a:	eef0 6a40 	vmov.f32	s13, s0
 8009a8e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009a92:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009a96:	eea6 0a27 	vfma.f32	s0, s12, s15
 8009a9a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009b9c <__ieee754_rem_pio2f+0x258>
 8009a9e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8009aa2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009aa6:	eef0 7a40 	vmov.f32	s15, s0
 8009aaa:	ee15 2a90 	vmov	r2, s11
 8009aae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009ab2:	1a5b      	subs	r3, r3, r1
 8009ab4:	2b19      	cmp	r3, #25
 8009ab6:	dc04      	bgt.n	8009ac2 <__ieee754_rem_pio2f+0x17e>
 8009ab8:	edc4 5a00 	vstr	s11, [r4]
 8009abc:	eeb0 0a66 	vmov.f32	s0, s13
 8009ac0:	e7c6      	b.n	8009a50 <__ieee754_rem_pio2f+0x10c>
 8009ac2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009bac <__ieee754_rem_pio2f+0x268>
 8009ac6:	eeb0 0a66 	vmov.f32	s0, s13
 8009aca:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009ace:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009ad2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009bb0 <__ieee754_rem_pio2f+0x26c>
 8009ad6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009ada:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009ade:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009ae2:	ed84 7a00 	vstr	s14, [r4]
 8009ae6:	e7b3      	b.n	8009a50 <__ieee754_rem_pio2f+0x10c>
 8009ae8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009aec:	db06      	blt.n	8009afc <__ieee754_rem_pio2f+0x1b8>
 8009aee:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009af2:	edc0 7a01 	vstr	s15, [r0, #4]
 8009af6:	edc0 7a00 	vstr	s15, [r0]
 8009afa:	e733      	b.n	8009964 <__ieee754_rem_pio2f+0x20>
 8009afc:	15ea      	asrs	r2, r5, #23
 8009afe:	3a86      	subs	r2, #134	; 0x86
 8009b00:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009b0c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009bb4 <__ieee754_rem_pio2f+0x270>
 8009b10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b18:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009b1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009b24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b2c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009b30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	edcd 7a05 	vstr	s15, [sp, #20]
 8009b40:	d11e      	bne.n	8009b80 <__ieee754_rem_pio2f+0x23c>
 8009b42:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b4a:	bf14      	ite	ne
 8009b4c:	2302      	movne	r3, #2
 8009b4e:	2301      	moveq	r3, #1
 8009b50:	4919      	ldr	r1, [pc, #100]	; (8009bb8 <__ieee754_rem_pio2f+0x274>)
 8009b52:	9101      	str	r1, [sp, #4]
 8009b54:	2102      	movs	r1, #2
 8009b56:	9100      	str	r1, [sp, #0]
 8009b58:	a803      	add	r0, sp, #12
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	f000 f88e 	bl	8009c7c <__kernel_rem_pio2f>
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	f6bf af1c 	bge.w	800999e <__ieee754_rem_pio2f+0x5a>
 8009b66:	edd4 7a00 	vldr	s15, [r4]
 8009b6a:	eef1 7a67 	vneg.f32	s15, s15
 8009b6e:	edc4 7a00 	vstr	s15, [r4]
 8009b72:	edd4 7a01 	vldr	s15, [r4, #4]
 8009b76:	eef1 7a67 	vneg.f32	s15, s15
 8009b7a:	edc4 7a01 	vstr	s15, [r4, #4]
 8009b7e:	e779      	b.n	8009a74 <__ieee754_rem_pio2f+0x130>
 8009b80:	2303      	movs	r3, #3
 8009b82:	e7e5      	b.n	8009b50 <__ieee754_rem_pio2f+0x20c>
 8009b84:	3f490fd8 	.word	0x3f490fd8
 8009b88:	4016cbe3 	.word	0x4016cbe3
 8009b8c:	3fc90f80 	.word	0x3fc90f80
 8009b90:	3fc90fd0 	.word	0x3fc90fd0
 8009b94:	37354443 	.word	0x37354443
 8009b98:	37354400 	.word	0x37354400
 8009b9c:	2e85a308 	.word	0x2e85a308
 8009ba0:	43490f80 	.word	0x43490f80
 8009ba4:	3f22f984 	.word	0x3f22f984
 8009ba8:	0800a604 	.word	0x0800a604
 8009bac:	2e85a300 	.word	0x2e85a300
 8009bb0:	248d3132 	.word	0x248d3132
 8009bb4:	43800000 	.word	0x43800000
 8009bb8:	0800a684 	.word	0x0800a684

08009bbc <__kernel_cosf>:
 8009bbc:	ee10 3a10 	vmov	r3, s0
 8009bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bc4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009bc8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009bcc:	da05      	bge.n	8009bda <__kernel_cosf+0x1e>
 8009bce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009bd2:	ee17 2a90 	vmov	r2, s15
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d03d      	beq.n	8009c56 <__kernel_cosf+0x9a>
 8009bda:	ee60 5a00 	vmul.f32	s11, s0, s0
 8009bde:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009c5c <__kernel_cosf+0xa0>
 8009be2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009c60 <__kernel_cosf+0xa4>
 8009be6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009c64 <__kernel_cosf+0xa8>
 8009bea:	4a1f      	ldr	r2, [pc, #124]	; (8009c68 <__kernel_cosf+0xac>)
 8009bec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009c6c <__kernel_cosf+0xb0>
 8009bf6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009bfa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009c70 <__kernel_cosf+0xb4>
 8009bfe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009c02:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009c74 <__kernel_cosf+0xb8>
 8009c06:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009c0a:	eeb0 7a66 	vmov.f32	s14, s13
 8009c0e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009c12:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009c16:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8009c1a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8009c1e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8009c22:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009c26:	dc04      	bgt.n	8009c32 <__kernel_cosf+0x76>
 8009c28:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009c2c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009c30:	4770      	bx	lr
 8009c32:	4a11      	ldr	r2, [pc, #68]	; (8009c78 <__kernel_cosf+0xbc>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	bfda      	itte	le
 8009c38:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8009c3c:	ee06 3a90 	vmovle	s13, r3
 8009c40:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009c44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c48:	ee36 0a66 	vsub.f32	s0, s12, s13
 8009c4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c54:	4770      	bx	lr
 8009c56:	eeb0 0a46 	vmov.f32	s0, s12
 8009c5a:	4770      	bx	lr
 8009c5c:	ad47d74e 	.word	0xad47d74e
 8009c60:	310f74f6 	.word	0x310f74f6
 8009c64:	3d2aaaab 	.word	0x3d2aaaab
 8009c68:	3e999999 	.word	0x3e999999
 8009c6c:	b493f27c 	.word	0xb493f27c
 8009c70:	37d00d01 	.word	0x37d00d01
 8009c74:	bab60b61 	.word	0xbab60b61
 8009c78:	3f480000 	.word	0x3f480000

08009c7c <__kernel_rem_pio2f>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	ed2d 8b04 	vpush	{d8-d9}
 8009c84:	b0d7      	sub	sp, #348	; 0x15c
 8009c86:	4616      	mov	r6, r2
 8009c88:	4698      	mov	r8, r3
 8009c8a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009c8c:	4bbb      	ldr	r3, [pc, #748]	; (8009f7c <__kernel_rem_pio2f+0x300>)
 8009c8e:	9001      	str	r0, [sp, #4]
 8009c90:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8009c94:	1d33      	adds	r3, r6, #4
 8009c96:	460d      	mov	r5, r1
 8009c98:	f108 39ff 	add.w	r9, r8, #4294967295
 8009c9c:	db29      	blt.n	8009cf2 <__kernel_rem_pio2f+0x76>
 8009c9e:	1ef1      	subs	r1, r6, #3
 8009ca0:	bf48      	it	mi
 8009ca2:	1d31      	addmi	r1, r6, #4
 8009ca4:	10c9      	asrs	r1, r1, #3
 8009ca6:	1c4c      	adds	r4, r1, #1
 8009ca8:	00e3      	lsls	r3, r4, #3
 8009caa:	9302      	str	r3, [sp, #8]
 8009cac:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009cae:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8009f8c <__kernel_rem_pio2f+0x310>
 8009cb2:	eba1 0009 	sub.w	r0, r1, r9
 8009cb6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8009cba:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8009cbe:	eb07 0c09 	add.w	ip, r7, r9
 8009cc2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4563      	cmp	r3, ip
 8009cca:	dd14      	ble.n	8009cf6 <__kernel_rem_pio2f+0x7a>
 8009ccc:	ab1a      	add	r3, sp, #104	; 0x68
 8009cce:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8009cd2:	46cc      	mov	ip, r9
 8009cd4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8009cd8:	f1c8 0b01 	rsb	fp, r8, #1
 8009cdc:	eb0b 020c 	add.w	r2, fp, ip
 8009ce0:	4297      	cmp	r7, r2
 8009ce2:	db27      	blt.n	8009d34 <__kernel_rem_pio2f+0xb8>
 8009ce4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009ce8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009f8c <__kernel_rem_pio2f+0x310>
 8009cec:	4618      	mov	r0, r3
 8009cee:	2200      	movs	r2, #0
 8009cf0:	e016      	b.n	8009d20 <__kernel_rem_pio2f+0xa4>
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	e7d7      	b.n	8009ca6 <__kernel_rem_pio2f+0x2a>
 8009cf6:	42d8      	cmn	r0, r3
 8009cf8:	bf5d      	ittte	pl
 8009cfa:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8009cfe:	ee07 2a90 	vmovpl	s15, r2
 8009d02:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009d06:	eef0 7a47 	vmovmi.f32	s15, s14
 8009d0a:	ecea 7a01 	vstmia	sl!, {s15}
 8009d0e:	3301      	adds	r3, #1
 8009d10:	e7da      	b.n	8009cc8 <__kernel_rem_pio2f+0x4c>
 8009d12:	ecfe 6a01 	vldmia	lr!, {s13}
 8009d16:	ed90 7a00 	vldr	s14, [r0]
 8009d1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009d1e:	3201      	adds	r2, #1
 8009d20:	454a      	cmp	r2, r9
 8009d22:	f1a0 0004 	sub.w	r0, r0, #4
 8009d26:	ddf4      	ble.n	8009d12 <__kernel_rem_pio2f+0x96>
 8009d28:	ecea 7a01 	vstmia	sl!, {s15}
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	f10c 0c01 	add.w	ip, ip, #1
 8009d32:	e7d3      	b.n	8009cdc <__kernel_rem_pio2f+0x60>
 8009d34:	ab06      	add	r3, sp, #24
 8009d36:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009d3e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8009f88 <__kernel_rem_pio2f+0x30c>
 8009d42:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8009f84 <__kernel_rem_pio2f+0x308>
 8009d46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009d4a:	9303      	str	r3, [sp, #12]
 8009d4c:	46ba      	mov	sl, r7
 8009d4e:	ab56      	add	r3, sp, #344	; 0x158
 8009d50:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009d54:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8009d58:	ab06      	add	r3, sp, #24
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	4652      	mov	r2, sl
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	dc51      	bgt.n	8009e06 <__kernel_rem_pio2f+0x18a>
 8009d62:	4620      	mov	r0, r4
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	f000 faa5 	bl	800a2b4 <scalbnf>
 8009d6a:	eeb0 8a40 	vmov.f32	s16, s0
 8009d6e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8009d72:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009d76:	f000 fa5b 	bl	800a230 <floorf>
 8009d7a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009d7e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009d82:	2c00      	cmp	r4, #0
 8009d84:	9b05      	ldr	r3, [sp, #20]
 8009d86:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009d8a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009d8e:	edcd 7a00 	vstr	s15, [sp]
 8009d92:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009d96:	dd4b      	ble.n	8009e30 <__kernel_rem_pio2f+0x1b4>
 8009d98:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009d9c:	aa06      	add	r2, sp, #24
 8009d9e:	f1c4 0e08 	rsb	lr, r4, #8
 8009da2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009da6:	ee17 1a90 	vmov	r1, s15
 8009daa:	fa42 f00e 	asr.w	r0, r2, lr
 8009dae:	4401      	add	r1, r0
 8009db0:	9100      	str	r1, [sp, #0]
 8009db2:	fa00 f00e 	lsl.w	r0, r0, lr
 8009db6:	a906      	add	r1, sp, #24
 8009db8:	1a12      	subs	r2, r2, r0
 8009dba:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009dbe:	f1c4 0007 	rsb	r0, r4, #7
 8009dc2:	fa42 fb00 	asr.w	fp, r2, r0
 8009dc6:	f1bb 0f00 	cmp.w	fp, #0
 8009dca:	dd43      	ble.n	8009e54 <__kernel_rem_pio2f+0x1d8>
 8009dcc:	9a00      	ldr	r2, [sp, #0]
 8009dce:	f04f 0e00 	mov.w	lr, #0
 8009dd2:	3201      	adds	r2, #1
 8009dd4:	9200      	str	r2, [sp, #0]
 8009dd6:	4670      	mov	r0, lr
 8009dd8:	45f2      	cmp	sl, lr
 8009dda:	dc6c      	bgt.n	8009eb6 <__kernel_rem_pio2f+0x23a>
 8009ddc:	2c00      	cmp	r4, #0
 8009dde:	dd04      	ble.n	8009dea <__kernel_rem_pio2f+0x16e>
 8009de0:	2c01      	cmp	r4, #1
 8009de2:	d079      	beq.n	8009ed8 <__kernel_rem_pio2f+0x25c>
 8009de4:	2c02      	cmp	r4, #2
 8009de6:	f000 8082 	beq.w	8009eee <__kernel_rem_pio2f+0x272>
 8009dea:	f1bb 0f02 	cmp.w	fp, #2
 8009dee:	d131      	bne.n	8009e54 <__kernel_rem_pio2f+0x1d8>
 8009df0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009df4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009df8:	b360      	cbz	r0, 8009e54 <__kernel_rem_pio2f+0x1d8>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 fa5a 	bl	800a2b4 <scalbnf>
 8009e00:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009e04:	e026      	b.n	8009e54 <__kernel_rem_pio2f+0x1d8>
 8009e06:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009e0a:	3a01      	subs	r2, #1
 8009e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e10:	a942      	add	r1, sp, #264	; 0x108
 8009e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e16:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8009e1a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009e1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009e22:	eca0 0a01 	vstmia	r0!, {s0}
 8009e26:	ed9c 0a00 	vldr	s0, [ip]
 8009e2a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009e2e:	e796      	b.n	8009d5e <__kernel_rem_pio2f+0xe2>
 8009e30:	d107      	bne.n	8009e42 <__kernel_rem_pio2f+0x1c6>
 8009e32:	f10a 32ff 	add.w	r2, sl, #4294967295
 8009e36:	a906      	add	r1, sp, #24
 8009e38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e3c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8009e40:	e7c1      	b.n	8009dc6 <__kernel_rem_pio2f+0x14a>
 8009e42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009e46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4e:	da2f      	bge.n	8009eb0 <__kernel_rem_pio2f+0x234>
 8009e50:	f04f 0b00 	mov.w	fp, #0
 8009e54:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5c:	f040 8098 	bne.w	8009f90 <__kernel_rem_pio2f+0x314>
 8009e60:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009e64:	469c      	mov	ip, r3
 8009e66:	2200      	movs	r2, #0
 8009e68:	45bc      	cmp	ip, r7
 8009e6a:	da48      	bge.n	8009efe <__kernel_rem_pio2f+0x282>
 8009e6c:	2a00      	cmp	r2, #0
 8009e6e:	d05f      	beq.n	8009f30 <__kernel_rem_pio2f+0x2b4>
 8009e70:	aa06      	add	r2, sp, #24
 8009e72:	3c08      	subs	r4, #8
 8009e74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	d07d      	beq.n	8009f78 <__kernel_rem_pio2f+0x2fc>
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	f000 fa16 	bl	800a2b4 <scalbnf>
 8009e88:	9b01      	ldr	r3, [sp, #4]
 8009e8a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009f88 <__kernel_rem_pio2f+0x30c>
 8009e8e:	4619      	mov	r1, r3
 8009e90:	2900      	cmp	r1, #0
 8009e92:	f280 80af 	bge.w	8009ff4 <__kernel_rem_pio2f+0x378>
 8009e96:	4618      	mov	r0, r3
 8009e98:	2400      	movs	r4, #0
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f2c0 80d0 	blt.w	800a040 <__kernel_rem_pio2f+0x3c4>
 8009ea0:	a942      	add	r1, sp, #264	; 0x108
 8009ea2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8009ea6:	4a36      	ldr	r2, [pc, #216]	; (8009f80 <__kernel_rem_pio2f+0x304>)
 8009ea8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8009f8c <__kernel_rem_pio2f+0x310>
 8009eac:	2100      	movs	r1, #0
 8009eae:	e0bb      	b.n	800a028 <__kernel_rem_pio2f+0x3ac>
 8009eb0:	f04f 0b02 	mov.w	fp, #2
 8009eb4:	e78a      	b.n	8009dcc <__kernel_rem_pio2f+0x150>
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	b948      	cbnz	r0, 8009ece <__kernel_rem_pio2f+0x252>
 8009eba:	b11a      	cbz	r2, 8009ec4 <__kernel_rem_pio2f+0x248>
 8009ebc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f10e 0e01 	add.w	lr, lr, #1
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4610      	mov	r0, r2
 8009ecc:	e784      	b.n	8009dd8 <__kernel_rem_pio2f+0x15c>
 8009ece:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	e7f5      	b.n	8009ec4 <__kernel_rem_pio2f+0x248>
 8009ed8:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009edc:	ab06      	add	r3, sp, #24
 8009ede:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee6:	aa06      	add	r2, sp, #24
 8009ee8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8009eec:	e77d      	b.n	8009dea <__kernel_rem_pio2f+0x16e>
 8009eee:	f10a 3cff 	add.w	ip, sl, #4294967295
 8009ef2:	ab06      	add	r3, sp, #24
 8009ef4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009efc:	e7f3      	b.n	8009ee6 <__kernel_rem_pio2f+0x26a>
 8009efe:	a906      	add	r1, sp, #24
 8009f00:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8009f04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009f08:	4302      	orrs	r2, r0
 8009f0a:	e7ad      	b.n	8009e68 <__kernel_rem_pio2f+0x1ec>
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	d0fa      	beq.n	8009f0c <__kernel_rem_pio2f+0x290>
 8009f16:	a91a      	add	r1, sp, #104	; 0x68
 8009f18:	eb0a 0208 	add.w	r2, sl, r8
 8009f1c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009f20:	f10a 0301 	add.w	r3, sl, #1
 8009f24:	eb0a 0100 	add.w	r1, sl, r0
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	da04      	bge.n	8009f36 <__kernel_rem_pio2f+0x2ba>
 8009f2c:	468a      	mov	sl, r1
 8009f2e:	e70e      	b.n	8009d4e <__kernel_rem_pio2f+0xd2>
 8009f30:	9b04      	ldr	r3, [sp, #16]
 8009f32:	2001      	movs	r0, #1
 8009f34:	e7eb      	b.n	8009f0e <__kernel_rem_pio2f+0x292>
 8009f36:	9803      	ldr	r0, [sp, #12]
 8009f38:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009f3c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009f40:	9000      	str	r0, [sp, #0]
 8009f42:	ee07 0a90 	vmov	s15, r0
 8009f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	ece2 7a01 	vstmia	r2!, {s15}
 8009f50:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009f8c <__kernel_rem_pio2f+0x310>
 8009f54:	4696      	mov	lr, r2
 8009f56:	4548      	cmp	r0, r9
 8009f58:	dd06      	ble.n	8009f68 <__kernel_rem_pio2f+0x2ec>
 8009f5a:	a842      	add	r0, sp, #264	; 0x108
 8009f5c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009f60:	edc0 7a00 	vstr	s15, [r0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	e7df      	b.n	8009f28 <__kernel_rem_pio2f+0x2ac>
 8009f68:	ecfc 6a01 	vldmia	ip!, {s13}
 8009f6c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8009f70:	3001      	adds	r0, #1
 8009f72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009f76:	e7ee      	b.n	8009f56 <__kernel_rem_pio2f+0x2da>
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	e779      	b.n	8009e70 <__kernel_rem_pio2f+0x1f4>
 8009f7c:	0800a9c8 	.word	0x0800a9c8
 8009f80:	0800a99c 	.word	0x0800a99c
 8009f84:	43800000 	.word	0x43800000
 8009f88:	3b800000 	.word	0x3b800000
 8009f8c:	00000000 	.word	0x00000000
 8009f90:	9b02      	ldr	r3, [sp, #8]
 8009f92:	eeb0 0a48 	vmov.f32	s0, s16
 8009f96:	1b98      	subs	r0, r3, r6
 8009f98:	f000 f98c 	bl	800a2b4 <scalbnf>
 8009f9c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009f84 <__kernel_rem_pio2f+0x308>
 8009fa0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa8:	db1b      	blt.n	8009fe2 <__kernel_rem_pio2f+0x366>
 8009faa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009f88 <__kernel_rem_pio2f+0x30c>
 8009fae:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009fb2:	aa06      	add	r2, sp, #24
 8009fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fb8:	a906      	add	r1, sp, #24
 8009fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fbe:	3408      	adds	r4, #8
 8009fc0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009fcc:	ee10 3a10 	vmov	r3, s0
 8009fd0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8009fd4:	ee17 2a90 	vmov	r2, s15
 8009fd8:	f10a 0301 	add.w	r3, sl, #1
 8009fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009fe0:	e74c      	b.n	8009e7c <__kernel_rem_pio2f+0x200>
 8009fe2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009fe6:	aa06      	add	r2, sp, #24
 8009fe8:	ee10 3a10 	vmov	r3, s0
 8009fec:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8009ff0:	4653      	mov	r3, sl
 8009ff2:	e743      	b.n	8009e7c <__kernel_rem_pio2f+0x200>
 8009ff4:	aa42      	add	r2, sp, #264	; 0x108
 8009ff6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8009ffa:	aa06      	add	r2, sp, #24
 8009ffc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a000:	9201      	str	r2, [sp, #4]
 800a002:	ee07 2a90 	vmov	s15, r2
 800a006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a00a:	3901      	subs	r1, #1
 800a00c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a010:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a014:	edc0 7a00 	vstr	s15, [r0]
 800a018:	e73a      	b.n	8009e90 <__kernel_rem_pio2f+0x214>
 800a01a:	ecf2 6a01 	vldmia	r2!, {s13}
 800a01e:	ecb6 7a01 	vldmia	r6!, {s14}
 800a022:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a026:	3101      	adds	r1, #1
 800a028:	42b9      	cmp	r1, r7
 800a02a:	dc01      	bgt.n	800a030 <__kernel_rem_pio2f+0x3b4>
 800a02c:	428c      	cmp	r4, r1
 800a02e:	daf4      	bge.n	800a01a <__kernel_rem_pio2f+0x39e>
 800a030:	aa56      	add	r2, sp, #344	; 0x158
 800a032:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800a036:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a03a:	3801      	subs	r0, #1
 800a03c:	3401      	adds	r4, #1
 800a03e:	e72c      	b.n	8009e9a <__kernel_rem_pio2f+0x21e>
 800a040:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a042:	2a02      	cmp	r2, #2
 800a044:	dc0a      	bgt.n	800a05c <__kernel_rem_pio2f+0x3e0>
 800a046:	2a00      	cmp	r2, #0
 800a048:	dc61      	bgt.n	800a10e <__kernel_rem_pio2f+0x492>
 800a04a:	d03c      	beq.n	800a0c6 <__kernel_rem_pio2f+0x44a>
 800a04c:	9b00      	ldr	r3, [sp, #0]
 800a04e:	f003 0007 	and.w	r0, r3, #7
 800a052:	b057      	add	sp, #348	; 0x15c
 800a054:	ecbd 8b04 	vpop	{d8-d9}
 800a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a05e:	2a03      	cmp	r2, #3
 800a060:	d1f4      	bne.n	800a04c <__kernel_rem_pio2f+0x3d0>
 800a062:	aa2e      	add	r2, sp, #184	; 0xb8
 800a064:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a068:	4608      	mov	r0, r1
 800a06a:	461c      	mov	r4, r3
 800a06c:	2c00      	cmp	r4, #0
 800a06e:	f1a0 0004 	sub.w	r0, r0, #4
 800a072:	dc59      	bgt.n	800a128 <__kernel_rem_pio2f+0x4ac>
 800a074:	4618      	mov	r0, r3
 800a076:	2801      	cmp	r0, #1
 800a078:	f1a1 0104 	sub.w	r1, r1, #4
 800a07c:	dc64      	bgt.n	800a148 <__kernel_rem_pio2f+0x4cc>
 800a07e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8009f8c <__kernel_rem_pio2f+0x310>
 800a082:	2b01      	cmp	r3, #1
 800a084:	dc70      	bgt.n	800a168 <__kernel_rem_pio2f+0x4ec>
 800a086:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a08a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a08e:	f1bb 0f00 	cmp.w	fp, #0
 800a092:	d172      	bne.n	800a17a <__kernel_rem_pio2f+0x4fe>
 800a094:	edc5 6a00 	vstr	s13, [r5]
 800a098:	ed85 7a01 	vstr	s14, [r5, #4]
 800a09c:	edc5 7a02 	vstr	s15, [r5, #8]
 800a0a0:	e7d4      	b.n	800a04c <__kernel_rem_pio2f+0x3d0>
 800a0a2:	aa2e      	add	r2, sp, #184	; 0xb8
 800a0a4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a0a8:	ed91 7a00 	vldr	s14, [r1]
 800a0ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	daf5      	bge.n	800a0a2 <__kernel_rem_pio2f+0x426>
 800a0b6:	f1bb 0f00 	cmp.w	fp, #0
 800a0ba:	d001      	beq.n	800a0c0 <__kernel_rem_pio2f+0x444>
 800a0bc:	eef1 7a67 	vneg.f32	s15, s15
 800a0c0:	edc5 7a00 	vstr	s15, [r5]
 800a0c4:	e7c2      	b.n	800a04c <__kernel_rem_pio2f+0x3d0>
 800a0c6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8009f8c <__kernel_rem_pio2f+0x310>
 800a0ca:	e7f2      	b.n	800a0b2 <__kernel_rem_pio2f+0x436>
 800a0cc:	aa2e      	add	r2, sp, #184	; 0xb8
 800a0ce:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a0d2:	edd0 7a00 	vldr	s15, [r0]
 800a0d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0da:	3901      	subs	r1, #1
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	daf5      	bge.n	800a0cc <__kernel_rem_pio2f+0x450>
 800a0e0:	f1bb 0f00 	cmp.w	fp, #0
 800a0e4:	d017      	beq.n	800a116 <__kernel_rem_pio2f+0x49a>
 800a0e6:	eef1 7a47 	vneg.f32	s15, s14
 800a0ea:	edc5 7a00 	vstr	s15, [r5]
 800a0ee:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a0f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0f6:	a82f      	add	r0, sp, #188	; 0xbc
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	428b      	cmp	r3, r1
 800a0fc:	da0e      	bge.n	800a11c <__kernel_rem_pio2f+0x4a0>
 800a0fe:	f1bb 0f00 	cmp.w	fp, #0
 800a102:	d001      	beq.n	800a108 <__kernel_rem_pio2f+0x48c>
 800a104:	eef1 7a67 	vneg.f32	s15, s15
 800a108:	edc5 7a01 	vstr	s15, [r5, #4]
 800a10c:	e79e      	b.n	800a04c <__kernel_rem_pio2f+0x3d0>
 800a10e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8009f8c <__kernel_rem_pio2f+0x310>
 800a112:	4619      	mov	r1, r3
 800a114:	e7e2      	b.n	800a0dc <__kernel_rem_pio2f+0x460>
 800a116:	eef0 7a47 	vmov.f32	s15, s14
 800a11a:	e7e6      	b.n	800a0ea <__kernel_rem_pio2f+0x46e>
 800a11c:	ecb0 7a01 	vldmia	r0!, {s14}
 800a120:	3101      	adds	r1, #1
 800a122:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a126:	e7e8      	b.n	800a0fa <__kernel_rem_pio2f+0x47e>
 800a128:	edd0 7a00 	vldr	s15, [r0]
 800a12c:	edd0 6a01 	vldr	s13, [r0, #4]
 800a130:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a134:	3c01      	subs	r4, #1
 800a136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a13a:	ed80 7a00 	vstr	s14, [r0]
 800a13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a142:	edc0 7a01 	vstr	s15, [r0, #4]
 800a146:	e791      	b.n	800a06c <__kernel_rem_pio2f+0x3f0>
 800a148:	edd1 7a00 	vldr	s15, [r1]
 800a14c:	edd1 6a01 	vldr	s13, [r1, #4]
 800a150:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a154:	3801      	subs	r0, #1
 800a156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a15a:	ed81 7a00 	vstr	s14, [r1]
 800a15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a162:	edc1 7a01 	vstr	s15, [r1, #4]
 800a166:	e786      	b.n	800a076 <__kernel_rem_pio2f+0x3fa>
 800a168:	aa2e      	add	r2, sp, #184	; 0xb8
 800a16a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a16e:	ed91 7a00 	vldr	s14, [r1]
 800a172:	3b01      	subs	r3, #1
 800a174:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a178:	e783      	b.n	800a082 <__kernel_rem_pio2f+0x406>
 800a17a:	eef1 6a66 	vneg.f32	s13, s13
 800a17e:	eeb1 7a47 	vneg.f32	s14, s14
 800a182:	edc5 6a00 	vstr	s13, [r5]
 800a186:	ed85 7a01 	vstr	s14, [r5, #4]
 800a18a:	eef1 7a67 	vneg.f32	s15, s15
 800a18e:	e785      	b.n	800a09c <__kernel_rem_pio2f+0x420>

0800a190 <__kernel_sinf>:
 800a190:	ee10 3a10 	vmov	r3, s0
 800a194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a198:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a19c:	da04      	bge.n	800a1a8 <__kernel_sinf+0x18>
 800a19e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a1a2:	ee17 3a90 	vmov	r3, s15
 800a1a6:	b35b      	cbz	r3, 800a200 <__kernel_sinf+0x70>
 800a1a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a1ac:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a204 <__kernel_sinf+0x74>
 800a1b0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a208 <__kernel_sinf+0x78>
 800a1b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a1b8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a20c <__kernel_sinf+0x7c>
 800a1bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a1c0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a210 <__kernel_sinf+0x80>
 800a1c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a1c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a214 <__kernel_sinf+0x84>
 800a1cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a1d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a1d4:	b930      	cbnz	r0, 800a1e4 <__kernel_sinf+0x54>
 800a1d6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a218 <__kernel_sinf+0x88>
 800a1da:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a1de:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a1e2:	4770      	bx	lr
 800a1e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a1e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a1ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a1f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a1f4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a21c <__kernel_sinf+0x8c>
 800a1f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a1fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	2f2ec9d3 	.word	0x2f2ec9d3
 800a208:	b2d72f34 	.word	0xb2d72f34
 800a20c:	3638ef1b 	.word	0x3638ef1b
 800a210:	b9500d01 	.word	0xb9500d01
 800a214:	3c088889 	.word	0x3c088889
 800a218:	be2aaaab 	.word	0xbe2aaaab
 800a21c:	3e2aaaab 	.word	0x3e2aaaab

0800a220 <fabsf>:
 800a220:	ee10 3a10 	vmov	r3, s0
 800a224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a228:	ee00 3a10 	vmov	s0, r3
 800a22c:	4770      	bx	lr
	...

0800a230 <floorf>:
 800a230:	ee10 3a10 	vmov	r3, s0
 800a234:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a238:	3a7f      	subs	r2, #127	; 0x7f
 800a23a:	2a16      	cmp	r2, #22
 800a23c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a240:	dc2a      	bgt.n	800a298 <floorf+0x68>
 800a242:	2a00      	cmp	r2, #0
 800a244:	da11      	bge.n	800a26a <floorf+0x3a>
 800a246:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a2a8 <floorf+0x78>
 800a24a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a24e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	dd05      	ble.n	800a264 <floorf+0x34>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	da23      	bge.n	800a2a4 <floorf+0x74>
 800a25c:	4a13      	ldr	r2, [pc, #76]	; (800a2ac <floorf+0x7c>)
 800a25e:	2900      	cmp	r1, #0
 800a260:	bf18      	it	ne
 800a262:	4613      	movne	r3, r2
 800a264:	ee00 3a10 	vmov	s0, r3
 800a268:	4770      	bx	lr
 800a26a:	4911      	ldr	r1, [pc, #68]	; (800a2b0 <floorf+0x80>)
 800a26c:	4111      	asrs	r1, r2
 800a26e:	420b      	tst	r3, r1
 800a270:	d0fa      	beq.n	800a268 <floorf+0x38>
 800a272:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a2a8 <floorf+0x78>
 800a276:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a27a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a282:	ddef      	ble.n	800a264 <floorf+0x34>
 800a284:	2b00      	cmp	r3, #0
 800a286:	bfbe      	ittt	lt
 800a288:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a28c:	fa40 f202 	asrlt.w	r2, r0, r2
 800a290:	189b      	addlt	r3, r3, r2
 800a292:	ea23 0301 	bic.w	r3, r3, r1
 800a296:	e7e5      	b.n	800a264 <floorf+0x34>
 800a298:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a29c:	d3e4      	bcc.n	800a268 <floorf+0x38>
 800a29e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a2a2:	4770      	bx	lr
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e7dd      	b.n	800a264 <floorf+0x34>
 800a2a8:	7149f2ca 	.word	0x7149f2ca
 800a2ac:	bf800000 	.word	0xbf800000
 800a2b0:	007fffff 	.word	0x007fffff

0800a2b4 <scalbnf>:
 800a2b4:	ee10 3a10 	vmov	r3, s0
 800a2b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a2bc:	d025      	beq.n	800a30a <scalbnf+0x56>
 800a2be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a2c2:	d302      	bcc.n	800a2ca <scalbnf+0x16>
 800a2c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a2c8:	4770      	bx	lr
 800a2ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a2ce:	d122      	bne.n	800a316 <scalbnf+0x62>
 800a2d0:	4b2a      	ldr	r3, [pc, #168]	; (800a37c <scalbnf+0xc8>)
 800a2d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a380 <scalbnf+0xcc>
 800a2d6:	4298      	cmp	r0, r3
 800a2d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a2dc:	db16      	blt.n	800a30c <scalbnf+0x58>
 800a2de:	ee10 3a10 	vmov	r3, s0
 800a2e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a2e6:	3a19      	subs	r2, #25
 800a2e8:	4402      	add	r2, r0
 800a2ea:	2afe      	cmp	r2, #254	; 0xfe
 800a2ec:	dd15      	ble.n	800a31a <scalbnf+0x66>
 800a2ee:	ee10 3a10 	vmov	r3, s0
 800a2f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800a384 <scalbnf+0xd0>
 800a2f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a388 <scalbnf+0xd4>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	eeb0 7a67 	vmov.f32	s14, s15
 800a300:	bfb8      	it	lt
 800a302:	eef0 7a66 	vmovlt.f32	s15, s13
 800a306:	ee27 0a27 	vmul.f32	s0, s14, s15
 800a30a:	4770      	bx	lr
 800a30c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a38c <scalbnf+0xd8>
 800a310:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a314:	4770      	bx	lr
 800a316:	0dd2      	lsrs	r2, r2, #23
 800a318:	e7e6      	b.n	800a2e8 <scalbnf+0x34>
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	dd06      	ble.n	800a32c <scalbnf+0x78>
 800a31e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a322:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a326:	ee00 3a10 	vmov	s0, r3
 800a32a:	4770      	bx	lr
 800a32c:	f112 0f16 	cmn.w	r2, #22
 800a330:	da1a      	bge.n	800a368 <scalbnf+0xb4>
 800a332:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a336:	4298      	cmp	r0, r3
 800a338:	ee10 3a10 	vmov	r3, s0
 800a33c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a340:	dd0a      	ble.n	800a358 <scalbnf+0xa4>
 800a342:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800a384 <scalbnf+0xd0>
 800a346:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a388 <scalbnf+0xd4>
 800a34a:	eef0 7a40 	vmov.f32	s15, s0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bf18      	it	ne
 800a352:	eeb0 0a47 	vmovne.f32	s0, s14
 800a356:	e7db      	b.n	800a310 <scalbnf+0x5c>
 800a358:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a38c <scalbnf+0xd8>
 800a35c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a390 <scalbnf+0xdc>
 800a360:	eef0 7a40 	vmov.f32	s15, s0
 800a364:	2b00      	cmp	r3, #0
 800a366:	e7f3      	b.n	800a350 <scalbnf+0x9c>
 800a368:	3219      	adds	r2, #25
 800a36a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a36e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a372:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a394 <scalbnf+0xe0>
 800a376:	ee07 3a10 	vmov	s14, r3
 800a37a:	e7c4      	b.n	800a306 <scalbnf+0x52>
 800a37c:	ffff3cb0 	.word	0xffff3cb0
 800a380:	4c000000 	.word	0x4c000000
 800a384:	7149f2ca 	.word	0x7149f2ca
 800a388:	f149f2ca 	.word	0xf149f2ca
 800a38c:	0da24260 	.word	0x0da24260
 800a390:	8da24260 	.word	0x8da24260
 800a394:	33000000 	.word	0x33000000

0800a398 <__errno>:
 800a398:	4b01      	ldr	r3, [pc, #4]	; (800a3a0 <__errno+0x8>)
 800a39a:	6818      	ldr	r0, [r3, #0]
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	2000002c 	.word	0x2000002c

0800a3a4 <__libc_init_array>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	4d0d      	ldr	r5, [pc, #52]	; (800a3dc <__libc_init_array+0x38>)
 800a3a8:	4c0d      	ldr	r4, [pc, #52]	; (800a3e0 <__libc_init_array+0x3c>)
 800a3aa:	1b64      	subs	r4, r4, r5
 800a3ac:	10a4      	asrs	r4, r4, #2
 800a3ae:	2600      	movs	r6, #0
 800a3b0:	42a6      	cmp	r6, r4
 800a3b2:	d109      	bne.n	800a3c8 <__libc_init_array+0x24>
 800a3b4:	4d0b      	ldr	r5, [pc, #44]	; (800a3e4 <__libc_init_array+0x40>)
 800a3b6:	4c0c      	ldr	r4, [pc, #48]	; (800a3e8 <__libc_init_array+0x44>)
 800a3b8:	f000 f906 	bl	800a5c8 <_init>
 800a3bc:	1b64      	subs	r4, r4, r5
 800a3be:	10a4      	asrs	r4, r4, #2
 800a3c0:	2600      	movs	r6, #0
 800a3c2:	42a6      	cmp	r6, r4
 800a3c4:	d105      	bne.n	800a3d2 <__libc_init_array+0x2e>
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3cc:	4798      	blx	r3
 800a3ce:	3601      	adds	r6, #1
 800a3d0:	e7ee      	b.n	800a3b0 <__libc_init_array+0xc>
 800a3d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d6:	4798      	blx	r3
 800a3d8:	3601      	adds	r6, #1
 800a3da:	e7f2      	b.n	800a3c2 <__libc_init_array+0x1e>
 800a3dc:	0800a9dc 	.word	0x0800a9dc
 800a3e0:	0800a9dc 	.word	0x0800a9dc
 800a3e4:	0800a9dc 	.word	0x0800a9dc
 800a3e8:	0800a9e0 	.word	0x0800a9e0

0800a3ec <malloc>:
 800a3ec:	4b02      	ldr	r3, [pc, #8]	; (800a3f8 <malloc+0xc>)
 800a3ee:	4601      	mov	r1, r0
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	f000 b871 	b.w	800a4d8 <_malloc_r>
 800a3f6:	bf00      	nop
 800a3f8:	2000002c 	.word	0x2000002c

0800a3fc <free>:
 800a3fc:	4b02      	ldr	r3, [pc, #8]	; (800a408 <free+0xc>)
 800a3fe:	4601      	mov	r1, r0
 800a400:	6818      	ldr	r0, [r3, #0]
 800a402:	f000 b819 	b.w	800a438 <_free_r>
 800a406:	bf00      	nop
 800a408:	2000002c 	.word	0x2000002c

0800a40c <memcpy>:
 800a40c:	440a      	add	r2, r1
 800a40e:	4291      	cmp	r1, r2
 800a410:	f100 33ff 	add.w	r3, r0, #4294967295
 800a414:	d100      	bne.n	800a418 <memcpy+0xc>
 800a416:	4770      	bx	lr
 800a418:	b510      	push	{r4, lr}
 800a41a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a41e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a422:	4291      	cmp	r1, r2
 800a424:	d1f9      	bne.n	800a41a <memcpy+0xe>
 800a426:	bd10      	pop	{r4, pc}

0800a428 <memset>:
 800a428:	4402      	add	r2, r0
 800a42a:	4603      	mov	r3, r0
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d100      	bne.n	800a432 <memset+0xa>
 800a430:	4770      	bx	lr
 800a432:	f803 1b01 	strb.w	r1, [r3], #1
 800a436:	e7f9      	b.n	800a42c <memset+0x4>

0800a438 <_free_r>:
 800a438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a43a:	2900      	cmp	r1, #0
 800a43c:	d048      	beq.n	800a4d0 <_free_r+0x98>
 800a43e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a442:	9001      	str	r0, [sp, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f1a1 0404 	sub.w	r4, r1, #4
 800a44a:	bfb8      	it	lt
 800a44c:	18e4      	addlt	r4, r4, r3
 800a44e:	f000 f8ad 	bl	800a5ac <__malloc_lock>
 800a452:	4a20      	ldr	r2, [pc, #128]	; (800a4d4 <_free_r+0x9c>)
 800a454:	9801      	ldr	r0, [sp, #4]
 800a456:	6813      	ldr	r3, [r2, #0]
 800a458:	4615      	mov	r5, r2
 800a45a:	b933      	cbnz	r3, 800a46a <_free_r+0x32>
 800a45c:	6063      	str	r3, [r4, #4]
 800a45e:	6014      	str	r4, [r2, #0]
 800a460:	b003      	add	sp, #12
 800a462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a466:	f000 b8a7 	b.w	800a5b8 <__malloc_unlock>
 800a46a:	42a3      	cmp	r3, r4
 800a46c:	d90b      	bls.n	800a486 <_free_r+0x4e>
 800a46e:	6821      	ldr	r1, [r4, #0]
 800a470:	1862      	adds	r2, r4, r1
 800a472:	4293      	cmp	r3, r2
 800a474:	bf04      	itt	eq
 800a476:	681a      	ldreq	r2, [r3, #0]
 800a478:	685b      	ldreq	r3, [r3, #4]
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	bf04      	itt	eq
 800a47e:	1852      	addeq	r2, r2, r1
 800a480:	6022      	streq	r2, [r4, #0]
 800a482:	602c      	str	r4, [r5, #0]
 800a484:	e7ec      	b.n	800a460 <_free_r+0x28>
 800a486:	461a      	mov	r2, r3
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	b10b      	cbz	r3, 800a490 <_free_r+0x58>
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d9fa      	bls.n	800a486 <_free_r+0x4e>
 800a490:	6811      	ldr	r1, [r2, #0]
 800a492:	1855      	adds	r5, r2, r1
 800a494:	42a5      	cmp	r5, r4
 800a496:	d10b      	bne.n	800a4b0 <_free_r+0x78>
 800a498:	6824      	ldr	r4, [r4, #0]
 800a49a:	4421      	add	r1, r4
 800a49c:	1854      	adds	r4, r2, r1
 800a49e:	42a3      	cmp	r3, r4
 800a4a0:	6011      	str	r1, [r2, #0]
 800a4a2:	d1dd      	bne.n	800a460 <_free_r+0x28>
 800a4a4:	681c      	ldr	r4, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	6053      	str	r3, [r2, #4]
 800a4aa:	4421      	add	r1, r4
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	e7d7      	b.n	800a460 <_free_r+0x28>
 800a4b0:	d902      	bls.n	800a4b8 <_free_r+0x80>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	e7d3      	b.n	800a460 <_free_r+0x28>
 800a4b8:	6825      	ldr	r5, [r4, #0]
 800a4ba:	1961      	adds	r1, r4, r5
 800a4bc:	428b      	cmp	r3, r1
 800a4be:	bf04      	itt	eq
 800a4c0:	6819      	ldreq	r1, [r3, #0]
 800a4c2:	685b      	ldreq	r3, [r3, #4]
 800a4c4:	6063      	str	r3, [r4, #4]
 800a4c6:	bf04      	itt	eq
 800a4c8:	1949      	addeq	r1, r1, r5
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	6054      	str	r4, [r2, #4]
 800a4ce:	e7c7      	b.n	800a460 <_free_r+0x28>
 800a4d0:	b003      	add	sp, #12
 800a4d2:	bd30      	pop	{r4, r5, pc}
 800a4d4:	2000010c 	.word	0x2000010c

0800a4d8 <_malloc_r>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	1ccd      	adds	r5, r1, #3
 800a4dc:	f025 0503 	bic.w	r5, r5, #3
 800a4e0:	3508      	adds	r5, #8
 800a4e2:	2d0c      	cmp	r5, #12
 800a4e4:	bf38      	it	cc
 800a4e6:	250c      	movcc	r5, #12
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	db01      	blt.n	800a4f2 <_malloc_r+0x1a>
 800a4ee:	42a9      	cmp	r1, r5
 800a4f0:	d903      	bls.n	800a4fa <_malloc_r+0x22>
 800a4f2:	230c      	movs	r3, #12
 800a4f4:	6033      	str	r3, [r6, #0]
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4fa:	f000 f857 	bl	800a5ac <__malloc_lock>
 800a4fe:	4921      	ldr	r1, [pc, #132]	; (800a584 <_malloc_r+0xac>)
 800a500:	680a      	ldr	r2, [r1, #0]
 800a502:	4614      	mov	r4, r2
 800a504:	b99c      	cbnz	r4, 800a52e <_malloc_r+0x56>
 800a506:	4f20      	ldr	r7, [pc, #128]	; (800a588 <_malloc_r+0xb0>)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	b923      	cbnz	r3, 800a516 <_malloc_r+0x3e>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f83c 	bl	800a58c <_sbrk_r>
 800a514:	6038      	str	r0, [r7, #0]
 800a516:	4629      	mov	r1, r5
 800a518:	4630      	mov	r0, r6
 800a51a:	f000 f837 	bl	800a58c <_sbrk_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d123      	bne.n	800a56a <_malloc_r+0x92>
 800a522:	230c      	movs	r3, #12
 800a524:	6033      	str	r3, [r6, #0]
 800a526:	4630      	mov	r0, r6
 800a528:	f000 f846 	bl	800a5b8 <__malloc_unlock>
 800a52c:	e7e3      	b.n	800a4f6 <_malloc_r+0x1e>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	1b5b      	subs	r3, r3, r5
 800a532:	d417      	bmi.n	800a564 <_malloc_r+0x8c>
 800a534:	2b0b      	cmp	r3, #11
 800a536:	d903      	bls.n	800a540 <_malloc_r+0x68>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	441c      	add	r4, r3
 800a53c:	6025      	str	r5, [r4, #0]
 800a53e:	e004      	b.n	800a54a <_malloc_r+0x72>
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	42a2      	cmp	r2, r4
 800a544:	bf0c      	ite	eq
 800a546:	600b      	streq	r3, [r1, #0]
 800a548:	6053      	strne	r3, [r2, #4]
 800a54a:	4630      	mov	r0, r6
 800a54c:	f000 f834 	bl	800a5b8 <__malloc_unlock>
 800a550:	f104 000b 	add.w	r0, r4, #11
 800a554:	1d23      	adds	r3, r4, #4
 800a556:	f020 0007 	bic.w	r0, r0, #7
 800a55a:	1ac2      	subs	r2, r0, r3
 800a55c:	d0cc      	beq.n	800a4f8 <_malloc_r+0x20>
 800a55e:	1a1b      	subs	r3, r3, r0
 800a560:	50a3      	str	r3, [r4, r2]
 800a562:	e7c9      	b.n	800a4f8 <_malloc_r+0x20>
 800a564:	4622      	mov	r2, r4
 800a566:	6864      	ldr	r4, [r4, #4]
 800a568:	e7cc      	b.n	800a504 <_malloc_r+0x2c>
 800a56a:	1cc4      	adds	r4, r0, #3
 800a56c:	f024 0403 	bic.w	r4, r4, #3
 800a570:	42a0      	cmp	r0, r4
 800a572:	d0e3      	beq.n	800a53c <_malloc_r+0x64>
 800a574:	1a21      	subs	r1, r4, r0
 800a576:	4630      	mov	r0, r6
 800a578:	f000 f808 	bl	800a58c <_sbrk_r>
 800a57c:	3001      	adds	r0, #1
 800a57e:	d1dd      	bne.n	800a53c <_malloc_r+0x64>
 800a580:	e7cf      	b.n	800a522 <_malloc_r+0x4a>
 800a582:	bf00      	nop
 800a584:	2000010c 	.word	0x2000010c
 800a588:	20000110 	.word	0x20000110

0800a58c <_sbrk_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d06      	ldr	r5, [pc, #24]	; (800a5a8 <_sbrk_r+0x1c>)
 800a590:	2300      	movs	r3, #0
 800a592:	4604      	mov	r4, r0
 800a594:	4608      	mov	r0, r1
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	f7f6 feee 	bl	8001378 <_sbrk>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_sbrk_r+0x1a>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_sbrk_r+0x1a>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20000a9c 	.word	0x20000a9c

0800a5ac <__malloc_lock>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	; (800a5b4 <__malloc_lock+0x8>)
 800a5ae:	f000 b809 	b.w	800a5c4 <__retarget_lock_acquire_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	20000aa4 	.word	0x20000aa4

0800a5b8 <__malloc_unlock>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	; (800a5c0 <__malloc_unlock+0x8>)
 800a5ba:	f000 b804 	b.w	800a5c6 <__retarget_lock_release_recursive>
 800a5be:	bf00      	nop
 800a5c0:	20000aa4 	.word	0x20000aa4

0800a5c4 <__retarget_lock_acquire_recursive>:
 800a5c4:	4770      	bx	lr

0800a5c6 <__retarget_lock_release_recursive>:
 800a5c6:	4770      	bx	lr

0800a5c8 <_init>:
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	bf00      	nop
 800a5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ce:	bc08      	pop	{r3}
 800a5d0:	469e      	mov	lr, r3
 800a5d2:	4770      	bx	lr

0800a5d4 <_fini>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	bf00      	nop
 800a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5da:	bc08      	pop	{r3}
 800a5dc:	469e      	mov	lr, r3
 800a5de:	4770      	bx	lr
